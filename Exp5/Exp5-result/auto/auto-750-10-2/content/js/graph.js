/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2140.0, "minX": 0.0, "maxY": 35771.0, "series": [{"data": [[0.0, 2140.0], [0.1, 2477.0], [0.2, 2513.0], [0.3, 2515.0], [0.4, 2548.0], [0.5, 2578.0], [0.6, 2636.0], [0.7, 2754.0], [0.8, 2811.0], [0.9, 2815.0], [1.0, 2843.0], [1.1, 2855.0], [1.2, 2864.0], [1.3, 2867.0], [1.4, 2881.0], [1.5, 2893.0], [1.6, 2898.0], [1.7, 2899.0], [1.8, 2905.0], [1.9, 2906.0], [2.0, 2907.0], [2.1, 2907.0], [2.2, 2910.0], [2.3, 2911.0], [2.4, 2911.0], [2.5, 2913.0], [2.6, 2913.0], [2.7, 2913.0], [2.8, 2913.0], [2.9, 2914.0], [3.0, 2914.0], [3.1, 2916.0], [3.2, 2916.0], [3.3, 2917.0], [3.4, 2917.0], [3.5, 2917.0], [3.6, 2917.0], [3.7, 2918.0], [3.8, 2919.0], [3.9, 2920.0], [4.0, 2920.0], [4.1, 2921.0], [4.2, 2921.0], [4.3, 2922.0], [4.4, 2922.0], [4.5, 2922.0], [4.6, 2923.0], [4.7, 2924.0], [4.8, 2924.0], [4.9, 2925.0], [5.0, 2925.0], [5.1, 2925.0], [5.2, 2926.0], [5.3, 2926.0], [5.4, 2927.0], [5.5, 2927.0], [5.6, 2927.0], [5.7, 2928.0], [5.8, 2928.0], [5.9, 2931.0], [6.0, 2931.0], [6.1, 2931.0], [6.2, 2931.0], [6.3, 2931.0], [6.4, 2932.0], [6.5, 2932.0], [6.6, 2932.0], [6.7, 2933.0], [6.8, 2933.0], [6.9, 2934.0], [7.0, 2934.0], [7.1, 2935.0], [7.2, 2935.0], [7.3, 2935.0], [7.4, 2936.0], [7.5, 2936.0], [7.6, 2937.0], [7.7, 2937.0], [7.8, 2938.0], [7.9, 2938.0], [8.0, 2939.0], [8.1, 2940.0], [8.2, 2940.0], [8.3, 2940.0], [8.4, 2940.0], [8.5, 2942.0], [8.6, 2942.0], [8.7, 2943.0], [8.8, 2943.0], [8.9, 2943.0], [9.0, 2943.0], [9.1, 2944.0], [9.2, 2944.0], [9.3, 2945.0], [9.4, 2946.0], [9.5, 2946.0], [9.6, 2947.0], [9.7, 2947.0], [9.8, 2948.0], [9.9, 2948.0], [10.0, 2950.0], [10.1, 2950.0], [10.2, 2952.0], [10.3, 2952.0], [10.4, 2953.0], [10.5, 2954.0], [10.6, 2954.0], [10.7, 2954.0], [10.8, 2955.0], [10.9, 2956.0], [11.0, 2958.0], [11.1, 2959.0], [11.2, 2964.0], [11.3, 2966.0], [11.4, 2973.0], [11.5, 2973.0], [11.6, 2981.0], [11.7, 2982.0], [11.8, 2983.0], [11.9, 2990.0], [12.0, 3001.0], [12.1, 3003.0], [12.2, 3029.0], [12.3, 3036.0], [12.4, 3059.0], [12.5, 3072.0], [12.6, 3095.0], [12.7, 3111.0], [12.8, 3115.0], [12.9, 3160.0], [13.0, 3193.0], [13.1, 3214.0], [13.2, 3222.0], [13.3, 3228.0], [13.4, 3232.0], [13.5, 3233.0], [13.6, 3240.0], [13.7, 3240.0], [13.8, 3244.0], [13.9, 3244.0], [14.0, 3247.0], [14.1, 3248.0], [14.2, 3249.0], [14.3, 3254.0], [14.4, 3257.0], [14.5, 3257.0], [14.6, 3260.0], [14.7, 3265.0], [14.8, 3269.0], [14.9, 3271.0], [15.0, 3274.0], [15.1, 3276.0], [15.2, 3281.0], [15.3, 3281.0], [15.4, 3284.0], [15.5, 3287.0], [15.6, 3291.0], [15.7, 3292.0], [15.8, 3294.0], [15.9, 3295.0], [16.0, 3299.0], [16.1, 3300.0], [16.2, 3301.0], [16.3, 3303.0], [16.4, 3304.0], [16.5, 3305.0], [16.6, 3306.0], [16.7, 3306.0], [16.8, 3307.0], [16.9, 3307.0], [17.0, 3308.0], [17.1, 3309.0], [17.2, 3310.0], [17.3, 3310.0], [17.4, 3310.0], [17.5, 3311.0], [17.6, 3311.0], [17.7, 3312.0], [17.8, 3313.0], [17.9, 3313.0], [18.0, 3315.0], [18.1, 3315.0], [18.2, 3315.0], [18.3, 3315.0], [18.4, 3316.0], [18.5, 3316.0], [18.6, 3316.0], [18.7, 3316.0], [18.8, 3316.0], [18.9, 3317.0], [19.0, 3318.0], [19.1, 3318.0], [19.2, 3318.0], [19.3, 3319.0], [19.4, 3319.0], [19.5, 3319.0], [19.6, 3319.0], [19.7, 3319.0], [19.8, 3319.0], [19.9, 3320.0], [20.0, 3320.0], [20.1, 3320.0], [20.2, 3320.0], [20.3, 3321.0], [20.4, 3321.0], [20.5, 3322.0], [20.6, 3322.0], [20.7, 3322.0], [20.8, 3323.0], [20.9, 3323.0], [21.0, 3323.0], [21.1, 3323.0], [21.2, 3323.0], [21.3, 3323.0], [21.4, 3324.0], [21.5, 3324.0], [21.6, 3324.0], [21.7, 3324.0], [21.8, 3324.0], [21.9, 3324.0], [22.0, 3325.0], [22.1, 3325.0], [22.2, 3325.0], [22.3, 3325.0], [22.4, 3325.0], [22.5, 3325.0], [22.6, 3325.0], [22.7, 3326.0], [22.8, 3326.0], [22.9, 3326.0], [23.0, 3326.0], [23.1, 3327.0], [23.2, 3327.0], [23.3, 3327.0], [23.4, 3327.0], [23.5, 3327.0], [23.6, 3327.0], [23.7, 3327.0], [23.8, 3327.0], [23.9, 3328.0], [24.0, 3328.0], [24.1, 3328.0], [24.2, 3328.0], [24.3, 3328.0], [24.4, 3328.0], [24.5, 3328.0], [24.6, 3329.0], [24.7, 3329.0], [24.8, 3329.0], [24.9, 3329.0], [25.0, 3329.0], [25.1, 3330.0], [25.2, 3330.0], [25.3, 3330.0], [25.4, 3330.0], [25.5, 3330.0], [25.6, 3331.0], [25.7, 3331.0], [25.8, 3331.0], [25.9, 3331.0], [26.0, 3332.0], [26.1, 3332.0], [26.2, 3332.0], [26.3, 3332.0], [26.4, 3332.0], [26.5, 3332.0], [26.6, 3332.0], [26.7, 3332.0], [26.8, 3333.0], [26.9, 3333.0], [27.0, 3333.0], [27.1, 3333.0], [27.2, 3333.0], [27.3, 3333.0], [27.4, 3334.0], [27.5, 3334.0], [27.6, 3334.0], [27.7, 3334.0], [27.8, 3334.0], [27.9, 3334.0], [28.0, 3334.0], [28.1, 3334.0], [28.2, 3335.0], [28.3, 3335.0], [28.4, 3335.0], [28.5, 3335.0], [28.6, 3335.0], [28.7, 3335.0], [28.8, 3335.0], [28.9, 3336.0], [29.0, 3336.0], [29.1, 3336.0], [29.2, 3336.0], [29.3, 3336.0], [29.4, 3337.0], [29.5, 3337.0], [29.6, 3337.0], [29.7, 3337.0], [29.8, 3337.0], [29.9, 3338.0], [30.0, 3338.0], [30.1, 3338.0], [30.2, 3338.0], [30.3, 3338.0], [30.4, 3338.0], [30.5, 3338.0], [30.6, 3338.0], [30.7, 3338.0], [30.8, 3339.0], [30.9, 3339.0], [31.0, 3339.0], [31.1, 3339.0], [31.2, 3339.0], [31.3, 3339.0], [31.4, 3339.0], [31.5, 3339.0], [31.6, 3340.0], [31.7, 3340.0], [31.8, 3340.0], [31.9, 3340.0], [32.0, 3340.0], [32.1, 3341.0], [32.2, 3341.0], [32.3, 3341.0], [32.4, 3341.0], [32.5, 3341.0], [32.6, 3342.0], [32.7, 3342.0], [32.8, 3342.0], [32.9, 3342.0], [33.0, 3342.0], [33.1, 3343.0], [33.2, 3343.0], [33.3, 3343.0], [33.4, 3343.0], [33.5, 3344.0], [33.6, 3344.0], [33.7, 3344.0], [33.8, 3345.0], [33.9, 3345.0], [34.0, 3345.0], [34.1, 3346.0], [34.2, 3346.0], [34.3, 3347.0], [34.4, 3347.0], [34.5, 3347.0], [34.6, 3347.0], [34.7, 3348.0], [34.8, 3348.0], [34.9, 3348.0], [35.0, 3348.0], [35.1, 3348.0], [35.2, 3348.0], [35.3, 3348.0], [35.4, 3349.0], [35.5, 3349.0], [35.6, 3349.0], [35.7, 3349.0], [35.8, 3349.0], [35.9, 3350.0], [36.0, 3351.0], [36.1, 3351.0], [36.2, 3352.0], [36.3, 3352.0], [36.4, 3353.0], [36.5, 3353.0], [36.6, 3353.0], [36.7, 3354.0], [36.8, 3355.0], [36.9, 3355.0], [37.0, 3355.0], [37.1, 3356.0], [37.2, 3356.0], [37.3, 3357.0], [37.4, 3357.0], [37.5, 3357.0], [37.6, 3358.0], [37.7, 3359.0], [37.8, 3360.0], [37.9, 3360.0], [38.0, 3361.0], [38.1, 3361.0], [38.2, 3361.0], [38.3, 3363.0], [38.4, 3363.0], [38.5, 3364.0], [38.6, 3364.0], [38.7, 3365.0], [38.8, 3366.0], [38.9, 3367.0], [39.0, 3368.0], [39.1, 3368.0], [39.2, 3370.0], [39.3, 3371.0], [39.4, 3373.0], [39.5, 3373.0], [39.6, 3374.0], [39.7, 3374.0], [39.8, 3375.0], [39.9, 3376.0], [40.0, 3379.0], [40.1, 3381.0], [40.2, 3383.0], [40.3, 3384.0], [40.4, 3384.0], [40.5, 3386.0], [40.6, 3386.0], [40.7, 3388.0], [40.8, 3388.0], [40.9, 3388.0], [41.0, 3392.0], [41.1, 3393.0], [41.2, 3395.0], [41.3, 3398.0], [41.4, 3414.0], [41.5, 3428.0], [41.6, 3490.0], [41.7, 3495.0], [41.8, 3498.0], [41.9, 3581.0], [42.0, 3589.0], [42.1, 3624.0], [42.2, 3627.0], [42.3, 3706.0], [42.4, 3706.0], [42.5, 3714.0], [42.6, 3714.0], [42.7, 3716.0], [42.8, 3716.0], [42.9, 3718.0], [43.0, 3720.0], [43.1, 3722.0], [43.2, 3722.0], [43.3, 3722.0], [43.4, 3723.0], [43.5, 3724.0], [43.6, 3725.0], [43.7, 3726.0], [43.8, 3727.0], [43.9, 3730.0], [44.0, 3730.0], [44.1, 3730.0], [44.2, 3731.0], [44.3, 3732.0], [44.4, 3734.0], [44.5, 3735.0], [44.6, 3736.0], [44.7, 3736.0], [44.8, 3737.0], [44.9, 3738.0], [45.0, 3738.0], [45.1, 3740.0], [45.2, 3740.0], [45.3, 3741.0], [45.4, 3742.0], [45.5, 3744.0], [45.6, 3744.0], [45.7, 3746.0], [45.8, 3746.0], [45.9, 3747.0], [46.0, 3748.0], [46.1, 3751.0], [46.2, 3752.0], [46.3, 3753.0], [46.4, 3753.0], [46.5, 3759.0], [46.6, 3759.0], [46.7, 3760.0], [46.8, 3762.0], [46.9, 3764.0], [47.0, 3765.0], [47.1, 3766.0], [47.2, 3767.0], [47.3, 3771.0], [47.4, 3771.0], [47.5, 3773.0], [47.6, 3779.0], [47.7, 3780.0], [47.8, 3780.0], [47.9, 3785.0], [48.0, 3787.0], [48.1, 4116.0], [48.2, 4124.0], [48.3, 4128.0], [48.4, 4128.0], [48.5, 4129.0], [48.6, 4131.0], [48.7, 4137.0], [48.8, 4138.0], [48.9, 4153.0], [49.0, 4153.0], [49.1, 4159.0], [49.2, 4162.0], [49.3, 4166.0], [49.4, 4167.0], [49.5, 4177.0], [49.6, 4195.0], [49.7, 4360.0], [49.8, 4530.0], [49.9, 4552.0], [50.0, 4559.0], [50.1, 28251.0], [50.2, 28465.0], [50.3, 28490.0], [50.4, 28500.0], [50.5, 28601.0], [50.6, 28612.0], [50.7, 28624.0], [50.8, 28657.0], [50.9, 28671.0], [51.0, 28672.0], [51.1, 28698.0], [51.2, 28699.0], [51.3, 28732.0], [51.4, 28758.0], [51.5, 28769.0], [51.6, 28771.0], [51.7, 28786.0], [51.8, 28796.0], [51.9, 28815.0], [52.0, 28832.0], [52.1, 28838.0], [52.2, 28840.0], [52.3, 28862.0], [52.4, 28868.0], [52.5, 28909.0], [52.6, 28919.0], [52.7, 28943.0], [52.8, 28976.0], [52.9, 28977.0], [53.0, 28981.0], [53.1, 28994.0], [53.2, 29002.0], [53.3, 29017.0], [53.4, 29017.0], [53.5, 29034.0], [53.6, 29053.0], [53.7, 29069.0], [53.8, 29075.0], [53.9, 29110.0], [54.0, 29110.0], [54.1, 29135.0], [54.2, 29138.0], [54.3, 29150.0], [54.4, 29174.0], [54.5, 29186.0], [54.6, 29186.0], [54.7, 29200.0], [54.8, 29213.0], [54.9, 29223.0], [55.0, 29226.0], [55.1, 29239.0], [55.2, 29244.0], [55.3, 29275.0], [55.4, 29285.0], [55.5, 29307.0], [55.6, 29308.0], [55.7, 29348.0], [55.8, 29362.0], [55.9, 29374.0], [56.0, 29374.0], [56.1, 29384.0], [56.2, 29385.0], [56.3, 29390.0], [56.4, 29399.0], [56.5, 29412.0], [56.6, 29443.0], [56.7, 29454.0], [56.8, 29466.0], [56.9, 29470.0], [57.0, 29475.0], [57.1, 29482.0], [57.2, 29482.0], [57.3, 29489.0], [57.4, 29496.0], [57.5, 29502.0], [57.6, 29512.0], [57.7, 29549.0], [57.8, 29553.0], [57.9, 29569.0], [58.0, 29573.0], [58.1, 29582.0], [58.2, 29590.0], [58.3, 29606.0], [58.4, 29624.0], [58.5, 29638.0], [58.6, 29653.0], [58.7, 29664.0], [58.8, 29677.0], [58.9, 29710.0], [59.0, 29724.0], [59.1, 29742.0], [59.2, 29753.0], [59.3, 29769.0], [59.4, 29793.0], [59.5, 29807.0], [59.6, 29816.0], [59.7, 29848.0], [59.8, 29853.0], [59.9, 29882.0], [60.0, 29895.0], [60.1, 29919.0], [60.2, 29925.0], [60.3, 29928.0], [60.4, 29928.0], [60.5, 29946.0], [60.6, 29953.0], [60.7, 29986.0], [60.8, 29995.0], [60.9, 30006.0], [61.0, 30009.0], [61.1, 30032.0], [61.2, 30046.0], [61.3, 30090.0], [61.4, 30090.0], [61.5, 30094.0], [61.6, 30095.0], [61.7, 30106.0], [61.8, 30113.0], [61.9, 30126.0], [62.0, 30138.0], [62.1, 30143.0], [62.2, 30144.0], [62.3, 30174.0], [62.4, 30177.0], [62.5, 30205.0], [62.6, 30206.0], [62.7, 30221.0], [62.8, 30245.0], [62.9, 30247.0], [63.0, 30258.0], [63.1, 30270.0], [63.2, 30303.0], [63.3, 30308.0], [63.4, 30326.0], [63.5, 30343.0], [63.6, 30344.0], [63.7, 30359.0], [63.8, 30384.0], [63.9, 30399.0], [64.0, 30401.0], [64.1, 30417.0], [64.2, 30433.0], [64.3, 30437.0], [64.4, 30439.0], [64.5, 30453.0], [64.6, 30465.0], [64.7, 30474.0], [64.8, 30476.0], [64.9, 30489.0], [65.0, 30516.0], [65.1, 30517.0], [65.2, 30520.0], [65.3, 30536.0], [65.4, 30538.0], [65.5, 30585.0], [65.6, 30594.0], [65.7, 30606.0], [65.8, 30619.0], [65.9, 30629.0], [66.0, 30630.0], [66.1, 30651.0], [66.2, 30653.0], [66.3, 30657.0], [66.4, 30666.0], [66.5, 30700.0], [66.6, 30706.0], [66.7, 30714.0], [66.8, 30715.0], [66.9, 30730.0], [67.0, 30733.0], [67.1, 30737.0], [67.2, 30740.0], [67.3, 30753.0], [67.4, 30764.0], [67.5, 30778.0], [67.6, 30786.0], [67.7, 30798.0], [67.8, 30827.0], [67.9, 30843.0], [68.0, 30847.0], [68.1, 30859.0], [68.2, 30865.0], [68.3, 30873.0], [68.4, 30886.0], [68.5, 30904.0], [68.6, 30911.0], [68.7, 30944.0], [68.8, 30950.0], [68.9, 30970.0], [69.0, 30972.0], [69.1, 31011.0], [69.2, 31037.0], [69.3, 31051.0], [69.4, 31054.0], [69.5, 31062.0], [69.6, 31066.0], [69.7, 31124.0], [69.8, 31124.0], [69.9, 31131.0], [70.0, 31166.0], [70.1, 31183.0], [70.2, 31197.0], [70.3, 31223.0], [70.4, 31224.0], [70.5, 31229.0], [70.6, 31239.0], [70.7, 31257.0], [70.8, 31284.0], [70.9, 31285.0], [71.0, 31302.0], [71.1, 31309.0], [71.2, 31324.0], [71.3, 31346.0], [71.4, 31348.0], [71.5, 31358.0], [71.6, 31365.0], [71.7, 31373.0], [71.8, 31379.0], [71.9, 31382.0], [72.0, 31384.0], [72.1, 31401.0], [72.2, 31402.0], [72.3, 31425.0], [72.4, 31428.0], [72.5, 31450.0], [72.6, 31452.0], [72.7, 31482.0], [72.8, 31502.0], [72.9, 31508.0], [73.0, 31526.0], [73.1, 31569.0], [73.2, 31569.0], [73.3, 31583.0], [73.4, 31590.0], [73.5, 31603.0], [73.6, 31623.0], [73.7, 31647.0], [73.8, 31655.0], [73.9, 31705.0], [74.0, 31713.0], [74.1, 31729.0], [74.2, 31734.0], [74.3, 31744.0], [74.4, 31748.0], [74.5, 31764.0], [74.6, 31788.0], [74.7, 31796.0], [74.8, 31801.0], [74.9, 31826.0], [75.0, 31843.0], [75.1, 31864.0], [75.2, 31869.0], [75.3, 31875.0], [75.4, 31891.0], [75.5, 31919.0], [75.6, 31934.0], [75.7, 31989.0], [75.8, 31991.0], [75.9, 31992.0], [76.0, 31998.0], [76.1, 32008.0], [76.2, 32010.0], [76.3, 32014.0], [76.4, 32019.0], [76.5, 32050.0], [76.6, 32050.0], [76.7, 32060.0], [76.8, 32070.0], [76.9, 32091.0], [77.0, 32099.0], [77.1, 32115.0], [77.2, 32116.0], [77.3, 32126.0], [77.4, 32129.0], [77.5, 32160.0], [77.6, 32174.0], [77.7, 32181.0], [77.8, 32206.0], [77.9, 32224.0], [78.0, 32226.0], [78.1, 32243.0], [78.2, 32244.0], [78.3, 32250.0], [78.4, 32255.0], [78.5, 32261.0], [78.6, 32265.0], [78.7, 32293.0], [78.8, 32297.0], [78.9, 32305.0], [79.0, 32308.0], [79.1, 32329.0], [79.2, 32332.0], [79.3, 32335.0], [79.4, 32336.0], [79.5, 32352.0], [79.6, 32358.0], [79.7, 32381.0], [79.8, 32399.0], [79.9, 32407.0], [80.0, 32435.0], [80.1, 32437.0], [80.2, 32447.0], [80.3, 32474.0], [80.4, 32475.0], [80.5, 32484.0], [80.6, 32503.0], [80.7, 32522.0], [80.8, 32537.0], [80.9, 32545.0], [81.0, 32546.0], [81.1, 32568.0], [81.2, 32571.0], [81.3, 32596.0], [81.4, 32605.0], [81.5, 32614.0], [81.6, 32636.0], [81.7, 32641.0], [81.8, 32653.0], [81.9, 32660.0], [82.0, 32689.0], [82.1, 32699.0], [82.2, 32723.0], [82.3, 32753.0], [82.4, 32771.0], [82.5, 32793.0], [82.6, 32801.0], [82.7, 32815.0], [82.8, 32843.0], [82.9, 32846.0], [83.0, 32874.0], [83.1, 32874.0], [83.2, 32885.0], [83.3, 32897.0], [83.4, 32911.0], [83.5, 32912.0], [83.6, 32936.0], [83.7, 32945.0], [83.8, 32961.0], [83.9, 32965.0], [84.0, 32987.0], [84.1, 33008.0], [84.2, 33029.0], [84.3, 33041.0], [84.4, 33067.0], [84.5, 33071.0], [84.6, 33079.0], [84.7, 33081.0], [84.8, 33095.0], [84.9, 33101.0], [85.0, 33113.0], [85.1, 33136.0], [85.2, 33145.0], [85.3, 33166.0], [85.4, 33168.0], [85.5, 33171.0], [85.6, 33190.0], [85.7, 33198.0], [85.8, 33218.0], [85.9, 33224.0], [86.0, 33264.0], [86.1, 33275.0], [86.2, 33285.0], [86.3, 33291.0], [86.4, 33305.0], [86.5, 33320.0], [86.6, 33335.0], [86.7, 33341.0], [86.8, 33352.0], [86.9, 33368.0], [87.0, 33373.0], [87.1, 33382.0], [87.2, 33411.0], [87.3, 33417.0], [87.4, 33442.0], [87.5, 33455.0], [87.6, 33462.0], [87.7, 33481.0], [87.8, 33507.0], [87.9, 33509.0], [88.0, 33550.0], [88.1, 33553.0], [88.2, 33571.0], [88.3, 33577.0], [88.4, 33585.0], [88.5, 33586.0], [88.6, 33592.0], [88.7, 33623.0], [88.8, 33634.0], [88.9, 33638.0], [89.0, 33642.0], [89.1, 33644.0], [89.2, 33650.0], [89.3, 33665.0], [89.4, 33701.0], [89.5, 33701.0], [89.6, 33722.0], [89.7, 33723.0], [89.8, 33738.0], [89.9, 33739.0], [90.0, 33758.0], [90.1, 33761.0], [90.2, 33766.0], [90.3, 33770.0], [90.4, 33792.0], [90.5, 33796.0], [90.6, 33802.0], [90.7, 33813.0], [90.8, 33818.0], [90.9, 33819.0], [91.0, 33832.0], [91.1, 33845.0], [91.2, 33859.0], [91.3, 33861.0], [91.4, 33873.0], [91.5, 33876.0], [91.6, 33892.0], [91.7, 33902.0], [91.8, 33910.0], [91.9, 33921.0], [92.0, 33946.0], [92.1, 33958.0], [92.2, 33966.0], [92.3, 33975.0], [92.4, 34011.0], [92.5, 34025.0], [92.6, 34029.0], [92.7, 34032.0], [92.8, 34064.0], [92.9, 34078.0], [93.0, 34092.0], [93.1, 34094.0], [93.2, 34105.0], [93.3, 34141.0], [93.4, 34180.0], [93.5, 34190.0], [93.6, 34219.0], [93.7, 34235.0], [93.8, 34242.0], [93.9, 34261.0], [94.0, 34280.0], [94.1, 34294.0], [94.2, 34314.0], [94.3, 34319.0], [94.4, 34340.0], [94.5, 34344.0], [94.6, 34370.0], [94.7, 34379.0], [94.8, 34392.0], [94.9, 34421.0], [95.0, 34432.0], [95.1, 34434.0], [95.2, 34454.0], [95.3, 34464.0], [95.4, 34472.0], [95.5, 34474.0], [95.6, 34497.0], [95.7, 34501.0], [95.8, 34509.0], [95.9, 34510.0], [96.0, 34523.0], [96.1, 34532.0], [96.2, 34541.0], [96.3, 34544.0], [96.4, 34555.0], [96.5, 34564.0], [96.6, 34584.0], [96.7, 34591.0], [96.8, 34608.0], [96.9, 34617.0], [97.0, 34637.0], [97.1, 34637.0], [97.2, 34662.0], [97.3, 34662.0], [97.4, 34675.0], [97.5, 34691.0], [97.6, 34725.0], [97.7, 34757.0], [97.8, 34783.0], [97.9, 34796.0], [98.0, 34798.0], [98.1, 34803.0], [98.2, 34814.0], [98.3, 34814.0], [98.4, 34822.0], [98.5, 34856.0], [98.6, 34884.0], [98.7, 34886.0], [98.8, 34898.0], [98.9, 34906.0], [99.0, 34928.0], [99.1, 34942.0], [99.2, 34959.0], [99.3, 35035.0], [99.4, 35063.0], [99.5, 35110.0], [99.6, 35258.0], [99.7, 35285.0], [99.8, 35365.0], [99.9, 35370.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 379.0, "series": [{"data": [[2100.0, 1.0], [2400.0, 2.0], [2500.0, 5.0], [2600.0, 2.0], [2800.0, 14.0], [2700.0, 2.0], [2900.0, 154.0], [3000.0, 10.0], [3100.0, 6.0], [3200.0, 45.0], [3300.0, 379.0], [3400.0, 7.0], [3500.0, 4.0], [3600.0, 2.0], [3700.0, 87.0], [4300.0, 1.0], [4200.0, 1.0], [4100.0, 24.0], [4500.0, 4.0], [28600.0, 11.0], [28500.0, 2.0], [28400.0, 3.0], [28200.0, 2.0], [28900.0, 10.0], [29600.0, 9.0], [29500.0, 13.0], [29400.0, 15.0], [29300.0, 14.0], [29100.0, 12.0], [29200.0, 12.0], [29000.0, 11.0], [28800.0, 10.0], [28700.0, 9.0], [29900.0, 12.0], [30600.0, 13.0], [30700.0, 19.0], [30500.0, 10.0], [30400.0, 15.0], [30300.0, 12.0], [30200.0, 10.0], [30100.0, 13.0], [30000.0, 12.0], [29800.0, 9.0], [29700.0, 8.0], [31600.0, 6.0], [31700.0, 13.0], [31500.0, 11.0], [31400.0, 11.0], [31300.0, 16.0], [31200.0, 11.0], [31100.0, 8.0], [31000.0, 9.0], [30900.0, 9.0], [30800.0, 11.0], [32600.0, 12.0], [32500.0, 12.0], [32400.0, 11.0], [32300.0, 14.0], [32200.0, 17.0], [32000.0, 15.0], [31900.0, 9.0], [31800.0, 10.0], [32700.0, 6.0], [32100.0, 11.0], [34600.0, 12.0], [34400.0, 12.0], [33800.0, 16.0], [33700.0, 18.0], [34500.0, 17.0], [33300.0, 12.0], [33400.0, 9.0], [33600.0, 11.0], [33500.0, 13.0], [34300.0, 11.0], [34200.0, 9.0], [34100.0, 5.0], [34000.0, 12.0], [33900.0, 11.0], [33200.0, 9.0], [34700.0, 7.0], [34800.0, 12.0], [33100.0, 14.0], [33000.0, 12.0], [32900.0, 11.0], [32800.0, 12.0], [34900.0, 6.0], [35000.0, 3.0], [35300.0, 3.0], [35200.0, 2.0], [35100.0, 2.0], [35700.0, 1.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 58.74137931034482, "minX": 1.731722133E12, "maxY": 750.0, "series": [{"data": [[1.731722133E12, 750.0], [1.731722139E12, 230.72368421052627], [1.73172214E12, 58.74137931034482], [1.731722137E12, 667.4622222222226], [1.731722138E12, 457.72566371681404], [1.731722134E12, 750.0], [1.731722135E12, 750.0], [1.731722136E12, 748.89592760181]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.73172214E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2140.0, "minX": 1.0, "maxY": 32097.462822458274, "series": [{"data": [[3.0, 4137.5], [4.0, 3710.0], [5.0, 2630.0], [7.0, 3243.0], [8.0, 2910.0], [9.0, 3724.0], [10.0, 2931.0], [11.0, 3095.0], [12.0, 3730.0], [14.0, 3351.5], [15.0, 2935.0], [16.0, 3716.0], [17.0, 3072.0], [18.0, 2997.0], [19.0, 3111.0], [20.0, 3765.0], [22.0, 3415.5], [23.0, 3214.0], [24.0, 3160.0], [26.0, 3114.0], [27.0, 3425.0], [28.0, 3704.0], [29.0, 3193.0], [30.0, 3230.0], [31.0, 3222.0], [33.0, 3238.5], [34.0, 3244.0], [37.0, 3248.0], [36.0, 3227.0], [38.0, 3240.0], [41.0, 3714.0], [40.0, 3477.5], [43.0, 3256.5], [45.0, 3255.0], [44.0, 3257.0], [47.0, 3718.0], [46.0, 3721.0], [48.0, 3265.0], [51.0, 3265.3333333333335], [53.0, 3249.0], [52.0, 3249.0], [54.0, 3245.0], [57.0, 3271.0], [56.0, 3266.5], [58.0, 3274.0], [61.0, 3240.0], [60.0, 3726.0], [63.0, 3754.0], [62.0, 3255.5], [66.0, 3706.0], [65.0, 3493.5], [71.0, 3260.0], [70.0, 3287.0], [69.0, 3284.0], [68.0, 3292.5], [74.0, 3301.0], [73.0, 3303.0], [79.0, 4552.0], [78.0, 3281.0], [77.0, 3293.0], [76.0, 3297.0], [82.0, 3301.0], [81.0, 3334.0], [80.0, 4128.0], [87.0, 3315.5], [85.0, 3313.0], [84.0, 3507.5], [91.0, 4153.0], [90.0, 3305.0], [89.0, 3312.0], [88.0, 3323.0], [95.0, 2513.0], [94.0, 3725.0], [93.0, 3308.0], [92.0, 3315.0], [99.0, 2515.0], [98.0, 2986.0], [96.0, 2140.0], [103.0, 3325.5], [101.0, 3327.0], [100.0, 2477.0], [107.0, 2548.0], [106.0, 2526.0], [105.0, 3332.5], [110.0, 3374.0], [109.0, 3338.0], [108.0, 2578.0], [115.0, 3719.5], [113.0, 3329.0], [112.0, 3052.5], [119.0, 4124.0], [118.0, 4137.0], [117.0, 2815.0], [116.0, 3728.0], [123.0, 3348.0], [122.0, 2811.0], [121.0, 3291.5], [126.0, 3321.5], [124.0, 3324.0], [135.0, 3326.5], [133.0, 3337.0], [132.0, 3306.0], [131.0, 3338.0], [130.0, 2864.0], [129.0, 3324.0], [128.0, 3327.0], [143.0, 4129.0], [142.0, 3306.0], [141.0, 3096.5], [139.0, 2855.0], [138.0, 3742.0], [137.0, 3096.0], [151.0, 3352.5], [149.0, 3327.0], [148.0, 3321.0], [146.0, 3326.5], [144.0, 3317.0], [158.0, 3334.0], [157.0, 2893.0], [156.0, 2881.0], [155.0, 3730.0], [154.0, 3343.0], [153.0, 2867.0], [152.0, 3338.0], [167.0, 3299.0], [166.0, 3338.0], [165.0, 3319.0], [163.0, 2873.0], [162.0, 2952.0], [161.0, 3142.0], [160.0, 3330.0], [175.0, 3315.0], [174.0, 3295.0], [173.0, 4114.0], [172.0, 3333.0], [171.0, 3310.0], [170.0, 2912.0], [169.0, 3514.5], [183.0, 3291.0], [182.0, 3339.0], [180.0, 3124.0], [178.0, 3340.0], [177.0, 4530.0], [176.0, 3724.0], [191.0, 3325.0], [190.0, 3338.0], [189.0, 3130.5], [187.0, 3336.0], [186.0, 2922.0], [185.0, 3323.0], [184.0, 3323.0], [199.0, 4552.0], [198.0, 3327.0], [197.0, 3740.0], [196.0, 3325.0], [195.0, 3326.0], [194.0, 3718.0], [193.0, 3337.0], [192.0, 2894.0], [206.0, 3328.5], [204.0, 3722.0], [203.0, 2898.0], [202.0, 3727.0], [201.0, 2919.0], [200.0, 3316.0], [215.0, 3546.0], [213.0, 3327.0], [212.0, 3367.0], [211.0, 2922.0], [210.0, 3519.0], [208.0, 3132.0], [223.0, 3326.0], [222.0, 3733.0], [220.0, 3740.0], [219.0, 3523.0], [217.0, 3327.0], [216.0, 3332.0], [231.0, 3319.0], [230.0, 3333.0], [229.0, 2928.0], [228.0, 4128.0], [227.0, 3318.0], [226.0, 3334.0], [225.0, 3326.5], [239.0, 3319.0], [238.0, 3321.0], [237.0, 3739.0], [236.0, 3325.0], [235.0, 2916.0], [234.0, 4138.0], [233.0, 3326.0], [232.0, 3325.0], [247.0, 3334.0], [246.0, 3325.0], [244.0, 3319.0], [243.0, 2927.0], [242.0, 3525.0], [240.0, 3324.0], [255.0, 2958.0], [254.0, 3736.0], [253.0, 3316.0], [252.0, 4135.0], [251.0, 3323.0], [250.0, 3592.3333333333335], [270.0, 3335.0], [271.0, 2934.0], [268.0, 3342.0], [259.0, 2917.0], [258.0, 3319.0], [257.0, 3525.0], [267.0, 3530.0], [265.0, 3345.0], [264.0, 2911.0], [263.0, 2913.0], [262.0, 3315.0], [261.0, 3333.0], [260.0, 3331.0], [285.0, 3332.0], [287.0, 3957.5], [284.0, 3753.0], [275.0, 3330.0], [274.0, 3335.0], [273.0, 3344.0], [272.0, 3129.5], [283.0, 3332.0], [282.0, 2953.0], [281.0, 3325.0], [280.0, 3353.0], [279.0, 3333.0], [277.0, 4162.0], [276.0, 2948.0], [291.0, 3331.0], [303.0, 2951.5], [301.0, 3330.0], [299.0, 3720.0], [298.0, 2913.5], [296.0, 3349.0], [295.0, 3556.0], [293.0, 2946.0], [292.0, 2949.0], [290.0, 2926.0], [289.0, 3352.0], [288.0, 3327.0], [318.0, 3530.5], [319.0, 2948.0], [316.0, 2917.0], [306.0, 2943.0], [305.0, 3339.0], [315.0, 3738.0], [314.0, 3333.0], [313.0, 3340.0], [312.0, 3324.0], [311.0, 3324.5], [309.0, 3352.0], [308.0, 3140.0], [322.0, 3342.0], [335.0, 3747.0], [333.0, 2927.5], [331.0, 3334.0], [330.0, 3737.0], [329.0, 3126.5], [327.0, 3350.0], [326.0, 3136.5], [324.0, 3746.0], [321.0, 3345.0], [320.0, 3326.0], [350.0, 3332.0], [351.0, 2943.0], [349.0, 3759.0], [348.0, 3748.0], [347.0, 2952.0], [346.0, 3322.0], [345.0, 3325.0], [344.0, 3319.0], [343.0, 2936.0], [336.0, 3336.0], [339.0, 3732.0], [338.0, 3347.5], [342.0, 3339.5], [340.0, 2933.0], [366.0, 3342.0], [367.0, 4166.0], [365.0, 3780.0], [364.0, 3345.0], [363.0, 3752.0], [362.0, 3139.0], [360.0, 3336.0], [359.0, 3735.0], [353.0, 2914.0], [352.0, 3357.0], [355.0, 3328.0], [354.0, 2905.0], [358.0, 2939.0], [357.0, 3347.0], [356.0, 3750.0], [382.0, 3333.0], [383.0, 2943.0], [381.0, 3342.0], [380.0, 3346.0], [378.0, 3353.0], [377.0, 2932.0], [376.0, 3339.0], [375.0, 3338.0], [369.0, 3764.0], [368.0, 3334.0], [371.0, 3342.0], [370.0, 3335.0], [374.0, 4177.0], [373.0, 2948.0], [372.0, 3318.0], [387.0, 3154.5], [397.0, 3360.0], [399.0, 3327.0], [396.0, 2931.5], [394.0, 3771.0], [393.0, 3553.0], [391.0, 3744.0], [390.0, 2943.0], [389.0, 3357.0], [386.0, 3343.0], [384.0, 3332.0], [403.0, 3343.0], [414.0, 3403.0], [412.0, 2920.0], [411.0, 3135.0], [409.0, 3361.0], [408.0, 3163.0], [406.0, 3746.0], [405.0, 3339.0], [404.0, 3368.0], [402.0, 3343.0], [401.0, 3355.5], [418.0, 3736.0], [430.0, 3364.0], [429.0, 3341.5], [427.0, 2934.0], [426.0, 4159.0], [425.0, 3763.0], [423.0, 3121.5], [421.0, 3344.0], [420.0, 3132.0], [417.0, 3331.0], [416.0, 3146.5], [435.0, 3327.0], [446.0, 3151.5], [447.0, 2938.0], [444.0, 3326.0], [443.0, 3065.3333333333335], [440.0, 3338.0], [439.0, 3746.0], [438.0, 3347.0], [437.0, 3346.0], [434.0, 2932.0], [433.0, 2935.0], [432.0, 3331.5], [462.0, 3358.0], [463.0, 3349.0], [461.0, 3053.6666666666665], [451.0, 3329.0], [450.0, 3322.0], [449.0, 2940.0], [448.0, 3348.0], [458.0, 3340.0], [457.0, 3764.0], [456.0, 3751.0], [455.0, 2954.0], [454.0, 3730.0], [453.0, 3316.0], [452.0, 3355.0], [478.0, 2936.0], [479.0, 3333.0], [477.0, 3340.0], [467.0, 3340.0], [465.0, 2917.0], [475.0, 3141.5], [473.0, 3347.0], [472.0, 2921.0], [471.0, 3348.0], [470.0, 3736.0], [469.0, 3079.3333333333335], [494.0, 3367.0], [495.0, 3765.0], [493.0, 3336.0], [491.0, 2953.0], [490.0, 3343.0], [488.0, 3342.0], [487.0, 3125.0], [485.0, 3357.0], [483.0, 3334.0], [482.0, 3335.0], [481.0, 2954.0], [480.0, 2928.0], [510.0, 3321.0], [511.0, 2913.0], [509.0, 3322.0], [508.0, 2983.0], [507.0, 3324.0], [506.0, 3143.0], [504.0, 3330.0], [503.0, 3348.0], [496.0, 3319.0], [498.0, 2922.0], [497.0, 3323.0], [502.0, 3132.0], [500.0, 3549.0], [540.0, 3370.0], [543.0, 2944.0], [529.0, 3742.0], [528.0, 3340.0], [531.0, 3338.0], [530.0, 3347.0], [533.0, 3361.0], [532.0, 3320.0], [542.0, 3335.0], [541.0, 3334.0], [539.0, 3771.0], [538.0, 3339.0], [537.0, 3737.0], [536.0, 3345.0], [526.0, 2942.0], [512.0, 3324.0], [515.0, 3338.0], [514.0, 3543.0], [517.0, 3744.0], [516.0, 3332.0], [519.0, 2924.0], [518.0, 3349.0], [525.0, 3339.0], [524.0, 3344.0], [523.0, 3348.0], [522.0, 3746.0], [521.0, 3347.0], [520.0, 2926.0], [535.0, 3349.0], [534.0, 3332.0], [568.0, 3341.0], [574.0, 3373.0], [575.0, 3339.0], [561.0, 2935.0], [560.0, 3136.5], [573.0, 3360.0], [571.0, 3334.0], [570.0, 9976.25], [558.0, 3553.5], [544.0, 3323.0], [546.0, 3339.0], [545.0, 3753.0], [548.0, 2939.0], [547.0, 4195.0], [551.0, 3319.5], [549.0, 2931.0], [556.0, 3346.0], [555.0, 2950.0], [554.0, 4283.0], [553.0, 3339.5], [566.0, 3779.0], [565.0, 3566.0], [563.0, 3346.0], [562.0, 4360.0], [604.0, 3310.0], [607.0, 2916.0], [593.0, 3320.0], [592.0, 3287.0], [595.0, 3785.0], [594.0, 3339.0], [597.0, 3341.0], [596.0, 3782.0], [606.0, 3388.0], [605.0, 2899.0], [603.0, 3348.0], [602.0, 3787.0], [601.0, 3315.0], [600.0, 2940.0], [591.0, 3294.0], [577.0, 3334.0], [576.0, 3363.0], [579.0, 3343.0], [578.0, 3327.0], [581.0, 2956.0], [580.0, 16221.5], [583.0, 3373.0], [582.0, 3332.0], [590.0, 3337.0], [589.0, 3306.0], [588.0, 3348.0], [587.0, 3767.0], [586.0, 3342.0], [585.0, 3325.0], [584.0, 3328.0], [599.0, 2947.0], [598.0, 17088.5], [634.0, 3536.0], [626.0, 2938.0], [637.0, 3353.0], [638.0, 2945.0], [625.0, 3361.0], [624.0, 16627.5], [636.0, 3111.0], [632.0, 3154.5], [615.0, 3334.0], [614.0, 3340.0], [612.0, 3320.0], [611.0, 3762.0], [610.0, 2931.0], [609.0, 3356.0], [608.0, 3309.0], [623.0, 3773.0], [622.0, 2913.0], [621.0, 3329.0], [620.0, 3323.0], [619.0, 3307.5], [617.0, 3772.0], [616.0, 2907.0], [630.0, 3307.0], [628.0, 3316.0], [627.0, 2935.0], [668.0, 3351.0], [671.0, 20583.0], [656.0, 2920.0], [658.0, 3335.0], [657.0, 16153.5], [661.0, 2908.0], [659.0, 3363.0], [670.0, 3370.0], [669.0, 2906.0], [667.0, 3359.0], [666.0, 3349.0], [665.0, 16235.0], [664.0, 3344.0], [655.0, 17686.0], [640.0, 3133.5], [643.0, 3339.5], [641.0, 3300.0], [645.0, 3340.0], [644.0, 3313.0], [647.0, 3331.0], [646.0, 2926.0], [654.0, 17172.5], [653.0, 2914.0], [652.0, 16729.0], [651.0, 3355.0], [650.0, 3323.0], [649.0, 3338.0], [648.0, 3340.0], [663.0, 22657.75], [662.0, 3347.0], [698.0, 3388.0], [702.0, 16468.5], [703.0, 3386.0], [691.0, 3147.5], [689.0, 3219.6666666666665], [693.0, 16412.0], [692.0, 16788.0], [701.0, 3398.0], [700.0, 2916.0], [699.0, 16440.0], [697.0, 3377.0], [679.0, 3352.0], [678.0, 3366.0], [677.0, 16375.0], [676.0, 3149.0], [674.0, 16075.5], [673.0, 2934.0], [672.0, 3355.0], [686.0, 3393.0], [685.0, 3365.0], [684.0, 3363.0], [683.0, 3393.0], [682.0, 3374.0], [681.0, 2921.0], [680.0, 3364.0], [695.0, 3422.0], [694.0, 3385.0], [729.0, 15795.5], [734.0, 25546.875], [735.0, 2968.0], [722.0, 3589.0], [721.0, 3340.0], [724.0, 22951.5], [723.0, 3581.0], [733.0, 11542.333333333332], [731.0, 22252.5], [730.0, 2942.0], [728.0, 2938.0], [711.0, 3428.0], [710.0, 16513.0], [709.0, 3386.0], [708.0, 3396.0], [707.0, 3381.0], [706.0, 21812.0], [705.0, 3383.0], [704.0, 2911.0], [718.0, 3498.0], [716.0, 2946.0], [715.0, 3490.0], [714.0, 16574.0], [713.0, 2927.0], [712.0, 3387.0], [727.0, 2931.0], [726.0, 11729.333333333334], [749.0, 24103.2], [750.0, 32097.462822458274], [737.0, 2966.0], [736.0, 20215.666666666668], [739.0, 27081.46153846154], [738.0, 26412.222222222223], [748.0, 25739.285714285714], [747.0, 22989.25], [746.0, 22661.25], [745.0, 3003.0], [744.0, 27852.0], [743.0, 3029.0], [742.0, 16624.0], [741.0, 3040.0], [740.0, 2981.0], [1.0, 2490.0]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[561.0326666666673, 17559.383999999973]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 750.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11036.0, "minX": 1.731722133E12, "maxY": 432849.0, "series": [{"data": [[1.731722133E12, 80991.0], [1.731722139E12, 424891.0], [1.73172214E12, 217755.0], [1.731722137E12, 424474.0], [1.731722138E12, 432849.0], [1.731722134E12, 405081.0], [1.731722135E12, 432105.0], [1.731722136E12, 428587.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.731722133E12, 11036.0], [1.731722139E12, 56328.0], [1.73172214E12, 28983.0], [1.731722137E12, 55711.0], [1.731722138E12, 55768.0], [1.731722134E12, 52164.0], [1.731722135E12, 56274.0], [1.731722136E12, 54785.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.73172214E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3308.8879310344823, "minX": 1.731722133E12, "maxY": 34189.02222222222, "series": [{"data": [[1.731722133E12, 34189.02222222222], [1.731722139E12, 3341.447368421052], [1.73172214E12, 3308.8879310344823], [1.731722137E12, 9765.328888888893], [1.731722138E12, 3324.442477876105], [1.731722134E12, 33674.331753554514], [1.731722135E12, 31856.16228070176], [1.731722136E12, 28678.17647058823]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.73172214E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3308.8879310344823, "minX": 1.731722133E12, "maxY": 34189.00000000001, "series": [{"data": [[1.731722133E12, 34189.00000000001], [1.731722139E12, 3341.4342105263163], [1.73172214E12, 3308.8879310344823], [1.731722137E12, 9765.31111111111], [1.731722138E12, 3324.384955752213], [1.731722134E12, 33674.289099526075], [1.731722135E12, 31856.122807017542], [1.731722136E12, 28678.158371040718]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.73172214E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.731722133E12, "maxY": 556.2132701421801, "series": [{"data": [[1.731722133E12, 299.71111111111105], [1.731722139E12, 0.0], [1.73172214E12, 0.0], [1.731722137E12, 0.23555555555555555], [1.731722138E12, 0.0], [1.731722134E12, 556.2132701421801], [1.731722135E12, 321.65350877192975], [1.731722136E12, 51.34389140271496]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.73172214E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2140.0, "minX": 1.731722133E12, "maxY": 35771.0, "series": [{"data": [[1.731722133E12, 34928.0], [1.731722139E12, 4559.0], [1.73172214E12, 4552.0], [1.731722137E12, 32932.0], [1.731722138E12, 4360.0], [1.731722134E12, 35771.0], [1.731722135E12, 35285.0], [1.731722136E12, 32769.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.731722133E12, 34788.4], [1.731722139E12, 3740.0], [1.73172214E12, 3730.6], [1.731722137E12, 29221.4], [1.731722138E12, 3752.3], [1.731722134E12, 34849.2], [1.731722135E12, 33227.3], [1.731722136E12, 31327.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.731722133E12, 34928.0], [1.731722139E12, 4545.62], [1.73172214E12, 4484.169999999999], [1.731722137E12, 32181.28000000001], [1.731722138E12, 4259.239999999999], [1.731722134E12, 35369.4], [1.731722135E12, 34354.75], [1.731722136E12, 32654.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.731722133E12, 34812.0], [1.731722139E12, 4133.2], [1.73172214E12, 4125.45], [1.731722137E12, 30041.1], [1.731722138E12, 3771.0], [1.731722134E12, 34989.4], [1.731722135E12, 33614.95], [1.731722136E12, 31706.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.731722133E12, 32936.0], [1.731722139E12, 2811.0], [1.73172214E12, 2140.0], [1.731722137E12, 2899.0], [1.731722138E12, 2905.0], [1.731722134E12, 31309.0], [1.731722135E12, 29724.0], [1.731722136E12, 2981.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.731722133E12, 34421.0], [1.731722139E12, 3328.0], [1.73172214E12, 3282.0], [1.731722137E12, 3361.0], [1.731722138E12, 3338.0], [1.731722134E12, 33757.0], [1.731722135E12, 31874.0], [1.731722136E12, 29895.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.73172214E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3282.0, "minX": 45.0, "maxY": 34421.0, "series": [{"data": [[45.0, 34421.0], [211.0, 33757.0], [221.0, 29895.0], [228.0, 17141.5], [225.0, 3361.0], [226.0, 3338.0], [116.0, 3282.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 228.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3282.0, "minX": 45.0, "maxY": 34421.0, "series": [{"data": [[45.0, 34421.0], [211.0, 33757.0], [221.0, 29895.0], [228.0, 17141.5], [225.0, 3361.0], [226.0, 3338.0], [116.0, 3282.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 228.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.731722099E12, "maxY": 228.0, "series": [{"data": [[1.731722099E12, 89.0], [1.7317221E12, 77.0], [1.731722101E12, 77.0], [1.731722137E12, 56.0], [1.731722134E12, 211.0], [1.731722135E12, 228.0], [1.731722136E12, 210.0], [1.731722133E12, 45.0], [1.731722107E12, 77.0], [1.731722108E12, 45.0], [1.731722105E12, 77.0], [1.731722106E12, 77.0], [1.731722102E12, 77.0], [1.731722103E12, 77.0], [1.731722104E12, 77.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722137E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.731722133E12, "maxY": 228.0, "series": [{"data": [[1.731722133E12, 45.0], [1.731722139E12, 228.0], [1.73172214E12, 116.0], [1.731722137E12, 225.0], [1.731722138E12, 226.0], [1.731722134E12, 211.0], [1.731722135E12, 228.0], [1.731722136E12, 221.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.73172214E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.731722133E12, "maxY": 228.0, "series": [{"data": [[1.731722133E12, 45.0], [1.731722139E12, 228.0], [1.73172214E12, 116.0], [1.731722137E12, 225.0], [1.731722138E12, 226.0], [1.731722134E12, 211.0], [1.731722135E12, 228.0], [1.731722136E12, 221.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.73172214E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.731722133E12, "maxY": 228.0, "series": [{"data": [[1.731722133E12, 45.0], [1.731722139E12, 228.0], [1.73172214E12, 116.0], [1.731722137E12, 225.0], [1.731722138E12, 226.0], [1.731722134E12, 211.0], [1.731722135E12, 228.0], [1.731722136E12, 221.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.73172214E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

