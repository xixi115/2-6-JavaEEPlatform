/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "maxY": 2364.0, "series": [{"data": [[0.0, 38.0], [0.1, 39.0], [0.2, 44.0], [0.3, 55.0], [0.4, 58.0], [0.5, 72.0], [0.6, 92.0], [0.7, 123.0], [0.8, 138.0], [0.9, 141.0], [1.0, 150.0], [1.1, 161.0], [1.2, 170.0], [1.3, 196.0], [1.4, 204.0], [1.5, 209.0], [1.6, 214.0], [1.7, 223.0], [1.8, 230.0], [1.9, 231.0], [2.0, 236.0], [2.1, 237.0], [2.2, 248.0], [2.3, 253.0], [2.4, 254.0], [2.5, 255.0], [2.6, 259.0], [2.7, 259.0], [2.8, 261.0], [2.9, 265.0], [3.0, 267.0], [3.1, 268.0], [3.2, 270.0], [3.3, 273.0], [3.4, 275.0], [3.5, 279.0], [3.6, 280.0], [3.7, 284.0], [3.8, 288.0], [3.9, 291.0], [4.0, 293.0], [4.1, 294.0], [4.2, 297.0], [4.3, 299.0], [4.4, 300.0], [4.5, 302.0], [4.6, 304.0], [4.7, 304.0], [4.8, 305.0], [4.9, 306.0], [5.0, 308.0], [5.1, 309.0], [5.2, 309.0], [5.3, 311.0], [5.4, 312.0], [5.5, 313.0], [5.6, 314.0], [5.7, 315.0], [5.8, 320.0], [5.9, 322.0], [6.0, 324.0], [6.1, 325.0], [6.2, 330.0], [6.3, 331.0], [6.4, 333.0], [6.5, 334.0], [6.6, 335.0], [6.7, 338.0], [6.8, 343.0], [6.9, 344.0], [7.0, 349.0], [7.1, 354.0], [7.2, 356.0], [7.3, 359.0], [7.4, 360.0], [7.5, 361.0], [7.6, 362.0], [7.7, 363.0], [7.8, 365.0], [7.9, 365.0], [8.0, 366.0], [8.1, 368.0], [8.2, 369.0], [8.3, 369.0], [8.4, 371.0], [8.5, 371.0], [8.6, 372.0], [8.7, 374.0], [8.8, 375.0], [8.9, 376.0], [9.0, 376.0], [9.1, 377.0], [9.2, 378.0], [9.3, 378.0], [9.4, 378.0], [9.5, 378.0], [9.6, 379.0], [9.7, 379.0], [9.8, 381.0], [9.9, 381.0], [10.0, 381.0], [10.1, 382.0], [10.2, 383.0], [10.3, 383.0], [10.4, 384.0], [10.5, 384.0], [10.6, 385.0], [10.7, 385.0], [10.8, 386.0], [10.9, 386.0], [11.0, 387.0], [11.1, 388.0], [11.2, 388.0], [11.3, 389.0], [11.4, 389.0], [11.5, 390.0], [11.6, 391.0], [11.7, 391.0], [11.8, 392.0], [11.9, 392.0], [12.0, 393.0], [12.1, 395.0], [12.2, 395.0], [12.3, 397.0], [12.4, 397.0], [12.5, 398.0], [12.6, 399.0], [12.7, 400.0], [12.8, 402.0], [12.9, 402.0], [13.0, 404.0], [13.1, 406.0], [13.2, 408.0], [13.3, 410.0], [13.4, 414.0], [13.5, 416.0], [13.6, 417.0], [13.7, 418.0], [13.8, 420.0], [13.9, 421.0], [14.0, 422.0], [14.1, 424.0], [14.2, 424.0], [14.3, 425.0], [14.4, 425.0], [14.5, 429.0], [14.6, 430.0], [14.7, 430.0], [14.8, 433.0], [14.9, 434.0], [15.0, 436.0], [15.1, 437.0], [15.2, 439.0], [15.3, 440.0], [15.4, 441.0], [15.5, 444.0], [15.6, 446.0], [15.7, 447.0], [15.8, 449.0], [15.9, 449.0], [16.0, 454.0], [16.1, 456.0], [16.2, 457.0], [16.3, 459.0], [16.4, 461.0], [16.5, 462.0], [16.6, 464.0], [16.7, 465.0], [16.8, 466.0], [16.9, 467.0], [17.0, 469.0], [17.1, 469.0], [17.2, 470.0], [17.3, 471.0], [17.4, 471.0], [17.5, 472.0], [17.6, 472.0], [17.7, 472.0], [17.8, 473.0], [17.9, 474.0], [18.0, 476.0], [18.1, 476.0], [18.2, 476.0], [18.3, 477.0], [18.4, 478.0], [18.5, 479.0], [18.6, 479.0], [18.7, 480.0], [18.8, 480.0], [18.9, 480.0], [19.0, 480.0], [19.1, 481.0], [19.2, 481.0], [19.3, 482.0], [19.4, 482.0], [19.5, 483.0], [19.6, 483.0], [19.7, 484.0], [19.8, 484.0], [19.9, 484.0], [20.0, 485.0], [20.1, 485.0], [20.2, 486.0], [20.3, 486.0], [20.4, 487.0], [20.5, 488.0], [20.6, 489.0], [20.7, 489.0], [20.8, 490.0], [20.9, 490.0], [21.0, 491.0], [21.1, 491.0], [21.2, 492.0], [21.3, 492.0], [21.4, 493.0], [21.5, 493.0], [21.6, 494.0], [21.7, 495.0], [21.8, 496.0], [21.9, 498.0], [22.0, 499.0], [22.1, 500.0], [22.2, 502.0], [22.3, 503.0], [22.4, 504.0], [22.5, 505.0], [22.6, 507.0], [22.7, 507.0], [22.8, 509.0], [22.9, 510.0], [23.0, 511.0], [23.1, 513.0], [23.2, 513.0], [23.3, 516.0], [23.4, 518.0], [23.5, 520.0], [23.6, 522.0], [23.7, 524.0], [23.8, 527.0], [23.9, 528.0], [24.0, 529.0], [24.1, 530.0], [24.2, 531.0], [24.3, 537.0], [24.4, 538.0], [24.5, 538.0], [24.6, 539.0], [24.7, 541.0], [24.8, 542.0], [24.9, 544.0], [25.0, 546.0], [25.1, 548.0], [25.2, 549.0], [25.3, 551.0], [25.4, 551.0], [25.5, 552.0], [25.6, 554.0], [25.7, 556.0], [25.8, 557.0], [25.9, 558.0], [26.0, 558.0], [26.1, 560.0], [26.2, 560.0], [26.3, 561.0], [26.4, 561.0], [26.5, 561.0], [26.6, 563.0], [26.7, 564.0], [26.8, 566.0], [26.9, 566.0], [27.0, 566.0], [27.1, 567.0], [27.2, 568.0], [27.3, 570.0], [27.4, 571.0], [27.5, 572.0], [27.6, 574.0], [27.7, 574.0], [27.8, 575.0], [27.9, 576.0], [28.0, 577.0], [28.1, 578.0], [28.2, 579.0], [28.3, 583.0], [28.4, 584.0], [28.5, 586.0], [28.6, 587.0], [28.7, 587.0], [28.8, 589.0], [28.9, 589.0], [29.0, 590.0], [29.1, 592.0], [29.2, 594.0], [29.3, 595.0], [29.4, 596.0], [29.5, 598.0], [29.6, 599.0], [29.7, 603.0], [29.8, 604.0], [29.9, 606.0], [30.0, 607.0], [30.1, 608.0], [30.2, 609.0], [30.3, 615.0], [30.4, 617.0], [30.5, 619.0], [30.6, 622.0], [30.7, 622.0], [30.8, 624.0], [30.9, 625.0], [31.0, 625.0], [31.1, 626.0], [31.2, 628.0], [31.3, 630.0], [31.4, 630.0], [31.5, 631.0], [31.6, 633.0], [31.7, 633.0], [31.8, 634.0], [31.9, 635.0], [32.0, 635.0], [32.1, 637.0], [32.2, 638.0], [32.3, 639.0], [32.4, 640.0], [32.5, 641.0], [32.6, 642.0], [32.7, 644.0], [32.8, 644.0], [32.9, 645.0], [33.0, 645.0], [33.1, 646.0], [33.2, 646.0], [33.3, 647.0], [33.4, 647.0], [33.5, 648.0], [33.6, 649.0], [33.7, 650.0], [33.8, 653.0], [33.9, 653.0], [34.0, 654.0], [34.1, 655.0], [34.2, 655.0], [34.3, 655.0], [34.4, 655.0], [34.5, 655.0], [34.6, 657.0], [34.7, 658.0], [34.8, 658.0], [34.9, 659.0], [35.0, 659.0], [35.1, 660.0], [35.2, 660.0], [35.3, 660.0], [35.4, 662.0], [35.5, 662.0], [35.6, 664.0], [35.7, 665.0], [35.8, 668.0], [35.9, 668.0], [36.0, 669.0], [36.1, 672.0], [36.2, 672.0], [36.3, 673.0], [36.4, 674.0], [36.5, 675.0], [36.6, 676.0], [36.7, 677.0], [36.8, 678.0], [36.9, 678.0], [37.0, 679.0], [37.1, 681.0], [37.2, 681.0], [37.3, 682.0], [37.4, 682.0], [37.5, 684.0], [37.6, 684.0], [37.7, 685.0], [37.8, 685.0], [37.9, 686.0], [38.0, 687.0], [38.1, 688.0], [38.2, 688.0], [38.3, 689.0], [38.4, 689.0], [38.5, 692.0], [38.6, 693.0], [38.7, 693.0], [38.8, 694.0], [38.9, 695.0], [39.0, 697.0], [39.1, 697.0], [39.2, 699.0], [39.3, 701.0], [39.4, 701.0], [39.5, 703.0], [39.6, 706.0], [39.7, 709.0], [39.8, 709.0], [39.9, 711.0], [40.0, 713.0], [40.1, 715.0], [40.2, 716.0], [40.3, 718.0], [40.4, 720.0], [40.5, 722.0], [40.6, 722.0], [40.7, 723.0], [40.8, 725.0], [40.9, 726.0], [41.0, 729.0], [41.1, 730.0], [41.2, 731.0], [41.3, 732.0], [41.4, 733.0], [41.5, 734.0], [41.6, 735.0], [41.7, 736.0], [41.8, 737.0], [41.9, 737.0], [42.0, 738.0], [42.1, 739.0], [42.2, 740.0], [42.3, 742.0], [42.4, 742.0], [42.5, 744.0], [42.6, 744.0], [42.7, 745.0], [42.8, 745.0], [42.9, 746.0], [43.0, 748.0], [43.1, 749.0], [43.2, 751.0], [43.3, 752.0], [43.4, 753.0], [43.5, 753.0], [43.6, 753.0], [43.7, 755.0], [43.8, 756.0], [43.9, 757.0], [44.0, 758.0], [44.1, 759.0], [44.2, 760.0], [44.3, 761.0], [44.4, 761.0], [44.5, 762.0], [44.6, 763.0], [44.7, 763.0], [44.8, 765.0], [44.9, 766.0], [45.0, 767.0], [45.1, 769.0], [45.2, 769.0], [45.3, 769.0], [45.4, 770.0], [45.5, 770.0], [45.6, 772.0], [45.7, 772.0], [45.8, 773.0], [45.9, 774.0], [46.0, 775.0], [46.1, 776.0], [46.2, 777.0], [46.3, 777.0], [46.4, 778.0], [46.5, 779.0], [46.6, 779.0], [46.7, 779.0], [46.8, 780.0], [46.9, 780.0], [47.0, 781.0], [47.1, 783.0], [47.2, 783.0], [47.3, 784.0], [47.4, 785.0], [47.5, 785.0], [47.6, 786.0], [47.7, 787.0], [47.8, 788.0], [47.9, 789.0], [48.0, 790.0], [48.1, 791.0], [48.2, 791.0], [48.3, 792.0], [48.4, 793.0], [48.5, 794.0], [48.6, 795.0], [48.7, 795.0], [48.8, 797.0], [48.9, 798.0], [49.0, 799.0], [49.1, 800.0], [49.2, 800.0], [49.3, 802.0], [49.4, 802.0], [49.5, 803.0], [49.6, 804.0], [49.7, 805.0], [49.8, 807.0], [49.9, 807.0], [50.0, 809.0], [50.1, 812.0], [50.2, 814.0], [50.3, 816.0], [50.4, 817.0], [50.5, 817.0], [50.6, 819.0], [50.7, 820.0], [50.8, 821.0], [50.9, 822.0], [51.0, 822.0], [51.1, 823.0], [51.2, 823.0], [51.3, 825.0], [51.4, 826.0], [51.5, 829.0], [51.6, 830.0], [51.7, 831.0], [51.8, 833.0], [51.9, 833.0], [52.0, 835.0], [52.1, 836.0], [52.2, 838.0], [52.3, 840.0], [52.4, 842.0], [52.5, 843.0], [52.6, 844.0], [52.7, 844.0], [52.8, 846.0], [52.9, 849.0], [53.0, 851.0], [53.1, 854.0], [53.2, 856.0], [53.3, 857.0], [53.4, 861.0], [53.5, 862.0], [53.6, 862.0], [53.7, 863.0], [53.8, 864.0], [53.9, 867.0], [54.0, 867.0], [54.1, 870.0], [54.2, 871.0], [54.3, 871.0], [54.4, 872.0], [54.5, 874.0], [54.6, 874.0], [54.7, 876.0], [54.8, 880.0], [54.9, 880.0], [55.0, 881.0], [55.1, 883.0], [55.2, 885.0], [55.3, 885.0], [55.4, 886.0], [55.5, 888.0], [55.6, 890.0], [55.7, 891.0], [55.8, 892.0], [55.9, 893.0], [56.0, 894.0], [56.1, 895.0], [56.2, 895.0], [56.3, 896.0], [56.4, 896.0], [56.5, 897.0], [56.6, 898.0], [56.7, 898.0], [56.8, 900.0], [56.9, 902.0], [57.0, 902.0], [57.1, 903.0], [57.2, 905.0], [57.3, 906.0], [57.4, 907.0], [57.5, 909.0], [57.6, 910.0], [57.7, 911.0], [57.8, 912.0], [57.9, 913.0], [58.0, 915.0], [58.1, 916.0], [58.2, 918.0], [58.3, 920.0], [58.4, 921.0], [58.5, 924.0], [58.6, 925.0], [58.7, 925.0], [58.8, 927.0], [58.9, 929.0], [59.0, 930.0], [59.1, 931.0], [59.2, 931.0], [59.3, 933.0], [59.4, 934.0], [59.5, 935.0], [59.6, 936.0], [59.7, 938.0], [59.8, 939.0], [59.9, 940.0], [60.0, 940.0], [60.1, 941.0], [60.2, 941.0], [60.3, 942.0], [60.4, 943.0], [60.5, 944.0], [60.6, 945.0], [60.7, 945.0], [60.8, 946.0], [60.9, 947.0], [61.0, 947.0], [61.1, 948.0], [61.2, 948.0], [61.3, 949.0], [61.4, 950.0], [61.5, 951.0], [61.6, 952.0], [61.7, 952.0], [61.8, 952.0], [61.9, 953.0], [62.0, 954.0], [62.1, 955.0], [62.2, 955.0], [62.3, 956.0], [62.4, 956.0], [62.5, 957.0], [62.6, 957.0], [62.7, 958.0], [62.8, 958.0], [62.9, 959.0], [63.0, 960.0], [63.1, 961.0], [63.2, 961.0], [63.3, 961.0], [63.4, 962.0], [63.5, 962.0], [63.6, 962.0], [63.7, 964.0], [63.8, 964.0], [63.9, 964.0], [64.0, 965.0], [64.1, 966.0], [64.2, 967.0], [64.3, 968.0], [64.4, 968.0], [64.5, 969.0], [64.6, 969.0], [64.7, 969.0], [64.8, 970.0], [64.9, 970.0], [65.0, 970.0], [65.1, 971.0], [65.2, 972.0], [65.3, 974.0], [65.4, 976.0], [65.5, 977.0], [65.6, 978.0], [65.7, 978.0], [65.8, 980.0], [65.9, 981.0], [66.0, 984.0], [66.1, 984.0], [66.2, 986.0], [66.3, 986.0], [66.4, 987.0], [66.5, 989.0], [66.6, 990.0], [66.7, 993.0], [66.8, 995.0], [66.9, 995.0], [67.0, 998.0], [67.1, 998.0], [67.2, 1000.0], [67.3, 1002.0], [67.4, 1003.0], [67.5, 1005.0], [67.6, 1005.0], [67.7, 1006.0], [67.8, 1006.0], [67.9, 1007.0], [68.0, 1009.0], [68.1, 1009.0], [68.2, 1011.0], [68.3, 1013.0], [68.4, 1013.0], [68.5, 1016.0], [68.6, 1017.0], [68.7, 1018.0], [68.8, 1021.0], [68.9, 1022.0], [69.0, 1023.0], [69.1, 1023.0], [69.2, 1024.0], [69.3, 1025.0], [69.4, 1027.0], [69.5, 1030.0], [69.6, 1030.0], [69.7, 1033.0], [69.8, 1034.0], [69.9, 1038.0], [70.0, 1039.0], [70.1, 1041.0], [70.2, 1044.0], [70.3, 1046.0], [70.4, 1047.0], [70.5, 1047.0], [70.6, 1048.0], [70.7, 1049.0], [70.8, 1050.0], [70.9, 1052.0], [71.0, 1054.0], [71.1, 1054.0], [71.2, 1054.0], [71.3, 1056.0], [71.4, 1057.0], [71.5, 1061.0], [71.6, 1062.0], [71.7, 1062.0], [71.8, 1064.0], [71.9, 1066.0], [72.0, 1070.0], [72.1, 1070.0], [72.2, 1071.0], [72.3, 1072.0], [72.4, 1072.0], [72.5, 1073.0], [72.6, 1074.0], [72.7, 1074.0], [72.8, 1077.0], [72.9, 1078.0], [73.0, 1080.0], [73.1, 1081.0], [73.2, 1082.0], [73.3, 1084.0], [73.4, 1085.0], [73.5, 1087.0], [73.6, 1088.0], [73.7, 1089.0], [73.8, 1089.0], [73.9, 1089.0], [74.0, 1091.0], [74.1, 1092.0], [74.2, 1093.0], [74.3, 1095.0], [74.4, 1096.0], [74.5, 1096.0], [74.6, 1097.0], [74.7, 1098.0], [74.8, 1099.0], [74.9, 1099.0], [75.0, 1101.0], [75.1, 1102.0], [75.2, 1102.0], [75.3, 1103.0], [75.4, 1103.0], [75.5, 1105.0], [75.6, 1105.0], [75.7, 1106.0], [75.8, 1106.0], [75.9, 1107.0], [76.0, 1108.0], [76.1, 1108.0], [76.2, 1108.0], [76.3, 1110.0], [76.4, 1110.0], [76.5, 1111.0], [76.6, 1111.0], [76.7, 1112.0], [76.8, 1112.0], [76.9, 1113.0], [77.0, 1114.0], [77.1, 1114.0], [77.2, 1114.0], [77.3, 1115.0], [77.4, 1115.0], [77.5, 1116.0], [77.6, 1117.0], [77.7, 1118.0], [77.8, 1120.0], [77.9, 1121.0], [78.0, 1122.0], [78.1, 1123.0], [78.2, 1124.0], [78.3, 1125.0], [78.4, 1126.0], [78.5, 1127.0], [78.6, 1129.0], [78.7, 1131.0], [78.8, 1132.0], [78.9, 1132.0], [79.0, 1134.0], [79.1, 1135.0], [79.2, 1137.0], [79.3, 1137.0], [79.4, 1138.0], [79.5, 1139.0], [79.6, 1140.0], [79.7, 1142.0], [79.8, 1143.0], [79.9, 1145.0], [80.0, 1148.0], [80.1, 1149.0], [80.2, 1149.0], [80.3, 1149.0], [80.4, 1149.0], [80.5, 1152.0], [80.6, 1152.0], [80.7, 1153.0], [80.8, 1154.0], [80.9, 1154.0], [81.0, 1155.0], [81.1, 1155.0], [81.2, 1155.0], [81.3, 1157.0], [81.4, 1157.0], [81.5, 1159.0], [81.6, 1160.0], [81.7, 1160.0], [81.8, 1161.0], [81.9, 1162.0], [82.0, 1163.0], [82.1, 1165.0], [82.2, 1165.0], [82.3, 1167.0], [82.4, 1167.0], [82.5, 1168.0], [82.6, 1168.0], [82.7, 1169.0], [82.8, 1170.0], [82.9, 1171.0], [83.0, 1171.0], [83.1, 1173.0], [83.2, 1173.0], [83.3, 1174.0], [83.4, 1174.0], [83.5, 1175.0], [83.6, 1175.0], [83.7, 1176.0], [83.8, 1177.0], [83.9, 1178.0], [84.0, 1179.0], [84.1, 1180.0], [84.2, 1180.0], [84.3, 1181.0], [84.4, 1182.0], [84.5, 1184.0], [84.6, 1184.0], [84.7, 1186.0], [84.8, 1188.0], [84.9, 1189.0], [85.0, 1191.0], [85.1, 1192.0], [85.2, 1193.0], [85.3, 1195.0], [85.4, 1196.0], [85.5, 1196.0], [85.6, 1198.0], [85.7, 1199.0], [85.8, 1199.0], [85.9, 1200.0], [86.0, 1200.0], [86.1, 1202.0], [86.2, 1203.0], [86.3, 1205.0], [86.4, 1205.0], [86.5, 1206.0], [86.6, 1207.0], [86.7, 1209.0], [86.8, 1211.0], [86.9, 1213.0], [87.0, 1213.0], [87.1, 1214.0], [87.2, 1215.0], [87.3, 1216.0], [87.4, 1217.0], [87.5, 1218.0], [87.6, 1219.0], [87.7, 1221.0], [87.8, 1221.0], [87.9, 1224.0], [88.0, 1226.0], [88.1, 1226.0], [88.2, 1228.0], [88.3, 1229.0], [88.4, 1230.0], [88.5, 1231.0], [88.6, 1233.0], [88.7, 1233.0], [88.8, 1234.0], [88.9, 1235.0], [89.0, 1236.0], [89.1, 1237.0], [89.2, 1237.0], [89.3, 1238.0], [89.4, 1238.0], [89.5, 1239.0], [89.6, 1240.0], [89.7, 1240.0], [89.8, 1243.0], [89.9, 1243.0], [90.0, 1244.0], [90.1, 1246.0], [90.2, 1247.0], [90.3, 1248.0], [90.4, 1249.0], [90.5, 1250.0], [90.6, 1251.0], [90.7, 1253.0], [90.8, 1255.0], [90.9, 1256.0], [91.0, 1259.0], [91.1, 1259.0], [91.2, 1261.0], [91.3, 1262.0], [91.4, 1263.0], [91.5, 1264.0], [91.6, 1267.0], [91.7, 1268.0], [91.8, 1269.0], [91.9, 1270.0], [92.0, 1272.0], [92.1, 1273.0], [92.2, 1273.0], [92.3, 1275.0], [92.4, 1276.0], [92.5, 1277.0], [92.6, 1278.0], [92.7, 1279.0], [92.8, 1279.0], [92.9, 1280.0], [93.0, 1281.0], [93.1, 1282.0], [93.2, 1282.0], [93.3, 1283.0], [93.4, 1284.0], [93.5, 1286.0], [93.6, 1288.0], [93.7, 1289.0], [93.8, 1289.0], [93.9, 1291.0], [94.0, 1292.0], [94.1, 1293.0], [94.2, 1293.0], [94.3, 1295.0], [94.4, 1296.0], [94.5, 1298.0], [94.6, 1299.0], [94.7, 1299.0], [94.8, 1300.0], [94.9, 1302.0], [95.0, 1305.0], [95.1, 1307.0], [95.2, 1308.0], [95.3, 1310.0], [95.4, 1311.0], [95.5, 1311.0], [95.6, 1316.0], [95.7, 1319.0], [95.8, 1321.0], [95.9, 1321.0], [96.0, 1327.0], [96.1, 1334.0], [96.2, 1339.0], [96.3, 1368.0], [96.4, 1377.0], [96.5, 1382.0], [96.6, 1384.0], [96.7, 1390.0], [96.8, 1406.0], [96.9, 1434.0], [97.0, 1445.0], [97.1, 1470.0], [97.2, 1483.0], [97.3, 1533.0], [97.4, 1536.0], [97.5, 1551.0], [97.6, 1554.0], [97.7, 1566.0], [97.8, 1577.0], [97.9, 1578.0], [98.0, 1582.0], [98.1, 1592.0], [98.2, 1601.0], [98.3, 1603.0], [98.4, 1605.0], [98.5, 1609.0], [98.6, 1622.0], [98.7, 1625.0], [98.8, 1629.0], [98.9, 1631.0], [99.0, 1633.0], [99.1, 1643.0], [99.2, 1654.0], [99.3, 1663.0], [99.4, 1693.0], [99.5, 1694.0], [99.6, 1709.0], [99.7, 1710.0], [99.8, 1748.0], [99.9, 1974.0], [100.0, 2364.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 263.0, "series": [{"data": [[0.0, 15.0], [2300.0, 1.0], [600.0, 230.0], [700.0, 237.0], [200.0, 72.0], [800.0, 185.0], [900.0, 249.0], [1000.0, 186.0], [1100.0, 263.0], [300.0, 199.0], [1200.0, 212.0], [1300.0, 50.0], [1400.0, 10.0], [1500.0, 23.0], [400.0, 227.0], [100.0, 17.0], [1600.0, 32.0], [1700.0, 8.0], [1800.0, 1.0], [1900.0, 1.0], [500.0, 181.0], [2000.0, 1.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 67.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1801.0, "series": [{"data": [[0.0, 532.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1801.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 67.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 67.51063829787233, "minX": 1.731722927E12, "maxY": 274.01809954751144, "series": [{"data": [[1.731722932E12, 180.79452054794524], [1.731722931E12, 159.42129629629642], [1.731722933E12, 203.12380952380946], [1.731722929E12, 111.87155963302749], [1.73172293E12, 137.1179245283018], [1.731722937E12, 228.17674418604648], [1.731722928E12, 88.17061611374403], [1.731722927E12, 67.51063829787233], [1.731722938E12, 96.57142857142853], [1.731722934E12, 229.9814814814814], [1.731722936E12, 274.01809954751144], [1.731722935E12, 251.33490566037736]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722938E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 261.0, "minX": 1.0, "maxY": 1623.0, "series": [{"data": [[2.0, 489.0], [3.0, 682.0], [4.0, 408.0], [5.0, 1552.0], [6.0, 540.0], [7.0, 665.0], [8.0, 678.0], [9.0, 688.0], [10.0, 713.0], [11.0, 734.0], [12.0, 726.0], [13.0, 726.0], [14.0, 677.0], [15.0, 690.0], [16.0, 774.0], [17.0, 736.0], [18.0, 723.0], [19.0, 763.0], [20.0, 743.0], [21.0, 739.0], [22.0, 785.0], [24.0, 796.5], [25.0, 1623.0], [26.0, 835.0], [27.0, 787.0], [28.0, 1609.0], [29.0, 814.0], [30.0, 823.0], [31.0, 819.0], [33.0, 846.0], [32.0, 855.0], [35.0, 839.0], [34.0, 867.0], [37.0, 862.0], [36.0, 844.0], [39.0, 846.0], [38.0, 854.0], [41.0, 874.0], [40.0, 873.0], [43.0, 890.0], [42.0, 910.0], [45.0, 902.0], [44.0, 879.0], [47.0, 861.0], [46.0, 905.0], [49.0, 933.0], [48.0, 916.0], [51.0, 912.0], [50.0, 924.0], [53.0, 615.0], [52.0, 957.0], [55.0, 600.0], [54.0, 261.0], [57.0, 965.0], [56.0, 965.0], [59.0, 970.0], [58.0, 949.0], [61.0, 308.3333333333333], [60.0, 636.5], [62.0, 730.3333333333334], [63.0, 489.0], [64.0, 743.0], [66.0, 351.0], [67.0, 768.0], [65.0, 1009.0], [68.0, 419.16666666666663], [69.0, 561.6666666666666], [70.0, 391.0], [71.0, 1397.0], [72.0, 313.0], [73.0, 663.0], [74.0, 495.0], [75.0, 1041.0], [76.0, 480.75], [77.0, 699.5], [78.0, 551.0], [79.0, 506.25], [80.0, 438.5], [81.0, 418.58333333333337], [82.0, 363.2631578947369], [83.0, 404.65000000000003], [84.0, 356.75], [85.0, 350.1666666666667], [86.0, 338.7333333333333], [87.0, 379.7272727272727], [89.0, 484.375], [88.0, 400.75], [90.0, 482.375], [91.0, 860.8], [92.0, 506.5], [93.0, 495.5], [94.0, 569.5], [95.0, 528.8], [96.0, 628.3333333333334], [97.0, 561.3333333333333], [98.0, 451.0], [99.0, 445.33333333333337], [100.0, 376.57142857142856], [101.0, 597.25], [102.0, 418.2], [103.0, 465.962962962963], [104.0, 435.8125], [105.0, 437.7368421052631], [106.0, 581.8571428571429], [107.0, 578.8571428571429], [108.0, 860.1428571428572], [109.0, 717.6666666666666], [110.0, 624.1], [111.0, 471.50000000000006], [112.0, 555.25], [113.0, 702.6], [114.0, 463.12500000000006], [115.0, 843.5], [116.0, 619.0], [117.0, 562.2857142857142], [118.0, 631.6], [119.0, 721.0], [120.0, 707.5714285714286], [121.0, 559.6875], [122.0, 491.4375], [123.0, 637.0], [124.0, 536.7272727272727], [125.0, 631.1666666666667], [126.0, 482.6923076923077], [127.0, 518.7142857142857], [128.0, 444.1], [129.0, 709.25], [131.0, 695.1111111111111], [130.0, 658.3333333333333], [132.0, 682.2], [134.0, 613.2727272727273], [133.0, 677.6], [135.0, 610.5], [136.0, 676.0999999999999], [138.0, 607.2857142857146], [137.0, 661.0], [139.0, 676.4090909090909], [140.0, 629.3571428571428], [142.0, 660.9090909090908], [141.0, 669.3684210526317], [143.0, 706.625], [144.0, 680.0], [145.0, 1025.2222222222222], [146.0, 656.9523809523808], [147.0, 687.4615384615383], [148.0, 761.0666666666666], [149.0, 833.0], [150.0, 631.5], [151.0, 756.7777777777778], [152.0, 725.4375], [153.0, 583.125], [154.0, 923.5714285714286], [155.0, 868.5], [156.0, 915.25], [157.0, 622.0], [158.0, 812.75], [159.0, 712.5833333333334], [160.0, 897.2], [161.0, 819.5], [163.0, 778.625], [162.0, 697.5], [164.0, 738.1428571428571], [165.0, 808.1818181818181], [166.0, 822.0], [167.0, 825.5714285714284], [168.0, 668.5555555555555], [169.0, 749.0], [170.0, 824.5], [171.0, 907.5625], [173.0, 712.8709677419356], [174.0, 713.9333333333333], [172.0, 785.8461538461538], [175.0, 761.0], [176.0, 1180.2], [177.0, 1012.75], [178.0, 789.1538461538461], [179.0, 700.9166666666667], [180.0, 813.2857142857143], [181.0, 918.6666666666666], [182.0, 817.3636363636364], [183.0, 1040.625], [184.0, 1007.9166666666666], [185.0, 958.4], [187.0, 807.2], [189.0, 828.2], [188.0, 902.2380952380953], [186.0, 885.8461538461539], [190.0, 805.1111111111111], [191.0, 886.8], [192.0, 860.3636363636364], [193.0, 845.1538461538462], [194.0, 823.1428571428571], [195.0, 764.5714285714286], [197.0, 837.5], [196.0, 1097.0], [198.0, 859.3571428571429], [199.0, 880.9166666666667], [200.0, 850.5454545454545], [201.0, 957.8571428571429], [202.0, 862.25], [203.0, 929.7272727272727], [204.0, 926.0], [205.0, 943.3636363636363], [206.0, 984.8421052631579], [207.0, 1187.818181818182], [208.0, 838.7777777777778], [209.0, 971.1999999999999], [210.0, 893.9999999999999], [211.0, 966.1764705882352], [212.0, 788.5384615384615], [213.0, 1108.0], [214.0, 1219.5714285714287], [215.0, 1042.7777777777778], [216.0, 1180.375], [217.0, 999.4444444444443], [218.0, 1070.142857142857], [219.0, 1116.25], [220.0, 1084.642857142857], [221.0, 1030.5], [222.0, 970.3636363636363], [223.0, 1119.5], [224.0, 1051.0], [225.0, 1095.5], [226.0, 1173.375], [227.0, 1045.3636363636363], [228.0, 1033.5], [229.0, 1033.142857142857], [230.0, 994.3846153846154], [231.0, 874.2857142857143], [232.0, 1027.111111111111], [233.0, 1008.0], [234.0, 1052.75], [235.0, 1000.8181818181818], [236.0, 977.1111111111111], [237.0, 1128.8], [238.0, 1002.4761904761904], [239.0, 973.8620689655172], [240.0, 1023.1071428571429], [241.0, 1097.625], [242.0, 1097.8], [243.0, 1093.0000000000002], [244.0, 1004.4000000000001], [245.0, 898.3333333333334], [246.0, 1065.5], [247.0, 1085.7777777777776], [248.0, 1093.2], [249.0, 1028.7142857142858], [250.0, 997.9230769230769], [251.0, 1043.5294117647059], [252.0, 1163.2631578947367], [253.0, 1080.5454545454545], [254.0, 1064.5454545454545], [255.0, 1119.0833333333333], [257.0, 1132.5625], [256.0, 1148.1333333333334], [258.0, 1080.3333333333333], [259.0, 1153.8], [260.0, 1124.4615384615386], [261.0, 1099.5333333333333], [262.0, 1118.2], [263.0, 1090.9166666666665], [264.0, 1203.8333333333333], [270.0, 1229.6428571428573], [271.0, 1103.0], [268.0, 1200.0], [269.0, 1167.8571428571431], [265.0, 1064.875], [266.0, 1101.75], [267.0, 1260.272727272727], [273.0, 1090.8], [272.0, 1051.6499999999999], [274.0, 1165.8], [275.0, 1065.75], [276.0, 1098.0000000000002], [277.0, 1156.875], [278.0, 1079.1538461538462], [279.0, 1143.6000000000001], [280.0, 1368.0], [284.0, 1242.0], [282.0, 1223.9444444444443], [283.0, 1152.857142857143], [281.0, 1216.2222222222222], [1.0, 288.0]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[176.7074999999999, 823.3262499999993]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 284.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11566.0, "minX": 1.731722927E12, "maxY": 421438.0, "series": [{"data": [[1.731722932E12, 421438.0], [1.731722931E12, 410542.0], [1.731722933E12, 385156.0], [1.731722929E12, 404424.0], [1.73172293E12, 414527.0], [1.731722937E12, 419625.0], [1.731722928E12, 406615.0], [1.731722927E12, 82848.0], [1.731722938E12, 384630.0], [1.731722934E12, 408853.0], [1.731722936E12, 413694.0], [1.731722935E12, 412262.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.731722932E12, 54167.0], [1.731722931E12, 53266.0], [1.731722933E12, 51554.0], [1.731722929E12, 53675.0], [1.73172293E12, 52189.0], [1.731722937E12, 52963.0], [1.731722928E12, 51903.0], [1.731722927E12, 11566.0], [1.731722938E12, 50002.0], [1.731722934E12, 53342.0], [1.731722936E12, 54474.0], [1.731722935E12, 52065.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722938E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 306.7872340425531, "minX": 1.731722927E12, "maxY": 1244.5209302325584, "series": [{"data": [[1.731722932E12, 760.8904109589048], [1.731722931E12, 668.3333333333333], [1.731722933E12, 839.5142857142857], [1.731722929E12, 463.9082568807342], [1.73172293E12, 569.9056603773581], [1.731722937E12, 1244.5209302325584], [1.731722928E12, 355.8530805687205], [1.731722927E12, 306.7872340425531], [1.731722938E12, 1102.8226600985226], [1.731722934E12, 970.7916666666666], [1.731722936E12, 1136.1040723981898], [1.731722935E12, 1061.4103773584905]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731722938E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 306.7872340425531, "minX": 1.731722927E12, "maxY": 1244.5162790697684, "series": [{"data": [[1.731722932E12, 760.8036529680368], [1.731722931E12, 668.3101851851851], [1.731722933E12, 839.504761904762], [1.731722929E12, 463.8807339449542], [1.73172293E12, 569.8962264150941], [1.731722937E12, 1244.5162790697684], [1.731722928E12, 355.8293838862558], [1.731722927E12, 306.7872340425531], [1.731722938E12, 1102.8128078817722], [1.731722934E12, 970.7777777777777], [1.731722936E12, 1136.0950226244333], [1.731722935E12, 1061.4056603773583]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731722938E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0738916256157636, "minX": 1.731722927E12, "maxY": 21.255319148936167, "series": [{"data": [[1.731722932E12, 0.32420091324200884], [1.731722931E12, 0.2962962962962965], [1.731722933E12, 0.3666666666666666], [1.731722929E12, 0.35321100917431203], [1.73172293E12, 0.34905660377358494], [1.731722937E12, 0.2930232558139533], [1.731722928E12, 0.8530805687203794], [1.731722927E12, 21.255319148936167], [1.731722938E12, 0.0738916256157636], [1.731722934E12, 0.33333333333333337], [1.731722936E12, 0.24886877828054293], [1.731722935E12, 0.3443396226415096]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731722938E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.731722927E12, "maxY": 2364.0, "series": [{"data": [[1.731722932E12, 1554.0], [1.731722931E12, 1102.0], [1.731722933E12, 1654.0], [1.731722929E12, 909.0], [1.73172293E12, 1000.0], [1.731722937E12, 1974.0], [1.731722928E12, 759.0], [1.731722927E12, 411.0], [1.731722938E12, 2052.0], [1.731722934E12, 1741.0], [1.731722936E12, 2364.0], [1.731722935E12, 1839.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.731722932E12, 807.0], [1.731722931E12, 716.6], [1.731722933E12, 1198.9], [1.731722929E12, 505.2], [1.73172293E12, 646.0], [1.731722937E12, 1603.4], [1.731722928E12, 405.6], [1.731722927E12, 365.4], [1.731722938E12, 1311.0], [1.731722934E12, 1311.0], [1.731722936E12, 1188.8], [1.731722935E12, 1114.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.731722932E12, 1200.0], [1.731722931E12, 1099.32], [1.731722933E12, 1324.9099999999999], [1.731722929E12, 903.62], [1.73172293E12, 978.7], [1.731722937E12, 1668.4], [1.731722928E12, 747.9599999999998], [1.731722927E12, 411.0], [1.731722938E12, 1747.0800000000002], [1.731722934E12, 1388.98], [1.731722936E12, 1590.02], [1.731722935E12, 1477.83]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.731722932E12, 1159.0], [1.731722931E12, 1070.0], [1.731722933E12, 1276.25], [1.731722929E12, 542.7499999999947], [1.73172293E12, 945.0], [1.731722937E12, 1630.2], [1.731722928E12, 416.79999999999995], [1.731722927E12, 382.9999999999999], [1.731722938E12, 1693.0], [1.731722934E12, 1334.6], [1.731722936E12, 1546.7999999999997], [1.731722935E12, 1399.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.731722932E12, 333.0], [1.731722931E12, 229.0], [1.731722933E12, 423.0], [1.731722929E12, 39.0], [1.73172293E12, 138.0], [1.731722937E12, 812.0], [1.731722928E12, 38.0], [1.731722927E12, 59.0], [1.731722938E12, 254.0], [1.731722934E12, 537.0], [1.731722936E12, 722.0], [1.731722935E12, 621.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.731722932E12, 761.0], [1.731722931E12, 662.0], [1.731722933E12, 859.0], [1.731722929E12, 478.0], [1.73172293E12, 570.5], [1.731722937E12, 1240.0], [1.731722928E12, 378.0], [1.731722927E12, 311.0], [1.731722938E12, 1138.0], [1.731722934E12, 957.5], [1.731722936E12, 1150.0], [1.731722935E12, 1059.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722938E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 311.0, "minX": 47.0, "maxY": 1240.0, "series": [{"data": [[47.0, 311.0], [203.0, 1138.0], [211.0, 378.0], [212.0, 916.0], [210.0, 859.0], [215.0, 1240.0], [218.0, 478.0], [216.0, 914.5], [219.0, 761.0], [221.0, 1150.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 221.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 311.0, "minX": 47.0, "maxY": 1240.0, "series": [{"data": [[47.0, 311.0], [203.0, 1138.0], [211.0, 378.0], [212.0, 916.0], [210.0, 859.0], [215.0, 1240.0], [218.0, 478.0], [216.0, 914.5], [219.0, 761.0], [221.0, 1150.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 221.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.731722927E12, "maxY": 244.0, "series": [{"data": [[1.731722932E12, 239.0], [1.731722931E12, 241.0], [1.731722933E12, 232.0], [1.731722929E12, 239.0], [1.73172293E12, 235.0], [1.731722937E12, 115.0], [1.731722928E12, 233.0], [1.731722927E12, 127.0], [1.731722938E12, 27.0], [1.731722934E12, 244.0], [1.731722936E12, 235.0], [1.731722935E12, 233.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.731722927E12, "maxY": 221.0, "series": [{"data": [[1.731722932E12, 219.0], [1.731722931E12, 216.0], [1.731722933E12, 210.0], [1.731722929E12, 218.0], [1.73172293E12, 212.0], [1.731722937E12, 215.0], [1.731722928E12, 211.0], [1.731722927E12, 47.0], [1.731722938E12, 203.0], [1.731722934E12, 216.0], [1.731722936E12, 221.0], [1.731722935E12, 212.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731722938E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.731722927E12, "maxY": 221.0, "series": [{"data": [[1.731722932E12, 219.0], [1.731722931E12, 216.0], [1.731722933E12, 210.0], [1.731722929E12, 218.0], [1.73172293E12, 212.0], [1.731722937E12, 215.0], [1.731722928E12, 211.0], [1.731722927E12, 47.0], [1.731722938E12, 203.0], [1.731722934E12, 216.0], [1.731722936E12, 221.0], [1.731722935E12, 212.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731722938E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.731722927E12, "maxY": 221.0, "series": [{"data": [[1.731722932E12, 219.0], [1.731722931E12, 216.0], [1.731722933E12, 210.0], [1.731722929E12, 218.0], [1.73172293E12, 212.0], [1.731722937E12, 215.0], [1.731722928E12, 211.0], [1.731722927E12, 47.0], [1.731722938E12, 203.0], [1.731722934E12, 216.0], [1.731722936E12, 221.0], [1.731722935E12, 212.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731722938E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

