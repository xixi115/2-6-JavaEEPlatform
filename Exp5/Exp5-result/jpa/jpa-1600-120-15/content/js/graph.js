/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 189.0, "series": [{"data": [[0.0, 4.0], [0.1, 4.0], [0.2, 9.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 9.0], [4.9, 9.0], [5.0, 9.0], [5.1, 9.0], [5.2, 9.0], [5.3, 9.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 9.0], [5.8, 9.0], [5.9, 9.0], [6.0, 9.0], [6.1, 9.0], [6.2, 9.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 9.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 10.0], [10.1, 10.0], [10.2, 10.0], [10.3, 10.0], [10.4, 10.0], [10.5, 10.0], [10.6, 10.0], [10.7, 10.0], [10.8, 10.0], [10.9, 10.0], [11.0, 10.0], [11.1, 10.0], [11.2, 10.0], [11.3, 10.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 10.0], [12.9, 10.0], [13.0, 10.0], [13.1, 10.0], [13.2, 10.0], [13.3, 10.0], [13.4, 10.0], [13.5, 10.0], [13.6, 10.0], [13.7, 10.0], [13.8, 10.0], [13.9, 10.0], [14.0, 10.0], [14.1, 10.0], [14.2, 10.0], [14.3, 10.0], [14.4, 10.0], [14.5, 10.0], [14.6, 10.0], [14.7, 10.0], [14.8, 10.0], [14.9, 10.0], [15.0, 10.0], [15.1, 10.0], [15.2, 10.0], [15.3, 10.0], [15.4, 10.0], [15.5, 10.0], [15.6, 10.0], [15.7, 10.0], [15.8, 10.0], [15.9, 10.0], [16.0, 10.0], [16.1, 10.0], [16.2, 10.0], [16.3, 10.0], [16.4, 10.0], [16.5, 10.0], [16.6, 10.0], [16.7, 10.0], [16.8, 10.0], [16.9, 10.0], [17.0, 10.0], [17.1, 10.0], [17.2, 10.0], [17.3, 10.0], [17.4, 10.0], [17.5, 10.0], [17.6, 10.0], [17.7, 10.0], [17.8, 10.0], [17.9, 10.0], [18.0, 10.0], [18.1, 10.0], [18.2, 10.0], [18.3, 10.0], [18.4, 10.0], [18.5, 10.0], [18.6, 10.0], [18.7, 10.0], [18.8, 10.0], [18.9, 10.0], [19.0, 10.0], [19.1, 10.0], [19.2, 10.0], [19.3, 10.0], [19.4, 10.0], [19.5, 10.0], [19.6, 10.0], [19.7, 10.0], [19.8, 10.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 10.0], [22.7, 10.0], [22.8, 10.0], [22.9, 10.0], [23.0, 10.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 10.0], [23.9, 10.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 10.0], [25.2, 10.0], [25.3, 10.0], [25.4, 10.0], [25.5, 10.0], [25.6, 10.0], [25.7, 10.0], [25.8, 10.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 10.0], [31.3, 10.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 10.0], [32.4, 10.0], [32.5, 10.0], [32.6, 10.0], [32.7, 10.0], [32.8, 10.0], [32.9, 10.0], [33.0, 10.0], [33.1, 10.0], [33.2, 10.0], [33.3, 10.0], [33.4, 10.0], [33.5, 10.0], [33.6, 10.0], [33.7, 10.0], [33.8, 10.0], [33.9, 10.0], [34.0, 10.0], [34.1, 10.0], [34.2, 10.0], [34.3, 10.0], [34.4, 10.0], [34.5, 10.0], [34.6, 10.0], [34.7, 10.0], [34.8, 10.0], [34.9, 10.0], [35.0, 10.0], [35.1, 10.0], [35.2, 10.0], [35.3, 10.0], [35.4, 10.0], [35.5, 10.0], [35.6, 10.0], [35.7, 10.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 10.0], [37.2, 10.0], [37.3, 10.0], [37.4, 10.0], [37.5, 10.0], [37.6, 10.0], [37.7, 10.0], [37.8, 10.0], [37.9, 10.0], [38.0, 10.0], [38.1, 10.0], [38.2, 10.0], [38.3, 10.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 10.0], [39.9, 10.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 10.0], [47.4, 10.0], [47.5, 10.0], [47.6, 10.0], [47.7, 10.0], [47.8, 10.0], [47.9, 10.0], [48.0, 10.0], [48.1, 10.0], [48.2, 10.0], [48.3, 10.0], [48.4, 10.0], [48.5, 10.0], [48.6, 10.0], [48.7, 10.0], [48.8, 10.0], [48.9, 10.0], [49.0, 10.0], [49.1, 10.0], [49.2, 10.0], [49.3, 10.0], [49.4, 10.0], [49.5, 10.0], [49.6, 10.0], [49.7, 10.0], [49.8, 10.0], [49.9, 10.0], [50.0, 10.0], [50.1, 10.0], [50.2, 10.0], [50.3, 10.0], [50.4, 10.0], [50.5, 10.0], [50.6, 10.0], [50.7, 10.0], [50.8, 10.0], [50.9, 10.0], [51.0, 10.0], [51.1, 10.0], [51.2, 10.0], [51.3, 10.0], [51.4, 10.0], [51.5, 10.0], [51.6, 10.0], [51.7, 10.0], [51.8, 10.0], [51.9, 10.0], [52.0, 10.0], [52.1, 10.0], [52.2, 10.0], [52.3, 10.0], [52.4, 10.0], [52.5, 10.0], [52.6, 10.0], [52.7, 10.0], [52.8, 10.0], [52.9, 10.0], [53.0, 10.0], [53.1, 10.0], [53.2, 10.0], [53.3, 10.0], [53.4, 10.0], [53.5, 10.0], [53.6, 10.0], [53.7, 10.0], [53.8, 10.0], [53.9, 10.0], [54.0, 10.0], [54.1, 10.0], [54.2, 10.0], [54.3, 10.0], [54.4, 10.0], [54.5, 10.0], [54.6, 10.0], [54.7, 10.0], [54.8, 10.0], [54.9, 10.0], [55.0, 10.0], [55.1, 10.0], [55.2, 10.0], [55.3, 10.0], [55.4, 10.0], [55.5, 10.0], [55.6, 10.0], [55.7, 10.0], [55.8, 10.0], [55.9, 10.0], [56.0, 10.0], [56.1, 10.0], [56.2, 10.0], [56.3, 10.0], [56.4, 10.0], [56.5, 10.0], [56.6, 10.0], [56.7, 10.0], [56.8, 10.0], [56.9, 10.0], [57.0, 10.0], [57.1, 10.0], [57.2, 10.0], [57.3, 10.0], [57.4, 10.0], [57.5, 10.0], [57.6, 10.0], [57.7, 10.0], [57.8, 10.0], [57.9, 10.0], [58.0, 10.0], [58.1, 10.0], [58.2, 10.0], [58.3, 10.0], [58.4, 10.0], [58.5, 10.0], [58.6, 10.0], [58.7, 10.0], [58.8, 10.0], [58.9, 10.0], [59.0, 10.0], [59.1, 10.0], [59.2, 10.0], [59.3, 10.0], [59.4, 10.0], [59.5, 10.0], [59.6, 10.0], [59.7, 10.0], [59.8, 10.0], [59.9, 10.0], [60.0, 10.0], [60.1, 10.0], [60.2, 10.0], [60.3, 10.0], [60.4, 10.0], [60.5, 10.0], [60.6, 10.0], [60.7, 10.0], [60.8, 10.0], [60.9, 10.0], [61.0, 10.0], [61.1, 10.0], [61.2, 10.0], [61.3, 10.0], [61.4, 10.0], [61.5, 10.0], [61.6, 10.0], [61.7, 10.0], [61.8, 10.0], [61.9, 10.0], [62.0, 10.0], [62.1, 10.0], [62.2, 10.0], [62.3, 10.0], [62.4, 10.0], [62.5, 10.0], [62.6, 10.0], [62.7, 10.0], [62.8, 10.0], [62.9, 10.0], [63.0, 10.0], [63.1, 10.0], [63.2, 10.0], [63.3, 10.0], [63.4, 10.0], [63.5, 10.0], [63.6, 10.0], [63.7, 11.0], [63.8, 11.0], [63.9, 11.0], [64.0, 11.0], [64.1, 11.0], [64.2, 11.0], [64.3, 11.0], [64.4, 11.0], [64.5, 11.0], [64.6, 11.0], [64.7, 11.0], [64.8, 11.0], [64.9, 11.0], [65.0, 11.0], [65.1, 11.0], [65.2, 11.0], [65.3, 11.0], [65.4, 11.0], [65.5, 11.0], [65.6, 11.0], [65.7, 11.0], [65.8, 11.0], [65.9, 11.0], [66.0, 11.0], [66.1, 11.0], [66.2, 11.0], [66.3, 11.0], [66.4, 11.0], [66.5, 11.0], [66.6, 11.0], [66.7, 11.0], [66.8, 11.0], [66.9, 11.0], [67.0, 11.0], [67.1, 11.0], [67.2, 11.0], [67.3, 11.0], [67.4, 11.0], [67.5, 11.0], [67.6, 11.0], [67.7, 11.0], [67.8, 11.0], [67.9, 11.0], [68.0, 11.0], [68.1, 11.0], [68.2, 11.0], [68.3, 11.0], [68.4, 11.0], [68.5, 11.0], [68.6, 11.0], [68.7, 11.0], [68.8, 11.0], [68.9, 11.0], [69.0, 11.0], [69.1, 11.0], [69.2, 11.0], [69.3, 11.0], [69.4, 11.0], [69.5, 11.0], [69.6, 11.0], [69.7, 11.0], [69.8, 11.0], [69.9, 11.0], [70.0, 11.0], [70.1, 11.0], [70.2, 11.0], [70.3, 11.0], [70.4, 11.0], [70.5, 11.0], [70.6, 11.0], [70.7, 11.0], [70.8, 11.0], [70.9, 11.0], [71.0, 11.0], [71.1, 11.0], [71.2, 11.0], [71.3, 11.0], [71.4, 11.0], [71.5, 11.0], [71.6, 11.0], [71.7, 11.0], [71.8, 11.0], [71.9, 11.0], [72.0, 11.0], [72.1, 11.0], [72.2, 11.0], [72.3, 11.0], [72.4, 11.0], [72.5, 11.0], [72.6, 11.0], [72.7, 11.0], [72.8, 11.0], [72.9, 11.0], [73.0, 11.0], [73.1, 11.0], [73.2, 11.0], [73.3, 11.0], [73.4, 11.0], [73.5, 11.0], [73.6, 11.0], [73.7, 11.0], [73.8, 11.0], [73.9, 11.0], [74.0, 11.0], [74.1, 11.0], [74.2, 11.0], [74.3, 11.0], [74.4, 11.0], [74.5, 11.0], [74.6, 11.0], [74.7, 11.0], [74.8, 11.0], [74.9, 11.0], [75.0, 11.0], [75.1, 11.0], [75.2, 11.0], [75.3, 11.0], [75.4, 11.0], [75.5, 11.0], [75.6, 11.0], [75.7, 11.0], [75.8, 11.0], [75.9, 11.0], [76.0, 11.0], [76.1, 11.0], [76.2, 11.0], [76.3, 11.0], [76.4, 11.0], [76.5, 11.0], [76.6, 11.0], [76.7, 11.0], [76.8, 11.0], [76.9, 11.0], [77.0, 11.0], [77.1, 11.0], [77.2, 11.0], [77.3, 11.0], [77.4, 11.0], [77.5, 11.0], [77.6, 11.0], [77.7, 11.0], [77.8, 11.0], [77.9, 12.0], [78.0, 12.0], [78.1, 12.0], [78.2, 12.0], [78.3, 12.0], [78.4, 12.0], [78.5, 12.0], [78.6, 12.0], [78.7, 12.0], [78.8, 12.0], [78.9, 12.0], [79.0, 12.0], [79.1, 12.0], [79.2, 12.0], [79.3, 12.0], [79.4, 12.0], [79.5, 12.0], [79.6, 12.0], [79.7, 12.0], [79.8, 12.0], [79.9, 12.0], [80.0, 12.0], [80.1, 12.0], [80.2, 12.0], [80.3, 12.0], [80.4, 12.0], [80.5, 12.0], [80.6, 12.0], [80.7, 12.0], [80.8, 12.0], [80.9, 12.0], [81.0, 12.0], [81.1, 12.0], [81.2, 12.0], [81.3, 12.0], [81.4, 13.0], [81.5, 13.0], [81.6, 13.0], [81.7, 13.0], [81.8, 13.0], [81.9, 13.0], [82.0, 13.0], [82.1, 13.0], [82.2, 13.0], [82.3, 13.0], [82.4, 13.0], [82.5, 13.0], [82.6, 13.0], [82.7, 13.0], [82.8, 13.0], [82.9, 13.0], [83.0, 13.0], [83.1, 13.0], [83.2, 13.0], [83.3, 13.0], [83.4, 13.0], [83.5, 13.0], [83.6, 13.0], [83.7, 13.0], [83.8, 13.0], [83.9, 13.0], [84.0, 14.0], [84.1, 14.0], [84.2, 14.0], [84.3, 14.0], [84.4, 14.0], [84.5, 14.0], [84.6, 14.0], [84.7, 14.0], [84.8, 14.0], [84.9, 14.0], [85.0, 14.0], [85.1, 14.0], [85.2, 14.0], [85.3, 14.0], [85.4, 14.0], [85.5, 14.0], [85.6, 14.0], [85.7, 14.0], [85.8, 14.0], [85.9, 14.0], [86.0, 14.0], [86.1, 14.0], [86.2, 14.0], [86.3, 14.0], [86.4, 14.0], [86.5, 15.0], [86.6, 15.0], [86.7, 15.0], [86.8, 15.0], [86.9, 15.0], [87.0, 15.0], [87.1, 15.0], [87.2, 15.0], [87.3, 15.0], [87.4, 15.0], [87.5, 15.0], [87.6, 15.0], [87.7, 15.0], [87.8, 15.0], [87.9, 15.0], [88.0, 15.0], [88.1, 15.0], [88.2, 15.0], [88.3, 15.0], [88.4, 15.0], [88.5, 15.0], [88.6, 16.0], [88.7, 16.0], [88.8, 16.0], [88.9, 16.0], [89.0, 16.0], [89.1, 16.0], [89.2, 16.0], [89.3, 16.0], [89.4, 16.0], [89.5, 16.0], [89.6, 16.0], [89.7, 16.0], [89.8, 16.0], [89.9, 16.0], [90.0, 16.0], [90.1, 16.0], [90.2, 16.0], [90.3, 16.0], [90.4, 16.0], [90.5, 17.0], [90.6, 17.0], [90.7, 17.0], [90.8, 17.0], [90.9, 17.0], [91.0, 17.0], [91.1, 17.0], [91.2, 17.0], [91.3, 17.0], [91.4, 17.0], [91.5, 17.0], [91.6, 17.0], [91.7, 17.0], [91.8, 17.0], [91.9, 17.0], [92.0, 17.0], [92.1, 17.0], [92.2, 17.0], [92.3, 17.0], [92.4, 18.0], [92.5, 18.0], [92.6, 18.0], [92.7, 18.0], [92.8, 18.0], [92.9, 18.0], [93.0, 18.0], [93.1, 18.0], [93.2, 18.0], [93.3, 18.0], [93.4, 18.0], [93.5, 18.0], [93.6, 18.0], [93.7, 18.0], [93.8, 18.0], [93.9, 19.0], [94.0, 19.0], [94.1, 19.0], [94.2, 19.0], [94.3, 19.0], [94.4, 19.0], [94.5, 19.0], [94.6, 19.0], [94.7, 19.0], [94.8, 19.0], [94.9, 19.0], [95.0, 20.0], [95.1, 20.0], [95.2, 20.0], [95.3, 20.0], [95.4, 20.0], [95.5, 20.0], [95.6, 20.0], [95.7, 21.0], [95.8, 21.0], [95.9, 21.0], [96.0, 21.0], [96.1, 21.0], [96.2, 21.0], [96.3, 22.0], [96.4, 22.0], [96.5, 22.0], [96.6, 22.0], [96.7, 23.0], [96.8, 23.0], [96.9, 23.0], [97.0, 23.0], [97.1, 24.0], [97.2, 24.0], [97.3, 24.0], [97.4, 25.0], [97.5, 25.0], [97.6, 25.0], [97.7, 26.0], [97.8, 26.0], [97.9, 27.0], [98.0, 27.0], [98.1, 28.0], [98.2, 29.0], [98.3, 30.0], [98.4, 30.0], [98.5, 31.0], [98.6, 32.0], [98.7, 33.0], [98.8, 34.0], [98.9, 35.0], [99.0, 36.0], [99.1, 37.0], [99.2, 38.0], [99.3, 40.0], [99.4, 41.0], [99.5, 43.0], [99.6, 44.0], [99.7, 46.0], [99.8, 50.0], [99.9, 56.0], [100.0, 189.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 23996.0, "series": [{"data": [[0.0, 23996.0], [100.0, 4.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24000.0, "series": [{"data": [[0.0, 24000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0150000000000015, "minX": 1.731745289E12, "maxY": 8.506849315068491, "series": [{"data": [[1.731745326E12, 2.084577114427863], [1.731745367E12, 2.2950000000000017], [1.731745375E12, 2.2227722772277243], [1.731745289E12, 6.093749999999999], [1.73174533E12, 2.1443298969072164], [1.731745371E12, 2.069999999999999], [1.731745338E12, 2.2727272727272734], [1.731745379E12, 2.282178217821782], [1.731745293E12, 3.297169811320755], [1.731745334E12, 2.084158415841584], [1.731745301E12, 2.9268292682926838], [1.731745342E12, 2.1442786069651727], [1.731745383E12, 2.4776119402985084], [1.731745297E12, 2.1116751269035556], [1.731745391E12, 2.1464646464646475], [1.731745305E12, 2.1909547738693456], [1.731745346E12, 2.100502512562815], [1.731745387E12, 2.9507389162561592], [1.731745354E12, 2.2929292929292937], [1.731745395E12, 2.099502487562188], [1.731745309E12, 2.8629441624365484], [1.73174535E12, 2.1442786069651736], [1.731745317E12, 2.2401960784313704], [1.731745358E12, 2.4079601990049753], [1.731745399E12, 2.0799999999999996], [1.731745313E12, 2.3550000000000013], [1.731745407E12, 2.1608040201005023], [1.731745321E12, 2.3184079601990053], [1.731745362E12, 2.133663366336633], [1.731745403E12, 2.1249999999999982], [1.731745327E12, 2.0710659898477153], [1.731745368E12, 2.190000000000001], [1.731745409E12, 2.2577319587628866], [1.731745323E12, 2.37], [1.731745376E12, 2.2424242424242427], [1.73174529E12, 8.506849315068491], [1.731745331E12, 2.4878048780487814], [1.731745372E12, 2.1878172588832476], [1.73174538E12, 2.2828282828282824], [1.731745294E12, 2.354679802955666], [1.731745335E12, 2.0452261306532677], [1.731745343E12, 2.195979899497487], [1.731745384E12, 2.502512562814071], [1.731745298E12, 2.3034825870646776], [1.731745339E12, 2.2500000000000004], [1.731745392E12, 2.17821782178218], [1.731745306E12, 2.315], [1.731745347E12, 2.049504950495051], [1.731745388E12, 2.4199999999999986], [1.731745302E12, 2.3631840796019885], [1.731745396E12, 2.05050505050505], [1.73174531E12, 2.7317073170731714], [1.731745351E12, 2.0150000000000015], [1.731745359E12, 2.1287128712871293], [1.7317454E12, 2.4797979797979792], [1.731745314E12, 2.383084577114429], [1.731745355E12, 2.5252525252525246], [1.731745408E12, 2.179104477611939], [1.731745322E12, 2.356783919597992], [1.731745363E12, 2.2959183673469385], [1.731745404E12, 2.0899999999999985], [1.731745318E12, 2.2160804020100495], [1.731745328E12, 2.4699999999999998], [1.731745369E12, 2.3383084577114435], [1.731745324E12, 2.3131313131313127], [1.731745332E12, 2.164179104477612], [1.731745373E12, 2.287128712871288], [1.731745381E12, 2.371859296482413], [1.731745295E12, 2.2955665024630547], [1.731745336E12, 2.0597014925373145], [1.731745377E12, 2.2900000000000023], [1.731745291E12, 7.213953488372093], [1.731745344E12, 2.1100000000000008], [1.731745385E12, 2.3869346733668344], [1.731745299E12, 2.3099999999999987], [1.73174534E12, 2.1576354679802963], [1.731745348E12, 2.045226130653266], [1.731745389E12, 2.5990099009900987], [1.731745303E12, 2.4299999999999993], [1.731745397E12, 2.03960396039604], [1.731745311E12, 2.3700000000000006], [1.731745352E12, 2.0904522613065337], [1.731745393E12, 2.045000000000001], [1.731745307E12, 2.290000000000002], [1.73174536E12, 2.8333333333333326], [1.731745401E12, 2.2636815920398012], [1.731745315E12, 2.4416243654822334], [1.731745356E12, 2.6749999999999994], [1.731745364E12, 2.2920792079207915], [1.731745405E12, 2.0749999999999997], [1.731745319E12, 2.261306532663315], [1.73174537E12, 2.069651741293533], [1.731745325E12, 2.289215686274511], [1.731745366E12, 2.442211055276381], [1.731745333E12, 2.134999999999999], [1.731745374E12, 2.266331658291457], [1.731745329E12, 2.577114427860698], [1.731745296E12, 2.1641791044776135], [1.731745337E12, 2.165829145728644], [1.731745378E12, 2.241206030150753], [1.731745292E12, 5.6164383561643865], [1.731745386E12, 2.670050761421322], [1.7317453E12, 3.0725388601036268], [1.731745341E12, 2.050251256281408], [1.731745382E12, 2.5499999999999994], [1.731745349E12, 2.1909547738693465], [1.73174539E12, 2.2019704433497527], [1.731745304E12, 2.3217821782178216], [1.731745345E12, 2.114427860696516], [1.731745312E12, 2.454999999999999], [1.731745353E12, 2.1300000000000003], [1.731745394E12, 2.040201005025126], [1.731745308E12, 2.3502538071065997], [1.731745402E12, 2.2139303482587063], [1.731745316E12, 2.480000000000001], [1.731745357E12, 2.4801980198019797], [1.731745398E12, 2.025000000000001], [1.731745365E12, 2.268656716417912], [1.731745406E12, 2.21105527638191], [1.73174532E12, 2.4149999999999996], [1.731745361E12, 2.7135922330097104]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745409E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.92, "minX": 1.0, "maxY": 49.25, "series": [{"data": [[8.0, 36.036585365853675], [4.0, 18.18181818181818], [2.0, 10.45184916167301], [1.0, 9.92], [9.0, 38.60416666666666], [5.0, 28.156250000000004], [10.0, 43.41176470588236], [11.0, 44.74999999999999], [6.0, 27.63432835820896], [12.0, 49.25], [3.0, 12.88699261992619], [7.0, 32.69791666666665]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[2.437041666666666, 11.834041666666701]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7960.0, "minX": 1.731745289E12, "maxY": 425151.0, "series": [{"data": [[1.731745326E12, 375829.0], [1.731745367E12, 392744.0], [1.731745375E12, 383741.0], [1.731745289E12, 56459.0], [1.73174533E12, 352689.0], [1.731745371E12, 375571.0], [1.731745338E12, 381422.0], [1.731745379E12, 382609.0], [1.731745293E12, 405275.0], [1.731745334E12, 392775.0], [1.731745301E12, 385066.0], [1.731745342E12, 388606.0], [1.731745383E12, 376424.0], [1.731745297E12, 378500.0], [1.731745391E12, 369915.0], [1.731745305E12, 365288.0], [1.731745346E12, 369758.0], [1.731745387E12, 393774.0], [1.731745354E12, 378613.0], [1.731745395E12, 390792.0], [1.731745309E12, 384111.0], [1.73174535E12, 363413.0], [1.731745317E12, 397105.0], [1.731745358E12, 378036.0], [1.731745399E12, 372505.0], [1.731745313E12, 380974.0], [1.731745407E12, 386674.0], [1.731745321E12, 375698.0], [1.731745362E12, 394066.0], [1.731745403E12, 378380.0], [1.731745327E12, 379599.0], [1.731745368E12, 375606.0], [1.731745409E12, 183253.0], [1.731745323E12, 380442.0], [1.731745376E12, 371025.0], [1.73174529E12, 421523.0], [1.731745331E12, 387333.0], [1.731745372E12, 386873.0], [1.73174538E12, 377853.0], [1.731745294E12, 394220.0], [1.731745335E12, 365270.0], [1.731745343E12, 383311.0], [1.731745384E12, 372226.0], [1.731745298E12, 381917.0], [1.731745339E12, 389756.0], [1.731745392E12, 394863.0], [1.731745306E12, 377057.0], [1.731745347E12, 392013.0], [1.731745388E12, 377990.0], [1.731745302E12, 389036.0], [1.731745396E12, 370503.0], [1.73174531E12, 374297.0], [1.731745351E12, 373599.0], [1.731745359E12, 396080.0], [1.7317454E12, 385341.0], [1.731745314E12, 391032.0], [1.731745355E12, 365930.0], [1.731745408E12, 377646.0], [1.731745322E12, 388216.0], [1.731745363E12, 370067.0], [1.731745404E12, 372532.0], [1.731745318E12, 379567.0], [1.731745328E12, 385607.0], [1.731745369E12, 378870.0], [1.731745324E12, 385851.0], [1.731745332E12, 386742.0], [1.731745373E12, 379028.0], [1.731745381E12, 371958.0], [1.731745295E12, 372586.0], [1.731745336E12, 376002.0], [1.731745377E12, 392530.0], [1.731745291E12, 399180.0], [1.731745344E12, 389756.0], [1.731745385E12, 385645.0], [1.731745299E12, 388734.0], [1.73174534E12, 371537.0], [1.731745348E12, 382845.0], [1.731745389E12, 375343.0], [1.731745303E12, 380647.0], [1.731745397E12, 392175.0], [1.731745311E12, 375874.0], [1.731745352E12, 386831.0], [1.731745393E12, 374412.0], [1.731745307E12, 387424.0], [1.73174536E12, 351524.0], [1.731745401E12, 375372.0], [1.731745315E12, 362392.0], [1.731745356E12, 376798.0], [1.731745364E12, 380260.0], [1.731745405E12, 388131.0], [1.731745319E12, 387081.0], [1.73174537E12, 381893.0], [1.731745325E12, 374477.0], [1.731745366E12, 374459.0], [1.731745333E12, 385145.0], [1.731745374E12, 376492.0], [1.731745329E12, 390595.0], [1.731745296E12, 382947.0], [1.731745337E12, 383899.0], [1.731745378E12, 373210.0], [1.731745292E12, 425151.0], [1.731745386E12, 368500.0], [1.7317453E12, 355715.0], [1.731745341E12, 371474.0], [1.731745382E12, 391681.0], [1.731745349E12, 389551.0], [1.73174539E12, 394688.0], [1.731745304E12, 392656.0], [1.731745345E12, 368128.0], [1.731745312E12, 389428.0], [1.731745353E12, 383127.0], [1.731745394E12, 370806.0], [1.731745308E12, 376127.0], [1.731745402E12, 390263.0], [1.731745316E12, 373181.0], [1.731745357E12, 394824.0], [1.731745398E12, 376965.0], [1.731745365E12, 381615.0], [1.731745406E12, 372708.0], [1.73174532E12, 367750.0], [1.731745361E12, 386098.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.731745326E12, 49504.0], [1.731745367E12, 49065.0], [1.731745375E12, 49828.0], [1.731745289E12, 7960.0], [1.73174533E12, 48079.0], [1.731745371E12, 49224.0], [1.731745338E12, 48802.0], [1.731745379E12, 49713.0], [1.731745293E12, 52332.0], [1.731745334E12, 49730.0], [1.731745301E12, 50561.0], [1.731745342E12, 49286.0], [1.731745383E12, 49725.0], [1.731745297E12, 48447.0], [1.731745391E12, 48838.0], [1.731745305E12, 48916.0], [1.731745346E12, 48994.0], [1.731745387E12, 49795.0], [1.731745354E12, 48765.0], [1.731745395E12, 49467.0], [1.731745309E12, 48454.0], [1.73174535E12, 49742.0], [1.731745317E12, 50126.0], [1.731745358E12, 49642.0], [1.731745399E12, 49309.0], [1.731745313E12, 49312.0], [1.731745407E12, 48738.0], [1.731745321E12, 49531.0], [1.731745362E12, 49580.0], [1.731745403E12, 49504.0], [1.731745327E12, 48397.0], [1.731745368E12, 49443.0], [1.731745409E12, 23849.0], [1.731745323E12, 49274.0], [1.731745376E12, 48778.0], [1.73174529E12, 53767.0], [1.731745331E12, 50449.0], [1.731745372E12, 48338.0], [1.73174538E12, 48852.0], [1.731745294E12, 50146.0], [1.731745335E12, 49290.0], [1.731745343E12, 49064.0], [1.731745384E12, 49074.0], [1.731745298E12, 49554.0], [1.731745339E12, 49316.0], [1.731745392E12, 49488.0], [1.731745306E12, 49373.0], [1.731745347E12, 49521.0], [1.731745388E12, 49517.0], [1.731745302E12, 49384.0], [1.731745396E12, 48838.0], [1.73174531E12, 50589.0], [1.731745351E12, 49220.0], [1.731745359E12, 49714.0], [1.7317454E12, 48705.0], [1.731745314E12, 49565.0], [1.731745355E12, 48974.0], [1.731745408E12, 49792.0], [1.731745322E12, 48894.0], [1.731745363E12, 48431.0], [1.731745404E12, 49295.0], [1.731745318E12, 49068.0], [1.731745328E12, 49220.0], [1.731745369E12, 49439.0], [1.731745324E12, 48691.0], [1.731745332E12, 49340.0], [1.731745373E12, 49935.0], [1.731745381E12, 49064.0], [1.731745295E12, 49987.0], [1.731745336E12, 49473.0], [1.731745377E12, 49069.0], [1.731745291E12, 53017.0], [1.731745344E12, 49316.0], [1.731745385E12, 48988.0], [1.731745299E12, 49402.0], [1.73174534E12, 50176.0], [1.731745348E12, 49091.0], [1.731745389E12, 49743.0], [1.731745303E12, 49297.0], [1.731745397E12, 49524.0], [1.731745311E12, 49400.0], [1.731745352E12, 48717.0], [1.731745393E12, 49499.0], [1.731745307E12, 49135.0], [1.73174536E12, 47402.0], [1.731745401E12, 49564.0], [1.731745315E12, 48609.0], [1.731745356E12, 49197.0], [1.731745364E12, 49696.0], [1.731745405E12, 49187.0], [1.731745319E12, 49005.0], [1.73174537E12, 49683.0], [1.731745325E12, 50464.0], [1.731745366E12, 48944.0], [1.731745333E12, 49256.0], [1.731745374E12, 48987.0], [1.731745329E12, 49495.0], [1.731745296E12, 49464.0], [1.731745337E12, 48825.0], [1.731745378E12, 49204.0], [1.731745292E12, 53809.0], [1.731745386E12, 48567.0], [1.7317453E12, 47466.0], [1.731745341E12, 49012.0], [1.731745382E12, 49009.0], [1.731745349E12, 49036.0], [1.73174539E12, 49973.0], [1.731745304E12, 49884.0], [1.731745345E12, 49697.0], [1.731745312E12, 49099.0], [1.731745353E12, 49398.0], [1.731745394E12, 49056.0], [1.731745308E12, 48544.0], [1.731745402E12, 49307.0], [1.731745316E12, 49242.0], [1.731745357E12, 49571.0], [1.731745398E12, 49499.0], [1.731745365E12, 49706.0], [1.731745406E12, 49082.0], [1.73174532E12, 49413.0], [1.731745361E12, 50769.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745409E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9.795000000000005, "minX": 1.731745289E12, "maxY": 43.84375000000002, "series": [{"data": [[1.731745326E12, 10.08457711442786], [1.731745367E12, 11.349999999999989], [1.731745375E12, 10.70792079207921], [1.731745289E12, 43.84375000000002], [1.73174533E12, 10.659793814432993], [1.731745371E12, 10.125000000000005], [1.731745338E12, 11.222222222222223], [1.731745379E12, 11.118811881188119], [1.731745293E12, 15.193396226415091], [1.731745334E12, 10.143564356435647], [1.731745301E12, 14.009756097560972], [1.731745342E12, 10.527363184079595], [1.731745383E12, 12.084577114427866], [1.731745297E12, 10.340101522842643], [1.731745391E12, 10.555555555555554], [1.731745305E12, 10.69849246231155], [1.731745346E12, 10.341708542713572], [1.731745387E12, 14.236453201970448], [1.731745354E12, 11.176767676767673], [1.731745395E12, 10.238805970149258], [1.731745309E12, 14.233502538071072], [1.73174535E12, 10.373134328358207], [1.731745317E12, 10.813725490196077], [1.731745358E12, 11.656716417910447], [1.731745399E12, 10.205000000000005], [1.731745313E12, 11.535000000000002], [1.731745407E12, 10.648241206030148], [1.731745321E12, 11.18407960199005], [1.731745362E12, 10.341584158415843], [1.731745403E12, 10.394999999999996], [1.731745327E12, 10.147208121827417], [1.731745368E12, 10.630000000000003], [1.731745409E12, 11.659793814432993], [1.731745323E12, 11.599999999999994], [1.731745376E12, 11.15151515151515], [1.73174529E12, 38.26027397260272], [1.731745331E12, 11.834146341463413], [1.731745372E12, 10.715736040609142], [1.73174538E12, 11.242424242424246], [1.731745294E12, 11.26600985221675], [1.731745335E12, 9.954773869346733], [1.731745343E12, 10.89447236180904], [1.731745384E12, 12.195979899497484], [1.731745298E12, 11.263681592039806], [1.731745339E12, 10.929999999999996], [1.731745392E12, 10.549504950495049], [1.731745306E12, 11.259999999999996], [1.731745347E12, 9.876237623762378], [1.731745388E12, 11.665], [1.731745302E12, 11.452736318407961], [1.731745396E12, 9.994949494949497], [1.73174531E12, 13.029268292682925], [1.731745351E12, 9.795000000000005], [1.731745359E12, 10.351485148514847], [1.7317454E12, 11.959595959595957], [1.731745314E12, 11.497512437810942], [1.731745355E12, 12.464646464646467], [1.731745408E12, 10.676616915422889], [1.731745322E12, 11.452261306532666], [1.731745363E12, 11.26530612244898], [1.731745404E12, 10.225000000000005], [1.731745318E12, 10.839195979899499], [1.731745328E12, 11.995], [1.731745369E12, 11.432835820895523], [1.731745324E12, 11.358585858585858], [1.731745332E12, 10.393034825870647], [1.731745373E12, 11.227722772277227], [1.731745381E12, 11.673366834170853], [1.731745295E12, 11.088669950738918], [1.731745336E12, 9.990049751243783], [1.731745377E12, 11.130000000000003], [1.731745291E12, 33.139534883720955], [1.731745344E12, 10.405000000000005], [1.731745385E12, 11.748743718592962], [1.731745299E12, 11.170000000000003], [1.73174534E12, 10.46305418719212], [1.731745348E12, 9.95477386934673], [1.731745389E12, 12.792079207920796], [1.731745303E12, 11.669999999999995], [1.731745397E12, 10.059405940594067], [1.731745311E12, 11.534999999999998], [1.731745352E12, 10.301507537688446], [1.731745393E12, 9.975000000000005], [1.731745307E12, 11.245000000000001], [1.73174536E12, 14.197916666666664], [1.731745401E12, 11.044776119402979], [1.731745315E12, 11.969543147208125], [1.731745356E12, 13.089999999999996], [1.731745364E12, 11.168316831683173], [1.731745405E12, 10.215000000000007], [1.731745319E12, 11.005025125628134], [1.73174537E12, 10.059701492537322], [1.731745325E12, 11.053921568627445], [1.731745366E12, 11.944723618090448], [1.731745333E12, 10.290000000000001], [1.731745374E12, 11.100502512562821], [1.731745329E12, 12.522388059701491], [1.731745296E12, 10.412935323383083], [1.731745337E12, 10.633165829145725], [1.731745378E12, 11.020100502512557], [1.731745292E12, 25.456621004566205], [1.731745386E12, 13.182741116751268], [1.7317453E12, 15.36787564766839], [1.731745341E12, 10.090452261306533], [1.731745382E12, 12.440000000000003], [1.731745349E12, 10.793969849246228], [1.73174539E12, 10.605911330049258], [1.731745304E12, 11.118811881188122], [1.731745345E12, 10.308457711442786], [1.731745312E12, 11.784999999999998], [1.731745353E12, 10.345], [1.731745394E12, 10.020100502512568], [1.731745308E12, 11.56345177664975], [1.731745402E12, 10.855721393034816], [1.731745316E12, 12.095], [1.731745357E12, 11.970297029702966], [1.731745398E12, 9.859999999999992], [1.731745365E12, 11.019900497512442], [1.731745406E12, 10.934673366834168], [1.73174532E12, 11.824999999999998], [1.731745361E12, 13.019417475728162]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745409E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9.789999999999994, "minX": 1.731745289E12, "maxY": 43.78125, "series": [{"data": [[1.731745326E12, 10.074626865671645], [1.731745367E12, 11.329999999999997], [1.731745375E12, 10.70792079207921], [1.731745289E12, 43.78125], [1.73174533E12, 10.654639175257733], [1.731745371E12, 10.114999999999997], [1.731745338E12, 11.217171717171722], [1.731745379E12, 11.113861386138616], [1.731745293E12, 15.165094339622648], [1.731745334E12, 10.128712871287131], [1.731745301E12, 14.009756097560972], [1.731745342E12, 10.522388059701498], [1.731745383E12, 12.079601990049742], [1.731745297E12, 10.329949238578678], [1.731745391E12, 10.555555555555554], [1.731745305E12, 10.673366834170857], [1.731745346E12, 10.336683417085426], [1.731745387E12, 14.231527093596062], [1.731745354E12, 11.176767676767673], [1.731745395E12, 10.233830845771148], [1.731745309E12, 14.223350253807107], [1.73174535E12, 10.363184079601991], [1.731745317E12, 10.78921568627451], [1.731745358E12, 11.64676616915423], [1.731745399E12, 10.205000000000005], [1.731745313E12, 11.48500000000001], [1.731745407E12, 10.648241206030148], [1.731745321E12, 11.18407960199005], [1.731745362E12, 10.341584158415843], [1.731745403E12, 10.38], [1.731745327E12, 10.13705583756345], [1.731745368E12, 10.615000000000002], [1.731745409E12, 11.659793814432993], [1.731745323E12, 11.599999999999994], [1.731745376E12, 11.136363636363633], [1.73174529E12, 38.200913242009136], [1.731745331E12, 11.834146341463413], [1.731745372E12, 10.705583756345176], [1.73174538E12, 11.23737373737374], [1.731745294E12, 11.256157635467979], [1.731745335E12, 9.944723618090457], [1.731745343E12, 10.89447236180904], [1.731745384E12, 12.195979899497484], [1.731745298E12, 11.258706467661694], [1.731745339E12, 10.929999999999996], [1.731745392E12, 10.534653465346535], [1.731745306E12, 11.250000000000004], [1.731745347E12, 9.876237623762378], [1.731745388E12, 11.65499999999999], [1.731745302E12, 11.432835820895516], [1.731745396E12, 9.994949494949497], [1.73174531E12, 13.019512195121953], [1.731745351E12, 9.789999999999994], [1.731745359E12, 10.346534653465342], [1.7317454E12, 11.949494949494945], [1.731745314E12, 11.462686567164182], [1.731745355E12, 12.454545454545459], [1.731745408E12, 10.676616915422889], [1.731745322E12, 11.432160804020098], [1.731745363E12, 11.26530612244898], [1.731745404E12, 10.210000000000003], [1.731745318E12, 10.834170854271349], [1.731745328E12, 11.985000000000003], [1.731745369E12, 11.432835820895523], [1.731745324E12, 11.338383838383836], [1.731745332E12, 10.388059701492537], [1.731745373E12, 11.222772277227728], [1.731745381E12, 11.673366834170853], [1.731745295E12, 11.083743842364536], [1.731745336E12, 9.98507462686567], [1.731745377E12, 11.130000000000003], [1.731745291E12, 33.065116279069755], [1.731745344E12, 10.405000000000005], [1.731745385E12, 11.743718592964829], [1.731745299E12, 11.170000000000003], [1.73174534E12, 10.46305418719212], [1.731745348E12, 9.944723618090451], [1.731745389E12, 12.782178217821778], [1.731745303E12, 11.655000000000003], [1.731745397E12, 10.054455445544546], [1.731745311E12, 11.524999999999999], [1.731745352E12, 10.301507537688446], [1.731745393E12, 9.97], [1.731745307E12, 11.23], [1.73174536E12, 14.19270833333333], [1.731745401E12, 11.044776119402979], [1.731745315E12, 11.969543147208125], [1.731745356E12, 13.089999999999996], [1.731745364E12, 11.163366336633661], [1.731745405E12, 10.21], [1.731745319E12, 10.99497487437186], [1.73174537E12, 10.059701492537322], [1.731745325E12, 11.034313725490204], [1.731745366E12, 11.934673366834174], [1.731745333E12, 10.285], [1.731745374E12, 11.090452261306528], [1.731745329E12, 12.517412935323383], [1.731745296E12, 10.402985074626862], [1.731745337E12, 10.628140703517584], [1.731745378E12, 11.015075376884415], [1.731745292E12, 25.433789954337907], [1.731745386E12, 13.172588832487309], [1.7317453E12, 15.362694300518125], [1.731745341E12, 10.090452261306533], [1.731745382E12, 12.43500000000001], [1.731745349E12, 10.783919597989954], [1.73174539E12, 10.600985221674874], [1.731745304E12, 11.113861386138616], [1.731745345E12, 10.303482587064682], [1.731745312E12, 11.775000000000007], [1.731745353E12, 10.345], [1.731745394E12, 10.020100502512568], [1.731745308E12, 11.558375634517759], [1.731745402E12, 10.850746268656717], [1.731745316E12, 12.095], [1.731745357E12, 11.965346534653467], [1.731745398E12, 9.859999999999992], [1.731745365E12, 11.019900497512442], [1.731745406E12, 10.924623115577884], [1.73174532E12, 11.824999999999998], [1.731745361E12, 13.009708737864068]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745409E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.731745289E12, "maxY": 2.8125, "series": [{"data": [[1.731745326E12, 0.0348258706467662], [1.731745367E12, 0.025], [1.731745375E12, 0.04455445544554456], [1.731745289E12, 2.8125], [1.73174533E12, 0.046391752577319596], [1.731745371E12, 0.04500000000000001], [1.731745338E12, 0.04545454545454547], [1.731745379E12, 0.024752475247524754], [1.731745293E12, 0.05188679245283019], [1.731745334E12, 0.049504950495049514], [1.731745301E12, 0.04878048780487805], [1.731745342E12, 0.054726368159203974], [1.731745383E12, 0.024875621890547258], [1.731745297E12, 0.045685279187817264], [1.731745391E12, 0.0404040404040404], [1.731745305E12, 0.040201005025125636], [1.731745346E12, 0.04522613065326634], [1.731745387E12, 0.03448275862068966], [1.731745354E12, 0.050505050505050525], [1.731745395E12, 0.019900497512437814], [1.731745309E12, 0.035532994923857884], [1.73174535E12, 0.03980099502487561], [1.731745317E12, 0.024509803921568627], [1.731745358E12, 0.03980099502487564], [1.731745399E12, 0.04000000000000002], [1.731745313E12, 0.03999999999999999], [1.731745407E12, 0.040201005025125615], [1.731745321E12, 0.04975124378109452], [1.731745362E12, 0.019801980198019806], [1.731745403E12, 0.020000000000000007], [1.731745327E12, 0.05583756345177667], [1.731745368E12, 0.04000000000000001], [1.731745409E12, 0.030927835051546393], [1.731745323E12, 0.06499999999999999], [1.731745376E12, 0.0202020202020202], [1.73174529E12, 0.06392694063926944], [1.731745331E12, 0.014634146341463414], [1.731745372E12, 0.015228426395939106], [1.73174538E12, 0.04040404040404041], [1.731745294E12, 0.03940886699507389], [1.731745335E12, 0.040201005025125636], [1.731745343E12, 0.04020100502512562], [1.731745384E12, 0.010050251256281405], [1.731745298E12, 0.03980099502487563], [1.731745339E12, 0.045], [1.731745392E12, 0.00495049504950495], [1.731745306E12, 0.03999999999999999], [1.731745347E12, 0.03960396039603961], [1.731745388E12, 0.009999999999999998], [1.731745302E12, 0.044776119402985086], [1.731745396E12, 0.055555555555555566], [1.73174531E12, 0.04878048780487806], [1.731745351E12, 0.025000000000000012], [1.731745359E12, 0.029702970297029705], [1.7317454E12, 0.03535353535353535], [1.731745314E12, 0.04477611940298509], [1.731745355E12, 0.05050505050505052], [1.731745408E12, 0.02487562189054727], [1.731745322E12, 0.050251256281407045], [1.731745363E12, 0.030612244897959186], [1.731745404E12, 0.030000000000000013], [1.731745318E12, 0.03517587939698493], [1.731745328E12, 0.039999999999999994], [1.731745369E12, 0.019900497512437807], [1.731745324E12, 0.025252525252525252], [1.731745332E12, 0.0497512437810945], [1.731745373E12, 0.0198019801980198], [1.731745381E12, 0.03517587939698491], [1.731745295E12, 0.03940886699507388], [1.731745336E12, 0.03482587064676617], [1.731745377E12, 0.0], [1.731745291E12, 0.06046511627906978], [1.731745344E12, 0.030000000000000006], [1.731745385E12, 0.010050251256281405], [1.731745299E12, 0.045], [1.73174534E12, 0.029556650246305424], [1.731745348E12, 0.03517587939698492], [1.731745389E12, 0.0], [1.731745303E12, 0.05500000000000001], [1.731745397E12, 0.039603960396039604], [1.731745311E12, 0.05500000000000001], [1.731745352E12, 0.05025125628140703], [1.731745393E12, 0.015000000000000017], [1.731745307E12, 0.03999999999999999], [1.73174536E12, 0.02604166666666666], [1.731745401E12, 0.029850746268656723], [1.731745315E12, 0.05076142131979694], [1.731745356E12, 0.015000000000000013], [1.731745364E12, 0.05445544554455445], [1.731745405E12, 0.030000000000000013], [1.731745319E12, 0.03517587939698493], [1.73174537E12, 0.004975124378109452], [1.731745325E12, 0.05882352941176471], [1.731745366E12, 0.005025125628140703], [1.731745333E12, 0.039999999999999994], [1.731745374E12, 0.030150753768844227], [1.731745329E12, 0.02985074626865672], [1.731745296E12, 0.039800995024875614], [1.731745337E12, 0.06030150753768845], [1.731745378E12, 0.030150753768844248], [1.731745292E12, 0.059360730593607296], [1.731745386E12, 0.04060913705583755], [1.7317453E12, 0.04663212435233163], [1.731745341E12, 0.05025125628140706], [1.731745382E12, 0.03499999999999999], [1.731745349E12, 0.040201005025125615], [1.73174539E12, 0.05911330049261084], [1.731745304E12, 0.03465346534653466], [1.731745345E12, 0.029850746268656737], [1.731745312E12, 0.045000000000000005], [1.731745353E12, 0.03000000000000002], [1.731745394E12, 0.025125628140703533], [1.731745308E12, 0.030456852791878177], [1.731745402E12, 0.014925373134328356], [1.731745316E12, 0.04499999999999999], [1.731745357E12, 0.02970297029702971], [1.731745398E12, 0.04], [1.731745365E12, 0.009950248756218904], [1.731745406E12, 0.055276381909547735], [1.73174532E12, 0.030000000000000006], [1.731745361E12, 0.02912621359223302]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745409E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.731745289E12, "maxY": 189.0, "series": [{"data": [[1.731745326E12, 22.0], [1.731745367E12, 22.0], [1.731745375E12, 25.0], [1.731745289E12, 189.0], [1.73174533E12, 23.0], [1.731745371E12, 18.0], [1.731745338E12, 27.0], [1.731745379E12, 23.0], [1.731745293E12, 51.0], [1.731745334E12, 17.0], [1.731745301E12, 28.0], [1.731745342E12, 25.0], [1.731745383E12, 30.0], [1.731745297E12, 23.0], [1.731745391E12, 20.0], [1.731745305E12, 26.0], [1.731745346E12, 18.0], [1.731745387E12, 31.0], [1.731745354E12, 23.0], [1.731745395E12, 19.0], [1.731745309E12, 31.0], [1.73174535E12, 21.0], [1.731745317E12, 23.0], [1.731745358E12, 28.0], [1.731745399E12, 24.0], [1.731745313E12, 27.0], [1.731745407E12, 25.0], [1.731745321E12, 23.0], [1.731745362E12, 21.0], [1.731745403E12, 20.0], [1.731745327E12, 20.0], [1.731745368E12, 22.0], [1.731745409E12, 25.0], [1.731745323E12, 23.0], [1.731745376E12, 23.0], [1.73174529E12, 69.0], [1.731745331E12, 32.0], [1.731745372E12, 23.0], [1.73174538E12, 28.0], [1.731745294E12, 28.0], [1.731745335E12, 18.0], [1.731745343E12, 31.0], [1.731745384E12, 29.0], [1.731745298E12, 25.0], [1.731745339E12, 30.0], [1.731745392E12, 19.0], [1.731745306E12, 32.0], [1.731745347E12, 15.0], [1.731745388E12, 25.0], [1.731745302E12, 23.0], [1.731745396E12, 17.0], [1.73174531E12, 31.0], [1.731745351E12, 13.0], [1.731745359E12, 19.0], [1.7317454E12, 23.0], [1.731745314E12, 23.0], [1.731745355E12, 28.0], [1.731745408E12, 25.0], [1.731745322E12, 23.0], [1.731745363E12, 24.0], [1.731745404E12, 25.0], [1.731745318E12, 25.0], [1.731745328E12, 24.0], [1.731745369E12, 27.0], [1.731745324E12, 29.0], [1.731745332E12, 20.0], [1.731745373E12, 28.0], [1.731745381E12, 24.0], [1.731745295E12, 24.0], [1.731745336E12, 18.0], [1.731745377E12, 22.0], [1.731745291E12, 68.0], [1.731745344E12, 22.0], [1.731745385E12, 22.0], [1.731745299E12, 23.0], [1.73174534E12, 21.0], [1.731745348E12, 14.0], [1.731745389E12, 31.0], [1.731745303E12, 23.0], [1.731745397E12, 18.0], [1.731745311E12, 27.0], [1.731745352E12, 21.0], [1.731745393E12, 17.0], [1.731745307E12, 29.0], [1.73174536E12, 40.0], [1.731745401E12, 22.0], [1.731745315E12, 29.0], [1.731745356E12, 27.0], [1.731745364E12, 21.0], [1.731745405E12, 23.0], [1.731745319E12, 21.0], [1.73174537E12, 18.0], [1.731745325E12, 25.0], [1.731745366E12, 33.0], [1.731745333E12, 18.0], [1.731745374E12, 22.0], [1.731745329E12, 28.0], [1.731745296E12, 31.0], [1.731745337E12, 32.0], [1.731745378E12, 25.0], [1.731745292E12, 57.0], [1.731745386E12, 32.0], [1.7317453E12, 35.0], [1.731745341E12, 17.0], [1.731745382E12, 24.0], [1.731745349E12, 23.0], [1.73174539E12, 23.0], [1.731745304E12, 24.0], [1.731745345E12, 20.0], [1.731745312E12, 25.0], [1.731745353E12, 22.0], [1.731745394E12, 17.0], [1.731745308E12, 23.0], [1.731745402E12, 27.0], [1.731745316E12, 24.0], [1.731745357E12, 26.0], [1.731745398E12, 11.0], [1.731745365E12, 24.0], [1.731745406E12, 25.0], [1.73174532E12, 23.0], [1.731745361E12, 34.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.731745326E12, 11.0], [1.731745367E12, 15.0], [1.731745375E12, 12.700000000000017], [1.731745289E12, 151.59999999999997], [1.73174533E12, 12.5], [1.731745371E12, 11.0], [1.731745338E12, 15.0], [1.731745379E12, 15.0], [1.731745293E12, 23.0], [1.731745334E12, 11.0], [1.731745301E12, 20.0], [1.731745342E12, 12.0], [1.731745383E12, 17.0], [1.731745297E12, 11.0], [1.731745391E12, 13.0], [1.731745305E12, 13.0], [1.731745346E12, 11.0], [1.731745387E12, 20.0], [1.731745354E12, 16.0], [1.731745395E12, 11.0], [1.731745309E12, 21.0], [1.73174535E12, 11.0], [1.731745317E12, 14.0], [1.731745358E12, 16.0], [1.731745399E12, 11.0], [1.731745313E12, 15.900000000000006], [1.731745407E12, 12.0], [1.731745321E12, 15.0], [1.731745362E12, 11.0], [1.731745403E12, 11.0], [1.731745327E12, 11.0], [1.731745368E12, 13.0], [1.731745409E12, 17.0], [1.731745323E12, 15.900000000000006], [1.731745376E12, 14.099999999999994], [1.73174529E12, 53.0], [1.731745331E12, 17.0], [1.731745372E12, 13.0], [1.73174538E12, 15.0], [1.731745294E12, 16.0], [1.731745335E12, 10.0], [1.731745343E12, 13.0], [1.731745384E12, 18.0], [1.731745298E12, 15.0], [1.731745339E12, 13.0], [1.731745392E12, 12.0], [1.731745306E12, 15.0], [1.731745347E12, 10.0], [1.731745388E12, 16.0], [1.731745302E12, 16.0], [1.731745396E12, 11.0], [1.73174531E12, 18.0], [1.731745351E12, 10.0], [1.731745359E12, 12.0], [1.7317454E12, 18.0], [1.731745314E12, 16.0], [1.731745355E12, 17.0], [1.731745408E12, 12.0], [1.731745322E12, 16.0], [1.731745363E12, 15.0], [1.731745404E12, 11.0], [1.731745318E12, 13.0], [1.731745328E12, 17.0], [1.731745369E12, 16.0], [1.731745324E12, 15.0], [1.731745332E12, 12.0], [1.731745373E12, 14.700000000000017], [1.731745381E12, 16.0], [1.731745295E12, 14.599999999999994], [1.731745336E12, 10.0], [1.731745377E12, 15.0], [1.731745291E12, 45.0], [1.731745344E12, 11.0], [1.731745385E12, 17.0], [1.731745299E12, 15.0], [1.73174534E12, 12.0], [1.731745348E12, 10.0], [1.731745389E12, 19.0], [1.731745303E12, 17.0], [1.731745397E12, 11.0], [1.731745311E12, 15.900000000000006], [1.731745352E12, 11.0], [1.731745393E12, 10.0], [1.731745307E12, 14.0], [1.73174536E12, 21.0], [1.731745401E12, 14.0], [1.731745315E12, 17.0], [1.731745356E12, 18.0], [1.731745364E12, 15.0], [1.731745405E12, 11.0], [1.731745319E12, 15.0], [1.73174537E12, 10.0], [1.731745325E12, 14.0], [1.731745366E12, 17.0], [1.731745333E12, 11.0], [1.731745374E12, 15.0], [1.731745329E12, 18.0], [1.731745296E12, 11.800000000000011], [1.731745337E12, 11.0], [1.731745378E12, 14.0], [1.731745292E12, 37.0], [1.731745386E12, 20.0], [1.7317453E12, 24.0], [1.731745341E12, 10.0], [1.731745382E12, 17.0], [1.731745349E12, 14.0], [1.73174539E12, 13.0], [1.731745304E12, 15.0], [1.731745345E12, 11.0], [1.731745312E12, 16.0], [1.731745353E12, 11.900000000000006], [1.731745394E12, 11.0], [1.731745308E12, 16.0], [1.731745402E12, 14.0], [1.731745316E12, 17.0], [1.731745357E12, 17.0], [1.731745398E12, 10.0], [1.731745365E12, 14.0], [1.731745406E12, 14.0], [1.73174532E12, 17.0], [1.731745361E12, 19.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.731745326E12, 14.0], [1.731745367E12, 21.0], [1.731745375E12, 23.909999999999997], [1.731745289E12, 189.0], [1.73174533E12, 20.150000000000034], [1.731745371E12, 17.970000000000027], [1.731745338E12, 25.019999999999982], [1.731745379E12, 22.97], [1.731745293E12, 35.35000000000002], [1.731745334E12, 16.97], [1.731745301E12, 26.939999999999998], [1.731745342E12, 19.97999999999999], [1.731745383E12, 25.97999999999999], [1.731745297E12, 21.04000000000002], [1.731745391E12, 18.019999999999982], [1.731745305E12, 19.0], [1.731745346E12, 18.0], [1.731745387E12, 30.0], [1.731745354E12, 20.029999999999973], [1.731745395E12, 17.95999999999998], [1.731745309E12, 28.06000000000003], [1.73174535E12, 17.97999999999999], [1.731745317E12, 21.0], [1.731745358E12, 25.97999999999999], [1.731745399E12, 16.99000000000001], [1.731745313E12, 22.99000000000001], [1.731745407E12, 22.0], [1.731745321E12, 20.97999999999999], [1.731745362E12, 18.97], [1.731745403E12, 18.980000000000018], [1.731745327E12, 17.06000000000003], [1.731745368E12, 17.99000000000001], [1.731745409E12, 25.0], [1.731745323E12, 21.99000000000001], [1.731745376E12, 22.00999999999999], [1.73174529E12, 67.60000000000002], [1.731745331E12, 24.879999999999995], [1.731745372E12, 19.08000000000004], [1.73174538E12, 23.049999999999955], [1.731745294E12, 25.840000000000032], [1.731745335E12, 14.0], [1.731745343E12, 31.0], [1.731745384E12, 22.0], [1.731745298E12, 21.97999999999999], [1.731745339E12, 20.0], [1.731745392E12, 17.97], [1.731745306E12, 24.970000000000027], [1.731745347E12, 13.939999999999998], [1.731745388E12, 23.0], [1.731745302E12, 21.97999999999999], [1.731745396E12, 15.019999999999982], [1.73174531E12, 27.819999999999993], [1.731745351E12, 11.0], [1.731745359E12, 17.0], [1.7317454E12, 23.0], [1.731745314E12, 19.97999999999999], [1.731745355E12, 23.049999999999955], [1.731745408E12, 22.87999999999994], [1.731745322E12, 23.0], [1.731745363E12, 21.090000000000003], [1.731745404E12, 17.0], [1.731745318E12, 23.0], [1.731745328E12, 23.0], [1.731745369E12, 21.0], [1.731745324E12, 24.049999999999955], [1.731745332E12, 17.95999999999998], [1.731745373E12, 23.0], [1.731745381E12, 24.0], [1.731745295E12, 22.880000000000024], [1.731745336E12, 14.0], [1.731745377E12, 20.99000000000001], [1.731745291E12, 58.68000000000001], [1.731745344E12, 20.980000000000018], [1.731745385E12, 22.0], [1.731745299E12, 21.0], [1.73174534E12, 20.0], [1.731745348E12, 13.0], [1.731745389E12, 29.939999999999998], [1.731745303E12, 20.99000000000001], [1.731745397E12, 15.969999999999999], [1.731745311E12, 22.99000000000001], [1.731745352E12, 19.0], [1.731745393E12, 12.0], [1.731745307E12, 27.930000000000064], [1.73174536E12, 32.559999999999945], [1.731745401E12, 21.0], [1.731745315E12, 25.08000000000004], [1.731745356E12, 26.960000000000036], [1.731745364E12, 20.97], [1.731745405E12, 15.0], [1.731745319E12, 20.0], [1.73174537E12, 16.0], [1.731745325E12, 22.94999999999999], [1.731745366E12, 29.0], [1.731745333E12, 17.0], [1.731745374E12, 20.0], [1.731745329E12, 24.0], [1.731745296E12, 18.95999999999998], [1.731745337E12, 20.0], [1.731745378E12, 20.0], [1.731745292E12, 51.200000000000045], [1.731745386E12, 26.12000000000006], [1.7317453E12, 33.120000000000005], [1.731745341E12, 15.0], [1.731745382E12, 23.970000000000027], [1.731745349E12, 23.0], [1.73174539E12, 17.960000000000008], [1.731745304E12, 20.97], [1.731745345E12, 17.97999999999999], [1.731745312E12, 20.0], [1.731745353E12, 18.980000000000018], [1.731745394E12, 16.0], [1.731745308E12, 21.04000000000002], [1.731745402E12, 22.95999999999998], [1.731745316E12, 23.99000000000001], [1.731745357E12, 23.939999999999998], [1.731745398E12, 11.0], [1.731745365E12, 20.95999999999998], [1.731745406E12, 20.0], [1.73174532E12, 22.99000000000001], [1.731745361E12, 27.930000000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.731745326E12, 11.0], [1.731745367E12, 18.0], [1.731745375E12, 16.849999999999994], [1.731745289E12, 183.79999999999998], [1.73174533E12, 15.25], [1.731745371E12, 11.0], [1.731745338E12, 17.049999999999983], [1.731745379E12, 18.0], [1.731745293E12, 25.0], [1.731745334E12, 12.0], [1.731745301E12, 23.0], [1.731745342E12, 15.0], [1.731745383E12, 19.899999999999977], [1.731745297E12, 13.0], [1.731745391E12, 16.0], [1.731745305E12, 17.0], [1.731745346E12, 13.0], [1.731745387E12, 23.0], [1.731745354E12, 17.0], [1.731745395E12, 13.899999999999977], [1.731745309E12, 24.099999999999994], [1.73174535E12, 13.899999999999977], [1.731745317E12, 16.75], [1.731745358E12, 18.0], [1.731745399E12, 11.949999999999989], [1.731745313E12, 18.0], [1.731745407E12, 16.0], [1.731745321E12, 18.0], [1.731745362E12, 13.849999999999994], [1.731745403E12, 13.0], [1.731745327E12, 11.0], [1.731745368E12, 15.0], [1.731745409E12, 21.0], [1.731745323E12, 18.0], [1.731745376E12, 17.0], [1.73174529E12, 58.0], [1.731745331E12, 18.69999999999999], [1.731745372E12, 16.0], [1.73174538E12, 17.0], [1.731745294E12, 18.0], [1.731745335E12, 11.0], [1.731745343E12, 17.0], [1.731745384E12, 19.0], [1.731745298E12, 17.899999999999977], [1.731745339E12, 17.94999999999999], [1.731745392E12, 14.849999999999994], [1.731745306E12, 18.0], [1.731745347E12, 11.0], [1.731745388E12, 18.94999999999999], [1.731745302E12, 18.0], [1.731745396E12, 11.0], [1.73174531E12, 21.0], [1.731745351E12, 11.0], [1.731745359E12, 14.849999999999994], [1.7317454E12, 19.0], [1.731745314E12, 18.0], [1.731745355E12, 19.0], [1.731745408E12, 15.899999999999977], [1.731745322E12, 18.0], [1.731745363E12, 17.0], [1.731745404E12, 12.0], [1.731745318E12, 17.0], [1.731745328E12, 18.94999999999999], [1.731745369E12, 18.0], [1.731745324E12, 16.049999999999983], [1.731745332E12, 13.0], [1.731745373E12, 17.849999999999994], [1.731745381E12, 18.0], [1.731745295E12, 17.0], [1.731745336E12, 11.0], [1.731745377E12, 17.0], [1.731745291E12, 50.0], [1.731745344E12, 13.0], [1.731745385E12, 19.0], [1.731745299E12, 18.0], [1.73174534E12, 15.0], [1.731745348E12, 11.0], [1.731745389E12, 21.0], [1.731745303E12, 18.0], [1.731745397E12, 11.0], [1.731745311E12, 17.94999999999999], [1.731745352E12, 13.0], [1.731745393E12, 11.0], [1.731745307E12, 17.0], [1.73174536E12, 25.0], [1.731745401E12, 17.0], [1.731745315E12, 19.0], [1.731745356E12, 20.94999999999999], [1.731745364E12, 16.0], [1.731745405E12, 11.0], [1.731745319E12, 16.0], [1.73174537E12, 11.0], [1.731745325E12, 18.0], [1.731745366E12, 20.0], [1.731745333E12, 12.949999999999989], [1.731745374E12, 18.0], [1.731745329E12, 20.0], [1.731745296E12, 13.899999999999977], [1.731745337E12, 15.0], [1.731745378E12, 16.0], [1.731745292E12, 42.0], [1.731745386E12, 22.099999999999994], [1.7317453E12, 27.0], [1.731745341E12, 11.0], [1.731745382E12, 18.94999999999999], [1.731745349E12, 17.0], [1.73174539E12, 14.0], [1.731745304E12, 17.0], [1.731745345E12, 13.0], [1.731745312E12, 19.0], [1.731745353E12, 13.949999999999989], [1.731745394E12, 11.0], [1.731745308E12, 19.0], [1.731745402E12, 16.0], [1.731745316E12, 20.0], [1.731745357E12, 18.849999999999994], [1.731745398E12, 10.0], [1.731745365E12, 17.0], [1.731745406E12, 16.0], [1.73174532E12, 18.94999999999999], [1.731745361E12, 22.649999999999977]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.731745326E12, 9.0], [1.731745367E12, 4.0], [1.731745375E12, 9.0], [1.731745289E12, 11.0], [1.73174533E12, 9.0], [1.731745371E12, 9.0], [1.731745338E12, 9.0], [1.731745379E12, 4.0], [1.731745293E12, 9.0], [1.731745334E12, 4.0], [1.731745301E12, 9.0], [1.731745342E12, 4.0], [1.731745383E12, 9.0], [1.731745297E12, 9.0], [1.731745391E12, 9.0], [1.731745305E12, 9.0], [1.731745346E12, 9.0], [1.731745387E12, 9.0], [1.731745354E12, 4.0], [1.731745395E12, 9.0], [1.731745309E12, 8.0], [1.73174535E12, 9.0], [1.731745317E12, 9.0], [1.731745358E12, 9.0], [1.731745399E12, 4.0], [1.731745313E12, 9.0], [1.731745407E12, 4.0], [1.731745321E12, 9.0], [1.731745362E12, 4.0], [1.731745403E12, 9.0], [1.731745327E12, 4.0], [1.731745368E12, 9.0], [1.731745409E12, 9.0], [1.731745323E12, 9.0], [1.731745376E12, 9.0], [1.73174529E12, 10.0], [1.731745331E12, 9.0], [1.731745372E12, 4.0], [1.73174538E12, 9.0], [1.731745294E12, 4.0], [1.731745335E12, 9.0], [1.731745343E12, 9.0], [1.731745384E12, 4.0], [1.731745298E12, 9.0], [1.731745339E12, 4.0], [1.731745392E12, 4.0], [1.731745306E12, 9.0], [1.731745347E12, 4.0], [1.731745388E12, 9.0], [1.731745302E12, 4.0], [1.731745396E12, 9.0], [1.73174531E12, 9.0], [1.731745351E12, 9.0], [1.731745359E12, 4.0], [1.7317454E12, 9.0], [1.731745314E12, 4.0], [1.731745355E12, 10.0], [1.731745408E12, 9.0], [1.731745322E12, 5.0], [1.731745363E12, 9.0], [1.731745404E12, 4.0], [1.731745318E12, 9.0], [1.731745328E12, 9.0], [1.731745369E12, 8.0], [1.731745324E12, 5.0], [1.731745332E12, 5.0], [1.731745373E12, 9.0], [1.731745381E12, 9.0], [1.731745295E12, 9.0], [1.731745336E12, 9.0], [1.731745377E12, 4.0], [1.731745291E12, 10.0], [1.731745344E12, 4.0], [1.731745385E12, 9.0], [1.731745299E12, 7.0], [1.73174534E12, 9.0], [1.731745348E12, 9.0], [1.731745389E12, 8.0], [1.731745303E12, 9.0], [1.731745397E12, 4.0], [1.731745311E12, 9.0], [1.731745352E12, 5.0], [1.731745393E12, 9.0], [1.731745307E12, 4.0], [1.73174536E12, 9.0], [1.731745401E12, 9.0], [1.731745315E12, 9.0], [1.731745356E12, 9.0], [1.731745364E12, 4.0], [1.731745405E12, 9.0], [1.731745319E12, 5.0], [1.73174537E12, 9.0], [1.731745325E12, 9.0], [1.731745366E12, 9.0], [1.731745333E12, 9.0], [1.731745374E12, 4.0], [1.731745329E12, 9.0], [1.731745296E12, 4.0], [1.731745337E12, 5.0], [1.731745378E12, 9.0], [1.731745292E12, 10.0], [1.731745386E12, 9.0], [1.7317453E12, 9.0], [1.731745341E12, 9.0], [1.731745382E12, 4.0], [1.731745349E12, 9.0], [1.73174539E12, 9.0], [1.731745304E12, 5.0], [1.731745345E12, 9.0], [1.731745312E12, 8.0], [1.731745353E12, 9.0], [1.731745394E12, 4.0], [1.731745308E12, 9.0], [1.731745402E12, 4.0], [1.731745316E12, 9.0], [1.731745357E12, 4.0], [1.731745398E12, 9.0], [1.731745365E12, 9.0], [1.731745406E12, 9.0], [1.73174532E12, 9.0], [1.731745361E12, 9.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.731745326E12, 10.0], [1.731745367E12, 10.0], [1.731745375E12, 10.0], [1.731745289E12, 28.0], [1.73174533E12, 10.0], [1.731745371E12, 10.0], [1.731745338E12, 10.0], [1.731745379E12, 10.0], [1.731745293E12, 14.0], [1.731745334E12, 10.0], [1.731745301E12, 13.0], [1.731745342E12, 10.0], [1.731745383E12, 11.0], [1.731745297E12, 10.0], [1.731745391E12, 10.0], [1.731745305E12, 10.0], [1.731745346E12, 10.0], [1.731745387E12, 13.0], [1.731745354E12, 10.0], [1.731745395E12, 10.0], [1.731745309E12, 12.0], [1.73174535E12, 10.0], [1.731745317E12, 10.0], [1.731745358E12, 10.0], [1.731745399E12, 10.0], [1.731745313E12, 10.0], [1.731745407E12, 10.0], [1.731745321E12, 10.0], [1.731745362E12, 10.0], [1.731745403E12, 10.0], [1.731745327E12, 10.0], [1.731745368E12, 10.0], [1.731745409E12, 10.0], [1.731745323E12, 10.0], [1.731745376E12, 10.0], [1.73174529E12, 38.0], [1.731745331E12, 10.0], [1.731745372E12, 10.0], [1.73174538E12, 10.0], [1.731745294E12, 10.0], [1.731745335E12, 10.0], [1.731745343E12, 10.0], [1.731745384E12, 11.0], [1.731745298E12, 10.0], [1.731745339E12, 10.0], [1.731745392E12, 10.0], [1.731745306E12, 10.0], [1.731745347E12, 10.0], [1.731745388E12, 10.0], [1.731745302E12, 10.0], [1.731745396E12, 10.0], [1.73174531E12, 11.0], [1.731745351E12, 10.0], [1.731745359E12, 10.0], [1.7317454E12, 10.0], [1.731745314E12, 10.0], [1.731745355E12, 11.0], [1.731745408E12, 10.0], [1.731745322E12, 10.0], [1.731745363E12, 10.0], [1.731745404E12, 10.0], [1.731745318E12, 10.0], [1.731745328E12, 11.0], [1.731745369E12, 10.0], [1.731745324E12, 10.0], [1.731745332E12, 10.0], [1.731745373E12, 10.0], [1.731745381E12, 10.0], [1.731745295E12, 10.0], [1.731745336E12, 10.0], [1.731745377E12, 10.0], [1.731745291E12, 33.0], [1.731745344E12, 10.0], [1.731745385E12, 11.0], [1.731745299E12, 10.0], [1.73174534E12, 10.0], [1.731745348E12, 10.0], [1.731745389E12, 11.0], [1.731745303E12, 10.0], [1.731745397E12, 10.0], [1.731745311E12, 10.0], [1.731745352E12, 10.0], [1.731745393E12, 10.0], [1.731745307E12, 10.0], [1.73174536E12, 12.0], [1.731745401E12, 10.0], [1.731745315E12, 11.0], [1.731745356E12, 12.0], [1.731745364E12, 10.0], [1.731745405E12, 10.0], [1.731745319E12, 10.0], [1.73174537E12, 10.0], [1.731745325E12, 10.0], [1.731745366E12, 10.0], [1.731745333E12, 10.0], [1.731745374E12, 10.0], [1.731745329E12, 11.0], [1.731745296E12, 10.0], [1.731745337E12, 10.0], [1.731745378E12, 10.0], [1.731745292E12, 25.0], [1.731745386E12, 11.0], [1.7317453E12, 14.0], [1.731745341E12, 10.0], [1.731745382E12, 11.0], [1.731745349E12, 10.0], [1.73174539E12, 10.0], [1.731745304E12, 10.0], [1.731745345E12, 10.0], [1.731745312E12, 10.0], [1.731745353E12, 10.0], [1.731745394E12, 10.0], [1.731745308E12, 10.0], [1.731745402E12, 10.0], [1.731745316E12, 10.0], [1.731745357E12, 11.0], [1.731745398E12, 10.0], [1.731745365E12, 10.0], [1.731745406E12, 10.0], [1.73174532E12, 10.0], [1.731745361E12, 11.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745409E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 32.0, "maxY": 33.0, "series": [{"data": [[32.0, 28.0], [197.0, 10.0], [193.0, 14.0], [199.0, 10.0], [198.0, 10.0], [194.0, 10.0], [192.0, 12.0], [196.0, 10.0], [203.0, 10.0], [201.0, 10.0], [200.0, 10.0], [205.0, 11.0], [202.0, 10.0], [204.0, 10.0], [206.0, 11.0], [215.0, 33.0], [212.0, 14.0], [219.0, 30.0], [97.0, 10.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 219.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 32.0, "maxY": 33.0, "series": [{"data": [[32.0, 27.5], [197.0, 10.0], [193.0, 14.0], [199.0, 10.0], [198.0, 10.0], [194.0, 10.0], [192.0, 12.0], [196.0, 10.0], [203.0, 10.0], [201.0, 10.0], [200.0, 10.0], [205.0, 11.0], [202.0, 10.0], [204.0, 10.0], [206.0, 11.0], [215.0, 33.0], [212.0, 14.0], [219.0, 30.0], [97.0, 10.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 219.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.731745289E12, "maxY": 219.0, "series": [{"data": [[1.731745326E12, 201.0], [1.731745367E12, 199.0], [1.731745375E12, 202.0], [1.731745289E12, 39.0], [1.73174533E12, 194.0], [1.731745371E12, 200.0], [1.731745338E12, 198.0], [1.731745379E12, 201.0], [1.731745293E12, 210.0], [1.731745334E12, 202.0], [1.731745301E12, 204.0], [1.731745342E12, 201.0], [1.731745383E12, 201.0], [1.731745297E12, 198.0], [1.731745391E12, 197.0], [1.731745305E12, 199.0], [1.731745346E12, 199.0], [1.731745387E12, 203.0], [1.731745354E12, 199.0], [1.731745395E12, 201.0], [1.731745309E12, 198.0], [1.73174535E12, 201.0], [1.731745317E12, 202.0], [1.731745358E12, 200.0], [1.731745399E12, 200.0], [1.731745313E12, 199.0], [1.731745407E12, 199.0], [1.731745321E12, 202.0], [1.731745362E12, 202.0], [1.731745403E12, 200.0], [1.731745327E12, 197.0], [1.731745368E12, 200.0], [1.731745409E12, 94.0], [1.731745323E12, 199.0], [1.731745376E12, 198.0], [1.73174529E12, 219.0], [1.731745331E12, 205.0], [1.731745372E12, 198.0], [1.73174538E12, 198.0], [1.731745294E12, 204.0], [1.731745335E12, 199.0], [1.731745343E12, 198.0], [1.731745384E12, 200.0], [1.731745298E12, 200.0], [1.731745339E12, 201.0], [1.731745392E12, 203.0], [1.731745306E12, 201.0], [1.731745347E12, 202.0], [1.731745388E12, 200.0], [1.731745302E12, 201.0], [1.731745396E12, 198.0], [1.73174531E12, 205.0], [1.731745351E12, 200.0], [1.731745359E12, 202.0], [1.7317454E12, 198.0], [1.731745314E12, 201.0], [1.731745355E12, 197.0], [1.731745408E12, 202.0], [1.731745322E12, 199.0], [1.731745363E12, 197.0], [1.731745404E12, 200.0], [1.731745318E12, 201.0], [1.731745328E12, 200.0], [1.731745369E12, 202.0], [1.731745324E12, 199.0], [1.731745332E12, 201.0], [1.731745373E12, 201.0], [1.731745381E12, 199.0], [1.731745295E12, 202.0], [1.731745336E12, 201.0], [1.731745377E12, 200.0], [1.731745291E12, 215.0], [1.731745344E12, 201.0], [1.731745385E12, 198.0], [1.731745299E12, 200.0], [1.73174534E12, 202.0], [1.731745348E12, 199.0], [1.731745389E12, 201.0], [1.731745303E12, 201.0], [1.731745397E12, 201.0], [1.731745311E12, 199.0], [1.731745352E12, 199.0], [1.731745393E12, 200.0], [1.731745307E12, 199.0], [1.73174536E12, 194.0], [1.731745401E12, 201.0], [1.731745315E12, 198.0], [1.731745356E12, 200.0], [1.731745364E12, 201.0], [1.731745405E12, 200.0], [1.731745319E12, 198.0], [1.73174537E12, 200.0], [1.731745325E12, 203.0], [1.731745366E12, 200.0], [1.731745333E12, 200.0], [1.731745374E12, 199.0], [1.731745329E12, 201.0], [1.731745296E12, 201.0], [1.731745337E12, 199.0], [1.731745378E12, 200.0], [1.731745292E12, 216.0], [1.731745386E12, 198.0], [1.7317453E12, 194.0], [1.731745341E12, 199.0], [1.731745382E12, 200.0], [1.731745349E12, 199.0], [1.73174539E12, 203.0], [1.731745304E12, 201.0], [1.731745345E12, 201.0], [1.731745312E12, 201.0], [1.731745353E12, 200.0], [1.731745394E12, 199.0], [1.731745308E12, 197.0], [1.731745402E12, 201.0], [1.731745316E12, 200.0], [1.731745357E12, 203.0], [1.731745398E12, 201.0], [1.731745365E12, 201.0], [1.731745406E12, 199.0], [1.73174532E12, 200.0], [1.731745361E12, 204.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745409E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.731745289E12, "maxY": 219.0, "series": [{"data": [[1.731745326E12, 201.0], [1.731745367E12, 200.0], [1.731745375E12, 202.0], [1.731745289E12, 32.0], [1.73174533E12, 194.0], [1.731745371E12, 200.0], [1.731745338E12, 198.0], [1.731745379E12, 202.0], [1.731745293E12, 212.0], [1.731745334E12, 202.0], [1.731745301E12, 205.0], [1.731745342E12, 201.0], [1.731745383E12, 201.0], [1.731745297E12, 197.0], [1.731745391E12, 198.0], [1.731745305E12, 199.0], [1.731745346E12, 199.0], [1.731745387E12, 203.0], [1.731745354E12, 198.0], [1.731745395E12, 201.0], [1.731745309E12, 197.0], [1.73174535E12, 201.0], [1.731745317E12, 204.0], [1.731745358E12, 201.0], [1.731745399E12, 200.0], [1.731745313E12, 200.0], [1.731745407E12, 199.0], [1.731745321E12, 201.0], [1.731745362E12, 202.0], [1.731745403E12, 200.0], [1.731745327E12, 197.0], [1.731745368E12, 200.0], [1.731745409E12, 97.0], [1.731745323E12, 200.0], [1.731745376E12, 198.0], [1.73174529E12, 219.0], [1.731745331E12, 205.0], [1.731745372E12, 197.0], [1.73174538E12, 198.0], [1.731745294E12, 203.0], [1.731745335E12, 199.0], [1.731745343E12, 199.0], [1.731745384E12, 199.0], [1.731745298E12, 201.0], [1.731745339E12, 200.0], [1.731745392E12, 202.0], [1.731745306E12, 200.0], [1.731745347E12, 202.0], [1.731745388E12, 200.0], [1.731745302E12, 201.0], [1.731745396E12, 198.0], [1.73174531E12, 205.0], [1.731745351E12, 200.0], [1.731745359E12, 202.0], [1.7317454E12, 198.0], [1.731745314E12, 201.0], [1.731745355E12, 198.0], [1.731745408E12, 201.0], [1.731745322E12, 199.0], [1.731745363E12, 196.0], [1.731745404E12, 200.0], [1.731745318E12, 199.0], [1.731745328E12, 200.0], [1.731745369E12, 201.0], [1.731745324E12, 198.0], [1.731745332E12, 201.0], [1.731745373E12, 202.0], [1.731745381E12, 199.0], [1.731745295E12, 203.0], [1.731745336E12, 201.0], [1.731745377E12, 200.0], [1.731745291E12, 215.0], [1.731745344E12, 200.0], [1.731745385E12, 199.0], [1.731745299E12, 200.0], [1.73174534E12, 203.0], [1.731745348E12, 199.0], [1.731745389E12, 202.0], [1.731745303E12, 200.0], [1.731745397E12, 202.0], [1.731745311E12, 200.0], [1.731745352E12, 199.0], [1.731745393E12, 200.0], [1.731745307E12, 200.0], [1.73174536E12, 192.0], [1.731745401E12, 201.0], [1.731745315E12, 197.0], [1.731745356E12, 200.0], [1.731745364E12, 202.0], [1.731745405E12, 200.0], [1.731745319E12, 199.0], [1.73174537E12, 201.0], [1.731745325E12, 204.0], [1.731745366E12, 199.0], [1.731745333E12, 200.0], [1.731745374E12, 199.0], [1.731745329E12, 201.0], [1.731745296E12, 201.0], [1.731745337E12, 199.0], [1.731745378E12, 199.0], [1.731745292E12, 219.0], [1.731745386E12, 197.0], [1.7317453E12, 193.0], [1.731745341E12, 199.0], [1.731745382E12, 200.0], [1.731745349E12, 199.0], [1.73174539E12, 203.0], [1.731745304E12, 202.0], [1.731745345E12, 201.0], [1.731745312E12, 200.0], [1.731745353E12, 200.0], [1.731745394E12, 199.0], [1.731745308E12, 197.0], [1.731745402E12, 201.0], [1.731745316E12, 200.0], [1.731745357E12, 202.0], [1.731745398E12, 200.0], [1.731745365E12, 201.0], [1.731745406E12, 199.0], [1.73174532E12, 200.0], [1.731745361E12, 206.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745409E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.731745289E12, "maxY": 219.0, "series": [{"data": [[1.731745326E12, 201.0], [1.731745367E12, 200.0], [1.731745375E12, 202.0], [1.731745289E12, 32.0], [1.73174533E12, 194.0], [1.731745371E12, 200.0], [1.731745338E12, 198.0], [1.731745379E12, 202.0], [1.731745293E12, 212.0], [1.731745334E12, 202.0], [1.731745301E12, 205.0], [1.731745342E12, 201.0], [1.731745383E12, 201.0], [1.731745297E12, 197.0], [1.731745391E12, 198.0], [1.731745305E12, 199.0], [1.731745346E12, 199.0], [1.731745387E12, 203.0], [1.731745354E12, 198.0], [1.731745395E12, 201.0], [1.731745309E12, 197.0], [1.73174535E12, 201.0], [1.731745317E12, 204.0], [1.731745358E12, 201.0], [1.731745399E12, 200.0], [1.731745313E12, 200.0], [1.731745407E12, 199.0], [1.731745321E12, 201.0], [1.731745362E12, 202.0], [1.731745403E12, 200.0], [1.731745327E12, 197.0], [1.731745368E12, 200.0], [1.731745409E12, 97.0], [1.731745323E12, 200.0], [1.731745376E12, 198.0], [1.73174529E12, 219.0], [1.731745331E12, 205.0], [1.731745372E12, 197.0], [1.73174538E12, 198.0], [1.731745294E12, 203.0], [1.731745335E12, 199.0], [1.731745343E12, 199.0], [1.731745384E12, 199.0], [1.731745298E12, 201.0], [1.731745339E12, 200.0], [1.731745392E12, 202.0], [1.731745306E12, 200.0], [1.731745347E12, 202.0], [1.731745388E12, 200.0], [1.731745302E12, 201.0], [1.731745396E12, 198.0], [1.73174531E12, 205.0], [1.731745351E12, 200.0], [1.731745359E12, 202.0], [1.7317454E12, 198.0], [1.731745314E12, 201.0], [1.731745355E12, 198.0], [1.731745408E12, 201.0], [1.731745322E12, 199.0], [1.731745363E12, 196.0], [1.731745404E12, 200.0], [1.731745318E12, 199.0], [1.731745328E12, 200.0], [1.731745369E12, 201.0], [1.731745324E12, 198.0], [1.731745332E12, 201.0], [1.731745373E12, 202.0], [1.731745381E12, 199.0], [1.731745295E12, 203.0], [1.731745336E12, 201.0], [1.731745377E12, 200.0], [1.731745291E12, 215.0], [1.731745344E12, 200.0], [1.731745385E12, 199.0], [1.731745299E12, 200.0], [1.73174534E12, 203.0], [1.731745348E12, 199.0], [1.731745389E12, 202.0], [1.731745303E12, 200.0], [1.731745397E12, 202.0], [1.731745311E12, 200.0], [1.731745352E12, 199.0], [1.731745393E12, 200.0], [1.731745307E12, 200.0], [1.73174536E12, 192.0], [1.731745401E12, 201.0], [1.731745315E12, 197.0], [1.731745356E12, 200.0], [1.731745364E12, 202.0], [1.731745405E12, 200.0], [1.731745319E12, 199.0], [1.73174537E12, 201.0], [1.731745325E12, 204.0], [1.731745366E12, 199.0], [1.731745333E12, 200.0], [1.731745374E12, 199.0], [1.731745329E12, 201.0], [1.731745296E12, 201.0], [1.731745337E12, 199.0], [1.731745378E12, 199.0], [1.731745292E12, 219.0], [1.731745386E12, 197.0], [1.7317453E12, 193.0], [1.731745341E12, 199.0], [1.731745382E12, 200.0], [1.731745349E12, 199.0], [1.73174539E12, 203.0], [1.731745304E12, 202.0], [1.731745345E12, 201.0], [1.731745312E12, 200.0], [1.731745353E12, 200.0], [1.731745394E12, 199.0], [1.731745308E12, 197.0], [1.731745402E12, 201.0], [1.731745316E12, 200.0], [1.731745357E12, 202.0], [1.731745398E12, 200.0], [1.731745365E12, 201.0], [1.731745406E12, 199.0], [1.73174532E12, 200.0], [1.731745361E12, 206.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745409E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.731745289E12, "maxY": 219.0, "series": [{"data": [[1.731745326E12, 201.0], [1.731745367E12, 200.0], [1.731745375E12, 202.0], [1.731745289E12, 32.0], [1.73174533E12, 194.0], [1.731745371E12, 200.0], [1.731745338E12, 198.0], [1.731745379E12, 202.0], [1.731745293E12, 212.0], [1.731745334E12, 202.0], [1.731745301E12, 205.0], [1.731745342E12, 201.0], [1.731745383E12, 201.0], [1.731745297E12, 197.0], [1.731745391E12, 198.0], [1.731745305E12, 199.0], [1.731745346E12, 199.0], [1.731745387E12, 203.0], [1.731745354E12, 198.0], [1.731745395E12, 201.0], [1.731745309E12, 197.0], [1.73174535E12, 201.0], [1.731745317E12, 204.0], [1.731745358E12, 201.0], [1.731745399E12, 200.0], [1.731745313E12, 200.0], [1.731745407E12, 199.0], [1.731745321E12, 201.0], [1.731745362E12, 202.0], [1.731745403E12, 200.0], [1.731745327E12, 197.0], [1.731745368E12, 200.0], [1.731745409E12, 97.0], [1.731745323E12, 200.0], [1.731745376E12, 198.0], [1.73174529E12, 219.0], [1.731745331E12, 205.0], [1.731745372E12, 197.0], [1.73174538E12, 198.0], [1.731745294E12, 203.0], [1.731745335E12, 199.0], [1.731745343E12, 199.0], [1.731745384E12, 199.0], [1.731745298E12, 201.0], [1.731745339E12, 200.0], [1.731745392E12, 202.0], [1.731745306E12, 200.0], [1.731745347E12, 202.0], [1.731745388E12, 200.0], [1.731745302E12, 201.0], [1.731745396E12, 198.0], [1.73174531E12, 205.0], [1.731745351E12, 200.0], [1.731745359E12, 202.0], [1.7317454E12, 198.0], [1.731745314E12, 201.0], [1.731745355E12, 198.0], [1.731745408E12, 201.0], [1.731745322E12, 199.0], [1.731745363E12, 196.0], [1.731745404E12, 200.0], [1.731745318E12, 199.0], [1.731745328E12, 200.0], [1.731745369E12, 201.0], [1.731745324E12, 198.0], [1.731745332E12, 201.0], [1.731745373E12, 202.0], [1.731745381E12, 199.0], [1.731745295E12, 203.0], [1.731745336E12, 201.0], [1.731745377E12, 200.0], [1.731745291E12, 215.0], [1.731745344E12, 200.0], [1.731745385E12, 199.0], [1.731745299E12, 200.0], [1.73174534E12, 203.0], [1.731745348E12, 199.0], [1.731745389E12, 202.0], [1.731745303E12, 200.0], [1.731745397E12, 202.0], [1.731745311E12, 200.0], [1.731745352E12, 199.0], [1.731745393E12, 200.0], [1.731745307E12, 200.0], [1.73174536E12, 192.0], [1.731745401E12, 201.0], [1.731745315E12, 197.0], [1.731745356E12, 200.0], [1.731745364E12, 202.0], [1.731745405E12, 200.0], [1.731745319E12, 199.0], [1.73174537E12, 201.0], [1.731745325E12, 204.0], [1.731745366E12, 199.0], [1.731745333E12, 200.0], [1.731745374E12, 199.0], [1.731745329E12, 201.0], [1.731745296E12, 201.0], [1.731745337E12, 199.0], [1.731745378E12, 199.0], [1.731745292E12, 219.0], [1.731745386E12, 197.0], [1.7317453E12, 193.0], [1.731745341E12, 199.0], [1.731745382E12, 200.0], [1.731745349E12, 199.0], [1.73174539E12, 203.0], [1.731745304E12, 202.0], [1.731745345E12, 201.0], [1.731745312E12, 200.0], [1.731745353E12, 200.0], [1.731745394E12, 199.0], [1.731745308E12, 197.0], [1.731745402E12, 201.0], [1.731745316E12, 200.0], [1.731745357E12, 202.0], [1.731745398E12, 200.0], [1.731745365E12, 201.0], [1.731745406E12, 199.0], [1.73174532E12, 200.0], [1.731745361E12, 206.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745409E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

