/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1052.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 8.0], [0.3, 8.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 8.0], [4.0, 8.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 8.0], [17.8, 8.0], [17.9, 8.0], [18.0, 8.0], [18.1, 8.0], [18.2, 8.0], [18.3, 8.0], [18.4, 8.0], [18.5, 8.0], [18.6, 8.0], [18.7, 8.0], [18.8, 8.0], [18.9, 8.0], [19.0, 8.0], [19.1, 8.0], [19.2, 8.0], [19.3, 8.0], [19.4, 8.0], [19.5, 8.0], [19.6, 8.0], [19.7, 8.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 8.0], [25.7, 8.0], [25.8, 8.0], [25.9, 8.0], [26.0, 8.0], [26.1, 8.0], [26.2, 8.0], [26.3, 8.0], [26.4, 8.0], [26.5, 8.0], [26.6, 8.0], [26.7, 8.0], [26.8, 8.0], [26.9, 8.0], [27.0, 8.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 8.0], [29.7, 8.0], [29.8, 8.0], [29.9, 8.0], [30.0, 8.0], [30.1, 8.0], [30.2, 8.0], [30.3, 8.0], [30.4, 8.0], [30.5, 8.0], [30.6, 8.0], [30.7, 8.0], [30.8, 8.0], [30.9, 8.0], [31.0, 8.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 9.0], [40.4, 9.0], [40.5, 9.0], [40.6, 9.0], [40.7, 9.0], [40.8, 9.0], [40.9, 9.0], [41.0, 9.0], [41.1, 9.0], [41.2, 9.0], [41.3, 9.0], [41.4, 9.0], [41.5, 9.0], [41.6, 9.0], [41.7, 9.0], [41.8, 9.0], [41.9, 9.0], [42.0, 9.0], [42.1, 9.0], [42.2, 9.0], [42.3, 9.0], [42.4, 9.0], [42.5, 9.0], [42.6, 9.0], [42.7, 9.0], [42.8, 9.0], [42.9, 9.0], [43.0, 9.0], [43.1, 9.0], [43.2, 9.0], [43.3, 9.0], [43.4, 9.0], [43.5, 9.0], [43.6, 9.0], [43.7, 9.0], [43.8, 9.0], [43.9, 9.0], [44.0, 9.0], [44.1, 9.0], [44.2, 9.0], [44.3, 9.0], [44.4, 9.0], [44.5, 9.0], [44.6, 9.0], [44.7, 9.0], [44.8, 9.0], [44.9, 9.0], [45.0, 9.0], [45.1, 9.0], [45.2, 9.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 9.0], [45.8, 9.0], [45.9, 9.0], [46.0, 9.0], [46.1, 9.0], [46.2, 9.0], [46.3, 9.0], [46.4, 9.0], [46.5, 9.0], [46.6, 9.0], [46.7, 9.0], [46.8, 9.0], [46.9, 9.0], [47.0, 9.0], [47.1, 9.0], [47.2, 9.0], [47.3, 9.0], [47.4, 9.0], [47.5, 9.0], [47.6, 9.0], [47.7, 9.0], [47.8, 9.0], [47.9, 9.0], [48.0, 9.0], [48.1, 9.0], [48.2, 9.0], [48.3, 9.0], [48.4, 9.0], [48.5, 9.0], [48.6, 9.0], [48.7, 9.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 9.0], [50.8, 9.0], [50.9, 9.0], [51.0, 9.0], [51.1, 9.0], [51.2, 9.0], [51.3, 9.0], [51.4, 9.0], [51.5, 9.0], [51.6, 9.0], [51.7, 9.0], [51.8, 9.0], [51.9, 9.0], [52.0, 9.0], [52.1, 9.0], [52.2, 9.0], [52.3, 9.0], [52.4, 9.0], [52.5, 9.0], [52.6, 9.0], [52.7, 9.0], [52.8, 9.0], [52.9, 9.0], [53.0, 9.0], [53.1, 9.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 9.0], [62.9, 9.0], [63.0, 9.0], [63.1, 9.0], [63.2, 9.0], [63.3, 9.0], [63.4, 9.0], [63.5, 9.0], [63.6, 9.0], [63.7, 9.0], [63.8, 9.0], [63.9, 9.0], [64.0, 9.0], [64.1, 9.0], [64.2, 9.0], [64.3, 9.0], [64.4, 9.0], [64.5, 9.0], [64.6, 9.0], [64.7, 9.0], [64.8, 9.0], [64.9, 9.0], [65.0, 9.0], [65.1, 9.0], [65.2, 9.0], [65.3, 9.0], [65.4, 9.0], [65.5, 9.0], [65.6, 9.0], [65.7, 9.0], [65.8, 9.0], [65.9, 9.0], [66.0, 9.0], [66.1, 9.0], [66.2, 9.0], [66.3, 9.0], [66.4, 9.0], [66.5, 9.0], [66.6, 9.0], [66.7, 9.0], [66.8, 9.0], [66.9, 9.0], [67.0, 9.0], [67.1, 9.0], [67.2, 9.0], [67.3, 9.0], [67.4, 9.0], [67.5, 9.0], [67.6, 9.0], [67.7, 9.0], [67.8, 9.0], [67.9, 9.0], [68.0, 9.0], [68.1, 9.0], [68.2, 9.0], [68.3, 9.0], [68.4, 9.0], [68.5, 9.0], [68.6, 9.0], [68.7, 9.0], [68.8, 9.0], [68.9, 9.0], [69.0, 9.0], [69.1, 9.0], [69.2, 9.0], [69.3, 9.0], [69.4, 9.0], [69.5, 9.0], [69.6, 9.0], [69.7, 9.0], [69.8, 9.0], [69.9, 9.0], [70.0, 9.0], [70.1, 9.0], [70.2, 9.0], [70.3, 9.0], [70.4, 9.0], [70.5, 9.0], [70.6, 9.0], [70.7, 9.0], [70.8, 9.0], [70.9, 9.0], [71.0, 9.0], [71.1, 10.0], [71.2, 10.0], [71.3, 10.0], [71.4, 10.0], [71.5, 10.0], [71.6, 10.0], [71.7, 10.0], [71.8, 10.0], [71.9, 10.0], [72.0, 10.0], [72.1, 10.0], [72.2, 10.0], [72.3, 10.0], [72.4, 10.0], [72.5, 10.0], [72.6, 10.0], [72.7, 10.0], [72.8, 10.0], [72.9, 10.0], [73.0, 10.0], [73.1, 10.0], [73.2, 10.0], [73.3, 10.0], [73.4, 10.0], [73.5, 10.0], [73.6, 10.0], [73.7, 10.0], [73.8, 10.0], [73.9, 11.0], [74.0, 11.0], [74.1, 11.0], [74.2, 11.0], [74.3, 11.0], [74.4, 11.0], [74.5, 11.0], [74.6, 11.0], [74.7, 11.0], [74.8, 11.0], [74.9, 11.0], [75.0, 11.0], [75.1, 11.0], [75.2, 11.0], [75.3, 11.0], [75.4, 11.0], [75.5, 11.0], [75.6, 11.0], [75.7, 11.0], [75.8, 11.0], [75.9, 11.0], [76.0, 11.0], [76.1, 11.0], [76.2, 11.0], [76.3, 11.0], [76.4, 11.0], [76.5, 11.0], [76.6, 11.0], [76.7, 11.0], [76.8, 11.0], [76.9, 12.0], [77.0, 12.0], [77.1, 12.0], [77.2, 12.0], [77.3, 12.0], [77.4, 12.0], [77.5, 12.0], [77.6, 12.0], [77.7, 12.0], [77.8, 12.0], [77.9, 12.0], [78.0, 12.0], [78.1, 12.0], [78.2, 12.0], [78.3, 12.0], [78.4, 12.0], [78.5, 12.0], [78.6, 12.0], [78.7, 12.0], [78.8, 12.0], [78.9, 12.0], [79.0, 12.0], [79.1, 12.0], [79.2, 12.0], [79.3, 12.0], [79.4, 12.0], [79.5, 12.0], [79.6, 12.0], [79.7, 12.0], [79.8, 12.0], [79.9, 12.0], [80.0, 12.0], [80.1, 12.0], [80.2, 12.0], [80.3, 12.0], [80.4, 12.0], [80.5, 12.0], [80.6, 12.0], [80.7, 12.0], [80.8, 12.0], [80.9, 12.0], [81.0, 12.0], [81.1, 12.0], [81.2, 12.0], [81.3, 12.0], [81.4, 12.0], [81.5, 12.0], [81.6, 12.0], [81.7, 12.0], [81.8, 12.0], [81.9, 12.0], [82.0, 12.0], [82.1, 12.0], [82.2, 12.0], [82.3, 12.0], [82.4, 12.0], [82.5, 12.0], [82.6, 12.0], [82.7, 12.0], [82.8, 12.0], [82.9, 12.0], [83.0, 13.0], [83.1, 13.0], [83.2, 13.0], [83.3, 13.0], [83.4, 13.0], [83.5, 13.0], [83.6, 13.0], [83.7, 13.0], [83.8, 13.0], [83.9, 13.0], [84.0, 13.0], [84.1, 13.0], [84.2, 13.0], [84.3, 13.0], [84.4, 13.0], [84.5, 13.0], [84.6, 13.0], [84.7, 13.0], [84.8, 14.0], [84.9, 14.0], [85.0, 14.0], [85.1, 14.0], [85.2, 14.0], [85.3, 14.0], [85.4, 14.0], [85.5, 14.0], [85.6, 14.0], [85.7, 14.0], [85.8, 14.0], [85.9, 14.0], [86.0, 14.0], [86.1, 14.0], [86.2, 14.0], [86.3, 15.0], [86.4, 15.0], [86.5, 15.0], [86.6, 15.0], [86.7, 15.0], [86.8, 15.0], [86.9, 15.0], [87.0, 15.0], [87.1, 15.0], [87.2, 15.0], [87.3, 15.0], [87.4, 15.0], [87.5, 15.0], [87.6, 15.0], [87.7, 15.0], [87.8, 15.0], [87.9, 15.0], [88.0, 15.0], [88.1, 15.0], [88.2, 15.0], [88.3, 15.0], [88.4, 15.0], [88.5, 15.0], [88.6, 15.0], [88.7, 15.0], [88.8, 15.0], [88.9, 15.0], [89.0, 15.0], [89.1, 15.0], [89.2, 15.0], [89.3, 15.0], [89.4, 15.0], [89.5, 15.0], [89.6, 15.0], [89.7, 15.0], [89.8, 15.0], [89.9, 15.0], [90.0, 15.0], [90.1, 15.0], [90.2, 15.0], [90.3, 16.0], [90.4, 16.0], [90.5, 16.0], [90.6, 16.0], [90.7, 16.0], [90.8, 16.0], [90.9, 16.0], [91.0, 16.0], [91.1, 16.0], [91.2, 16.0], [91.3, 16.0], [91.4, 16.0], [91.5, 16.0], [91.6, 16.0], [91.7, 16.0], [91.8, 16.0], [91.9, 16.0], [92.0, 16.0], [92.1, 17.0], [92.2, 17.0], [92.3, 17.0], [92.4, 17.0], [92.5, 17.0], [92.6, 17.0], [92.7, 17.0], [92.8, 17.0], [92.9, 17.0], [93.0, 18.0], [93.1, 18.0], [93.2, 18.0], [93.3, 18.0], [93.4, 18.0], [93.5, 18.0], [93.6, 18.0], [93.7, 18.0], [93.8, 18.0], [93.9, 18.0], [94.0, 19.0], [94.1, 19.0], [94.2, 19.0], [94.3, 19.0], [94.4, 19.0], [94.5, 19.0], [94.6, 19.0], [94.7, 19.0], [94.8, 19.0], [94.9, 19.0], [95.0, 19.0], [95.1, 19.0], [95.2, 20.0], [95.3, 20.0], [95.4, 20.0], [95.5, 20.0], [95.6, 20.0], [95.7, 20.0], [95.8, 21.0], [95.9, 21.0], [96.0, 21.0], [96.1, 21.0], [96.2, 21.0], [96.3, 21.0], [96.4, 22.0], [96.5, 22.0], [96.6, 22.0], [96.7, 22.0], [96.8, 22.0], [96.9, 22.0], [97.0, 23.0], [97.1, 23.0], [97.2, 23.0], [97.3, 23.0], [97.4, 24.0], [97.5, 24.0], [97.6, 24.0], [97.7, 25.0], [97.8, 25.0], [97.9, 25.0], [98.0, 26.0], [98.1, 26.0], [98.2, 27.0], [98.3, 27.0], [98.4, 27.0], [98.5, 28.0], [98.6, 28.0], [98.7, 29.0], [98.8, 29.0], [98.9, 30.0], [99.0, 31.0], [99.1, 32.0], [99.2, 34.0], [99.3, 36.0], [99.4, 41.0], [99.5, 67.0], [99.6, 1018.0], [99.7, 1023.0], [99.8, 1031.0], [99.9, 1038.0], [100.0, 1052.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 119.0, "minX": 0.0, "maxY": 23881.0, "series": [{"data": [[0.0, 23881.0], [1000.0, 119.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 119.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 23881.0, "series": [{"data": [[0.0, 23881.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 119.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.8592964824120604, "minX": 1.731745068E12, "maxY": 8.819095477386925, "series": [{"data": [[1.731745072E12, 1.9999999999999991], [1.731745113E12, 1.9203980099502487], [1.731745154E12, 1.9200000000000004], [1.731745068E12, 6.104294478527609], [1.731745162E12, 1.9250000000000003], [1.731745076E12, 1.9045226130653268], [1.731745117E12, 5.683962264150941], [1.731745158E12, 1.9452736318407964], [1.731745125E12, 8.471590909090908], [1.731745166E12, 1.9754901960784312], [1.73174508E12, 4.088541666666665], [1.731745121E12, 6.010050251256284], [1.731745088E12, 3.18340611353712], [1.731745129E12, 6.098360655737702], [1.73174517E12, 1.9393939393939401], [1.731745084E12, 5.903553299492386], [1.731745178E12, 2.009900990099008], [1.731745092E12, 1.923857868020305], [1.731745133E12, 2.766816143497759], [1.731745174E12, 1.9343434343434345], [1.731745141E12, 1.9705882352941182], [1.731745182E12, 1.916256157635468], [1.731745096E12, 1.8793969849246237], [1.731745137E12, 1.9494949494949487], [1.731745104E12, 5.836909871244636], [1.731745145E12, 1.949238578680203], [1.731745186E12, 1.9095477386934667], [1.7317451E12, 1.9356435643564351], [1.731745108E12, 8.618025751072961], [1.731745149E12, 1.9040404040404044], [1.731745114E12, 1.914572864321608], [1.731745155E12, 1.9250000000000003], [1.731745069E12, 5.42436974789916], [1.73174511E12, 2.2216981132075464], [1.731745077E12, 1.9449999999999994], [1.731745118E12, 5.1999999999999975], [1.731745159E12, 1.904040404040404], [1.731745073E12, 2.024999999999999], [1.731745167E12, 1.9353233830845769], [1.731745081E12, 6.183544303797471], [1.731745122E12, 8.302083333333336], [1.731745163E12, 1.984999999999999], [1.73174513E12, 3.9738219895287945], [1.731745171E12, 1.9099999999999997], [1.731745085E12, 6.683417085427131], [1.731745126E12, 8.819095477386925], [1.731745093E12, 1.930348258706467], [1.731745134E12, 1.9648241206030161], [1.731745175E12, 1.9848484848484844], [1.731745089E12, 1.9646464646464648], [1.731745183E12, 1.95], [1.731745097E12, 1.9141414141414133], [1.731745138E12, 1.9253731343283593], [1.731745179E12, 1.889447236180905], [1.731745146E12, 1.9359605911330051], [1.731745187E12, 1.8612716763005777], [1.731745101E12, 1.8899999999999995], [1.731745142E12, 1.9090909090909094], [1.731745109E12, 5.722656250000003], [1.73174515E12, 1.9999999999999993], [1.731745105E12, 5.810344827586206], [1.73174507E12, 3.070796460176991], [1.731745156E12, 1.8592964824120604], [1.731745111E12, 1.9597989949748746], [1.731745119E12, 4.976190476190477], [1.731745074E12, 1.9149999999999996], [1.73174516E12, 1.939393939393939], [1.731745115E12, 2.231707317073172], [1.731745082E12, 7.246636771300446], [1.731745168E12, 1.934673366834171], [1.731745123E12, 6.511627906976745], [1.731745078E12, 1.9633507853403156], [1.731745164E12, 1.9353233830845769], [1.731745086E12, 5.635467980295568], [1.731745172E12, 1.980099502487561], [1.731745127E12, 8.51999999999999], [1.731745135E12, 1.9797979797979806], [1.73174509E12, 1.970297029702971], [1.731745176E12, 1.9000000000000001], [1.731745131E12, 5.613496932515337], [1.731745098E12, 1.911330049261084], [1.731745184E12, 1.863636363636363], [1.731745139E12, 1.9203980099502485], [1.731745094E12, 1.9246231155778892], [1.73174518E12, 2.0518134715025913], [1.731745102E12, 3.30817610062893], [1.731745143E12, 1.9257425742574263], [1.731745151E12, 1.9145728643216082], [1.731745106E12, 6.392857142857142], [1.731745147E12, 1.9444444444444435], [1.731745071E12, 1.990099009900991], [1.731745157E12, 1.9158415841584158], [1.731745112E12, 1.905940594059406], [1.731745153E12, 1.969849246231155], [1.73174512E12, 6.479591836734696], [1.731745075E12, 1.9653465346534653], [1.731745161E12, 1.8960396039603966], [1.731745116E12, 5.775280898876402], [1.731745124E12, 7.950450450450454], [1.731745079E12, 3.288888888888888], [1.731745165E12, 1.9692307692307696], [1.731745087E12, 5.688311688311691], [1.731745173E12, 1.9801980198019795], [1.731745128E12, 6.108108108108111], [1.731745083E12, 5.873737373737372], [1.731745169E12, 1.905], [1.731745136E12, 1.9408866995073883], [1.731745091E12, 1.9104477611940296], [1.731745177E12, 1.9603960396039588], [1.731745132E12, 6.461538461538466], [1.73174514E12, 1.9336734693877562], [1.731745095E12, 1.9310344827586206], [1.731745181E12, 2.141463414634145], [1.731745103E12, 5.698224852071001], [1.731745144E12, 1.9149999999999994], [1.731745099E12, 1.8888888888888893], [1.731745185E12, 1.904522613065326], [1.731745152E12, 1.9303482587064682], [1.731745107E12, 6.576642335766424], [1.731745148E12, 1.9455445544554446]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745187E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.740548554484796, "minX": 1.0, "maxY": 39.07644628099171, "series": [{"data": [[4.0, 20.763341067285367], [8.0, 34.43101604278079], [2.0, 9.087840141853576], [1.0, 8.740548554484796], [9.0, 39.07644628099171], [5.0, 29.77537796976239], [10.0, 17.879310344827594], [6.0, 26.217309501411098], [3.0, 12.468677494199534], [7.0, 37.83113673805599]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[3.2460000000000027, 15.41229166666653]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33857.0, "minX": 1.731745068E12, "maxY": 484751.0, "series": [{"data": [[1.731745072E12, 377952.0], [1.731745113E12, 386720.0], [1.731745154E12, 380647.0], [1.731745068E12, 313361.0], [1.731745162E12, 375874.0], [1.731745076E12, 367881.0], [1.731745117E12, 396859.0], [1.731745158E12, 389036.0], [1.731745125E12, 333451.0], [1.731745166E12, 373801.0], [1.73174508E12, 375842.0], [1.731745121E12, 385802.0], [1.731745088E12, 443113.0], [1.731745129E12, 466198.0], [1.73174517E12, 386051.0], [1.731745084E12, 368705.0], [1.731745178E12, 391453.0], [1.731745092E12, 376913.0], [1.731745133E12, 431845.0], [1.731745174E12, 377027.0], [1.731745141E12, 374128.0], [1.731745182E12, 379773.0], [1.731745096E12, 363031.0], [1.731745137E12, 378417.0], [1.731745104E12, 451097.0], [1.731745145E12, 383872.0], [1.731745186E12, 361024.0], [1.7317451E12, 395002.0], [1.731745108E12, 440888.0], [1.731745149E12, 375833.0], [1.731745114E12, 377201.0], [1.731745155E12, 390376.0], [1.731745069E12, 450080.0], [1.73174511E12, 414460.0], [1.731745077E12, 379531.0], [1.731745118E12, 430190.0], [1.731745159E12, 377819.0], [1.731745073E12, 386709.0], [1.731745167E12, 376819.0], [1.731745081E12, 286879.0], [1.731745122E12, 363472.0], [1.731745163E12, 389428.0], [1.73174513E12, 362852.0], [1.731745171E12, 366949.0], [1.731745085E12, 376677.0], [1.731745126E12, 388109.0], [1.731745093E12, 388089.0], [1.731745134E12, 376964.0], [1.731745175E12, 386303.0], [1.731745089E12, 377875.0], [1.731745183E12, 385492.0], [1.731745097E12, 378081.0], [1.731745138E12, 385250.0], [1.731745179E12, 381364.0], [1.731745146E12, 372301.0], [1.731745187E12, 327571.0], [1.731745101E12, 363472.0], [1.731745142E12, 377659.0], [1.731745109E12, 484751.0], [1.73174515E12, 392796.0], [1.731745105E12, 317574.0], [1.73174507E12, 435616.0], [1.731745156E12, 364108.0], [1.731745111E12, 360796.0], [1.731745119E12, 314522.0], [1.731745074E12, 384604.0], [1.73174516E12, 386457.0], [1.731745115E12, 319941.0], [1.731745082E12, 414574.0], [1.731745168E12, 387853.0], [1.731745123E12, 339081.0], [1.731745078E12, 371718.0], [1.731745164E12, 382850.0], [1.731745086E12, 385186.0], [1.731745172E12, 375810.0], [1.731745127E12, 464379.0], [1.731745135E12, 386793.0], [1.73174509E12, 390120.0], [1.731745176E12, 365890.0], [1.731745131E12, 301673.0], [1.731745098E12, 392268.0], [1.731745184E12, 381719.0], [1.731745139E12, 381443.0], [1.731745094E12, 377248.0], [1.73174518E12, 372887.0], [1.731745102E12, 300466.0], [1.731745143E12, 387424.0], [1.731745151E12, 365707.0], [1.731745106E12, 430155.0], [1.731745147E12, 374188.0], [1.731745071E12, 373375.0], [1.731745157E12, 380517.0], [1.731745112E12, 386410.0], [1.731745153E12, 384892.0], [1.73174512E12, 370778.0], [1.731745075E12, 384555.0], [1.731745161E12, 368647.0], [1.731745116E12, 323635.0], [1.731745124E12, 405826.0], [1.731745079E12, 342011.0], [1.731745165E12, 380390.0], [1.731745087E12, 436666.0], [1.731745173E12, 394011.0], [1.731745128E12, 360720.0], [1.731745083E12, 389873.0], [1.731745169E12, 380160.0], [1.731745136E12, 371504.0], [1.731745091E12, 366671.0], [1.731745177E12, 378070.0], [1.731745132E12, 466380.0], [1.73174514E12, 382458.0], [1.731745095E12, 394056.0], [1.731745181E12, 379207.0], [1.731745103E12, 326675.0], [1.731745144E12, 380037.0], [1.731745099E12, 373482.0], [1.731745185E12, 387866.0], [1.731745152E12, 379218.0], [1.731745107E12, 268091.0], [1.731745148E12, 391130.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.731745072E12, 50040.0], [1.731745113E12, 49822.0], [1.731745154E12, 49897.0], [1.731745068E12, 40338.0], [1.731745162E12, 50000.0], [1.731745076E12, 49658.0], [1.731745117E12, 52838.0], [1.731745158E12, 49987.0], [1.731745125E12, 43947.0], [1.731745166E12, 51007.0], [1.73174508E12, 47949.0], [1.731745121E12, 49639.0], [1.731745088E12, 56806.0], [1.731745129E12, 60916.0], [1.73174517E12, 49322.0], [1.731745084E12, 49282.0], [1.731745178E12, 50244.0], [1.731745092E12, 49234.0], [1.731745133E12, 55435.0], [1.731745174E12, 49416.0], [1.731745141E12, 50834.0], [1.731745182E12, 50579.0], [1.731745096E12, 49521.0], [1.731745137E12, 49353.0], [1.731745104E12, 58262.0], [1.731745145E12, 49225.0], [1.731745186E12, 49824.0], [1.7317451E12, 50631.0], [1.731745108E12, 57965.0], [1.731745149E12, 49368.0], [1.731745114E12, 49754.0], [1.731745155E12, 49906.0], [1.731745069E12, 59551.0], [1.73174511E12, 53095.0], [1.731745077E12, 50030.0], [1.731745118E12, 54769.0], [1.731745159E12, 49387.0], [1.731745073E12, 49515.0], [1.731745167E12, 50206.0], [1.731745081E12, 39409.0], [1.731745122E12, 47791.0], [1.731745163E12, 49699.0], [1.73174513E12, 47675.0], [1.731745171E12, 50081.0], [1.731745085E12, 49585.0], [1.731745126E12, 49342.0], [1.731745093E12, 49755.0], [1.731745134E12, 49688.0], [1.731745175E12, 49303.0], [1.731745089E12, 49395.0], [1.731745183E12, 49705.0], [1.731745097E12, 49526.0], [1.731745138E12, 50023.0], [1.731745179E12, 49555.0], [1.731745146E12, 50603.0], [1.731745187E12, 42978.0], [1.731745101E12, 49727.0], [1.731745142E12, 49378.0], [1.731745109E12, 64119.0], [1.73174515E12, 50523.0], [1.731745105E12, 43475.0], [1.73174507E12, 56405.0], [1.731745156E12, 49585.0], [1.731745111E12, 49438.0], [1.731745119E12, 41964.0], [1.731745074E12, 49961.0], [1.73174516E12, 49408.0], [1.731745115E12, 40830.0], [1.731745082E12, 55569.0], [1.731745168E12, 49413.0], [1.731745123E12, 43150.0], [1.731745078E12, 47230.0], [1.731745164E12, 50163.0], [1.731745086E12, 50678.0], [1.731745172E12, 50084.0], [1.731745127E12, 62539.0], [1.731745135E12, 49516.0], [1.73174509E12, 50630.0], [1.731745176E12, 50080.0], [1.731745131E12, 40669.0], [1.731745098E12, 50249.0], [1.731745184E12, 49342.0], [1.731745139E12, 50158.0], [1.731745094E12, 49700.0], [1.73174518E12, 48167.0], [1.731745102E12, 39737.0], [1.731745143E12, 50224.0], [1.731745151E12, 49513.0], [1.731745106E12, 55976.0], [1.731745147E12, 49380.0], [1.731745071E12, 50374.0], [1.731745157E12, 50485.0], [1.731745112E12, 50440.0], [1.731745153E12, 49490.0], [1.73174512E12, 48900.0], [1.731745075E12, 50439.0], [1.731745161E12, 50337.0], [1.731745116E12, 44568.0], [1.731745124E12, 55185.0], [1.731745079E12, 45060.0], [1.731745165E12, 48556.0], [1.731745087E12, 57711.0], [1.731745173E12, 50232.0], [1.731745128E12, 45909.0], [1.731745083E12, 49180.0], [1.731745169E12, 49912.0], [1.731745136E12, 50548.0], [1.731745091E12, 50078.0], [1.731745177E12, 50341.0], [1.731745132E12, 61755.0], [1.73174514E12, 49016.0], [1.731745095E12, 50864.0], [1.731745181E12, 51315.0], [1.731745103E12, 41827.0], [1.731745144E12, 49934.0], [1.731745099E12, 49471.0], [1.731745185E12, 49687.0], [1.731745152E12, 50205.0], [1.731745107E12, 33857.0], [1.731745148E12, 50251.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745187E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.708542713567835, "minX": 1.731745068E12, "maxY": 45.98712446351931, "series": [{"data": [[1.731745072E12, 9.414999999999994], [1.731745113E12, 8.8955223880597], [1.731745154E12, 8.889999999999999], [1.731745068E12, 16.631901840490794], [1.731745162E12, 8.989999999999995], [1.731745076E12, 8.849246231155771], [1.731745117E12, 32.60377358490564], [1.731745158E12, 9.228855721393035], [1.731745125E12, 39.91477272727273], [1.731745166E12, 9.181372549019612], [1.73174508E12, 16.270833333333336], [1.731745121E12, 31.190954773869347], [1.731745088E12, 13.371179039301316], [1.731745129E12, 30.12704918032785], [1.73174517E12, 9.38383838383839], [1.731745084E12, 26.21319796954314], [1.731745178E12, 9.376237623762377], [1.731745092E12, 9.137055837563453], [1.731745133E12, 12.33183856502242], [1.731745174E12, 9.237373737373746], [1.731745141E12, 9.166666666666671], [1.731745182E12, 8.852216748768464], [1.731745096E12, 8.733668341708546], [1.731745137E12, 9.161616161616166], [1.731745104E12, 29.70815450643776], [1.731745145E12, 9.406091370558379], [1.731745186E12, 8.723618090452263], [1.7317451E12, 9.059405940594058], [1.731745108E12, 45.98712446351931], [1.731745149E12, 9.095959595959597], [1.731745114E12, 8.944723618090448], [1.731745155E12, 9.090000000000003], [1.731745069E12, 30.756302521008383], [1.73174511E12, 9.811320754716986], [1.731745077E12, 9.140000000000008], [1.731745118E12, 24.20909090909091], [1.731745159E12, 8.84343434343434], [1.731745073E12, 9.550000000000002], [1.731745167E12, 9.134328358208956], [1.731745081E12, 29.544303797468366], [1.731745122E12, 40.81770833333329], [1.731745163E12, 9.364999999999991], [1.73174513E12, 15.596858638743454], [1.731745171E12, 8.909999999999995], [1.731745085E12, 32.11557788944723], [1.731745126E12, 41.71356783919601], [1.731745093E12, 9.069651741293532], [1.731745134E12, 9.361809045226126], [1.731745175E12, 9.51515151515151], [1.731745089E12, 9.388888888888884], [1.731745183E12, 9.309999999999993], [1.731745097E12, 9.136363636363637], [1.731745138E12, 9.099502487562182], [1.731745179E12, 8.824120603015075], [1.731745146E12, 8.985221674876854], [1.731745187E12, 8.843930635838143], [1.731745101E12, 8.750000000000007], [1.731745142E12, 9.065656565656559], [1.731745109E12, 29.082031250000004], [1.73174515E12, 9.490099009900986], [1.731745105E12, 28.160919540229873], [1.73174507E12, 13.075221238938058], [1.731745156E12, 8.708542713567835], [1.731745111E12, 8.919597989949741], [1.731745119E12, 21.714285714285715], [1.731745074E12, 8.959999999999997], [1.73174516E12, 9.237373737373735], [1.731745115E12, 9.109756097560984], [1.731745082E12, 36.23766816143498], [1.731745168E12, 9.221105527638189], [1.731745123E12, 30.168604651162788], [1.731745078E12, 9.193717277486915], [1.731745164E12, 9.124378109452739], [1.731745086E12, 30.837438423645327], [1.731745172E12, 9.388059701492539], [1.731745127E12, 43.715999999999994], [1.731745135E12, 9.500000000000009], [1.73174509E12, 9.16831683168317], [1.731745176E12, 9.004999999999997], [1.731745131E12, 23.134969325153378], [1.731745098E12, 8.87684729064039], [1.731745184E12, 8.863636363636363], [1.731745139E12, 8.875621890547256], [1.731745094E12, 8.9748743718593], [1.73174518E12, 10.000000000000002], [1.731745102E12, 8.77358490566038], [1.731745143E12, 9.034653465346532], [1.731745151E12, 8.939698492462313], [1.731745106E12, 31.73214285714288], [1.731745147E12, 9.101010101010106], [1.731745071E12, 9.396039603960403], [1.731745157E12, 8.925742574257427], [1.731745112E12, 8.92574257425743], [1.731745153E12, 9.321608040201], [1.73174512E12, 28.38775510204081], [1.731745075E12, 9.064356435643562], [1.731745161E12, 8.742574257425735], [1.731745116E12, 20.685393258426956], [1.731745124E12, 43.17567567567568], [1.731745079E12, 14.933333333333335], [1.731745165E12, 9.584615384615386], [1.731745087E12, 31.809523809523807], [1.731745173E12, 9.287128712871283], [1.731745128E12, 27.167567567567566], [1.731745083E12, 26.333333333333314], [1.731745169E12, 8.919999999999996], [1.731745136E12, 9.044334975369454], [1.731745091E12, 8.925373134328357], [1.731745177E12, 9.15346534653466], [1.731745132E12, 36.61133603238863], [1.73174514E12, 9.25], [1.731745095E12, 8.970443349753703], [1.731745181E12, 9.887804878048785], [1.731745103E12, 27.970414201183452], [1.731745144E12, 8.964999999999996], [1.731745099E12, 8.80808080808081], [1.731745185E12, 9.030150753768837], [1.731745152E12, 9.139303482587076], [1.731745107E12, 23.978102189781016], [1.731745148E12, 9.128712871287131]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745187E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.708542713567835, "minX": 1.731745068E12, "maxY": 45.978540772532206, "series": [{"data": [[1.731745072E12, 9.410000000000004], [1.731745113E12, 8.88557213930348], [1.731745154E12, 8.879999999999997], [1.731745068E12, 16.46625766871165], [1.731745162E12, 8.989999999999995], [1.731745076E12, 8.824120603015068], [1.731745117E12, 32.60377358490564], [1.731745158E12, 9.22388059701493], [1.731745125E12, 39.903409090909115], [1.731745166E12, 9.181372549019612], [1.73174508E12, 16.265625], [1.731745121E12, 31.185929648241206], [1.731745088E12, 13.353711790393001], [1.731745129E12, 30.110655737704928], [1.73174517E12, 9.38383838383839], [1.731745084E12, 26.197969543147206], [1.731745178E12, 9.366336633663364], [1.731745092E12, 9.131979695431474], [1.731745133E12, 12.327354260089681], [1.731745174E12, 9.237373737373746], [1.731745141E12, 9.151960784313735], [1.731745182E12, 8.847290640394085], [1.731745096E12, 8.733668341708546], [1.731745137E12, 9.156565656565661], [1.731745104E12, 29.703862660944214], [1.731745145E12, 9.395939086294419], [1.731745186E12, 8.723618090452263], [1.7317451E12, 9.059405940594058], [1.731745108E12, 45.978540772532206], [1.731745149E12, 9.090909090909093], [1.731745114E12, 8.934673366834167], [1.731745155E12, 9.085000000000004], [1.731745069E12, 30.659663865546207], [1.73174511E12, 9.811320754716986], [1.731745077E12, 9.13500000000001], [1.731745118E12, 24.204545454545432], [1.731745159E12, 8.797979797979796], [1.731745073E12, 9.544999999999996], [1.731745167E12, 9.10945273631841], [1.731745081E12, 29.525316455696206], [1.731745122E12, 40.81770833333329], [1.731745163E12, 9.364999999999991], [1.73174513E12, 15.575916230366492], [1.731745171E12, 8.909999999999995], [1.731745085E12, 32.10050251256282], [1.731745126E12, 41.69346733668341], [1.731745093E12, 9.069651741293532], [1.731745134E12, 9.356783919597984], [1.731745175E12, 9.50505050505051], [1.731745089E12, 9.378787878787874], [1.731745183E12, 9.304999999999996], [1.731745097E12, 9.136363636363637], [1.731745138E12, 9.079601990049749], [1.731745179E12, 8.824120603015075], [1.731745146E12, 8.985221674876854], [1.731745187E12, 8.83815028901733], [1.731745101E12, 8.739999999999993], [1.731745142E12, 9.050505050505047], [1.731745109E12, 29.070312500000004], [1.73174515E12, 9.480198019801984], [1.731745105E12, 28.155172413793103], [1.73174507E12, 13.048672566371684], [1.731745156E12, 8.708542713567835], [1.731745111E12, 8.909547738693458], [1.731745119E12, 21.708333333333336], [1.731745074E12, 8.955000000000002], [1.73174516E12, 9.237373737373735], [1.731745115E12, 9.091463414634147], [1.731745082E12, 36.18385650224217], [1.731745168E12, 9.211055276381911], [1.731745123E12, 30.168604651162788], [1.731745078E12, 9.178010471204187], [1.731745164E12, 9.119402985074629], [1.731745086E12, 30.817733990147808], [1.731745172E12, 9.388059701492539], [1.731745127E12, 43.715999999999994], [1.731745135E12, 9.4949494949495], [1.73174509E12, 9.153465346534652], [1.731745176E12, 9.004999999999997], [1.731745131E12, 23.116564417177923], [1.731745098E12, 8.862068965517228], [1.731745184E12, 8.858585858585846], [1.731745139E12, 8.875621890547256], [1.731745094E12, 8.959798994974872], [1.73174518E12, 10.000000000000002], [1.731745102E12, 8.761006289308177], [1.731745143E12, 9.034653465346532], [1.731745151E12, 8.939698492462313], [1.731745106E12, 31.73214285714288], [1.731745147E12, 9.101010101010106], [1.731745071E12, 9.371287128712877], [1.731745157E12, 8.915841584158406], [1.731745112E12, 8.920792079207928], [1.731745153E12, 9.291457286432163], [1.73174512E12, 28.38775510204081], [1.731745075E12, 9.049504950495042], [1.731745161E12, 8.737623762376236], [1.731745116E12, 20.685393258426956], [1.731745124E12, 43.171171171171174], [1.731745079E12, 14.927777777777777], [1.731745165E12, 9.584615384615386], [1.731745087E12, 31.792207792207797], [1.731745173E12, 9.28217821782178], [1.731745128E12, 27.151351351351355], [1.731745083E12, 26.30303030303029], [1.731745169E12, 8.914999999999997], [1.731745136E12, 9.03940886699507], [1.731745091E12, 8.880597014925375], [1.731745177E12, 9.148514851485144], [1.731745132E12, 36.61133603238863], [1.73174514E12, 9.204081632653063], [1.731745095E12, 8.960591133004927], [1.731745181E12, 9.887804878048785], [1.731745103E12, 27.970414201183452], [1.731745144E12, 8.959999999999994], [1.731745099E12, 8.803030303030296], [1.731745185E12, 9.030150753768837], [1.731745152E12, 9.139303482587076], [1.731745107E12, 23.978102189781016], [1.731745148E12, 9.128712871287131]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745187E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.004926108374384236, "minX": 1.731745068E12, "maxY": 32.153153153153156, "series": [{"data": [[1.731745072E12, 0.035], [1.731745113E12, 0.044776119402985086], [1.731745154E12, 0.015000000000000001], [1.731745068E12, 0.5889570552147236], [1.731745162E12, 0.03499999999999998], [1.731745076E12, 0.05527638190954772], [1.731745117E12, 19.24528301886792], [1.731745158E12, 0.024875621890547275], [1.731745125E12, 28.892045454545453], [1.731745166E12, 0.039215686274509796], [1.73174508E12, 5.348958333333336], [1.731745121E12, 20.311557788944732], [1.731745088E12, 0.030567685589519673], [1.731745129E12, 12.528688524590168], [1.73174517E12, 0.05555555555555553], [1.731745084E12, 15.47208121827411], [1.731745178E12, 0.04455445544554455], [1.731745092E12, 0.050761421319796954], [1.731745133E12, 0.017937219730941707], [1.731745174E12, 0.04040404040404039], [1.731745141E12, 0.02941176470588236], [1.731745182E12, 0.004926108374384236], [1.731745096E12, 0.04020100502512562], [1.731745137E12, 0.03535353535353536], [1.731745104E12, 17.343347639484982], [1.731745145E12, 0.02030456852791878], [1.731745186E12, 0.05025125628140704], [1.7317451E12, 0.034653465346534636], [1.731745108E12, 30.59227467811158], [1.731745149E12, 0.015151515151515164], [1.731745114E12, 0.06030150753768847], [1.731745155E12, 0.034999999999999996], [1.731745069E12, 13.04621848739494], [1.73174511E12, 0.028301886792452838], [1.731745077E12, 0.04], [1.731745118E12, 9.32272727272727], [1.731745159E12, 0.04545454545454545], [1.731745073E12, 0.049999999999999996], [1.731745167E12, 0.004975124378109452], [1.731745081E12, 19.37974683544304], [1.731745122E12, 26.56770833333332], [1.731745163E12, 0.035], [1.73174513E12, 5.2827225130890065], [1.731745171E12, 0.03999999999999999], [1.731745085E12, 20.43718592964824], [1.731745126E12, 30.42211055276382], [1.731745093E12, 0.04477611940298506], [1.731745134E12, 0.05527638190954775], [1.731745175E12, 0.015151515151515152], [1.731745089E12, 0.05555555555555555], [1.731745183E12, 0.035], [1.731745097E12, 0.03535353535353536], [1.731745138E12, 0.029850746268656723], [1.731745179E12, 0.030150753768844206], [1.731745146E12, 0.02955665024630542], [1.731745187E12, 0.0346820809248555], [1.731745101E12, 0.04], [1.731745142E12, 0.025252525252525252], [1.731745109E12, 11.914062500000002], [1.73174515E12, 0.034653465346534636], [1.731745105E12, 17.5632183908046], [1.73174507E12, 0.05309734513274337], [1.731745156E12, 0.055276381909547735], [1.731745111E12, 0.02010050251256281], [1.731745119E12, 12.01785714285714], [1.731745074E12, 0.04500000000000001], [1.73174516E12, 0.04040404040404042], [1.731745115E12, 0.060975609756097573], [1.731745082E12, 22.896860986547082], [1.731745168E12, 0.02512562814070352], [1.731745123E12, 17.877906976744196], [1.731745078E12, 0.04712041884816755], [1.731745164E12, 0.04975124378109452], [1.731745086E12, 20.05911330049262], [1.731745172E12, 0.04975124378109452], [1.731745127E12, 24.464000000000006], [1.731745135E12, 0.055555555555555546], [1.73174509E12, 0.04455445544554456], [1.731745176E12, 0.025000000000000012], [1.731745131E12, 12.484662576687116], [1.731745098E12, 0.05418719211822659], [1.731745184E12, 0.030303030303030328], [1.731745139E12, 0.02985074626865673], [1.731745094E12, 0.05527638190954772], [1.73174518E12, 0.031088082901554424], [1.731745102E12, 0.04402515723270443], [1.731745143E12, 0.03465346534653466], [1.731745151E12, 0.015075376884422127], [1.731745106E12, 18.236607142857146], [1.731745147E12, 0.04545454545454546], [1.731745071E12, 0.04950495049504951], [1.731745157E12, 0.04455445544554455], [1.731745112E12, 0.049504950495049514], [1.731745153E12, 0.045226130653266354], [1.73174512E12, 15.561224489795906], [1.731745075E12, 0.044554455445544545], [1.731745161E12, 0.034653465346534656], [1.731745116E12, 11.50561797752809], [1.731745124E12, 32.153153153153156], [1.731745079E12, 5.705555555555557], [1.731745165E12, 0.06666666666666667], [1.731745087E12, 17.640692640692645], [1.731745173E12, 0.03465346534653465], [1.731745128E12, 16.437837837837836], [1.731745083E12, 15.313131313131313], [1.731745169E12, 0.03499999999999998], [1.731745136E12, 0.03940886699507388], [1.731745091E12, 0.039800995024875614], [1.731745177E12, 0.03960396039603963], [1.731745132E12, 16.51012145748988], [1.73174514E12, 0.04081632653061225], [1.731745095E12, 0.044334975369458136], [1.731745181E12, 0.03414634146341465], [1.731745103E12, 17.97633136094675], [1.731745144E12, 0.009999999999999998], [1.731745099E12, 0.05050505050505051], [1.731745185E12, 0.010050251256281405], [1.731745152E12, 0.019900497512437807], [1.731745107E12, 14.839416058394159], [1.731745148E12, 0.0198019801980198]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745187E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.731745068E12, "maxY": 1052.0, "series": [{"data": [[1.731745072E12, 17.0], [1.731745113E12, 19.0], [1.731745154E12, 19.0], [1.731745068E12, 58.0], [1.731745162E12, 16.0], [1.731745076E12, 15.0], [1.731745117E12, 1041.0], [1.731745158E12, 20.0], [1.731745125E12, 1046.0], [1.731745166E12, 19.0], [1.73174508E12, 1031.0], [1.731745121E12, 1030.0], [1.731745088E12, 37.0], [1.731745129E12, 1036.0], [1.73174517E12, 25.0], [1.731745084E12, 1031.0], [1.731745178E12, 24.0], [1.731745092E12, 17.0], [1.731745133E12, 45.0], [1.731745174E12, 17.0], [1.731745141E12, 20.0], [1.731745182E12, 16.0], [1.731745096E12, 15.0], [1.731745137E12, 17.0], [1.731745104E12, 1041.0], [1.731745145E12, 29.0], [1.731745186E12, 15.0], [1.7317451E12, 19.0], [1.731745108E12, 1043.0], [1.731745149E12, 16.0], [1.731745114E12, 22.0], [1.731745155E12, 19.0], [1.731745069E12, 1052.0], [1.73174511E12, 27.0], [1.731745077E12, 16.0], [1.731745118E12, 1042.0], [1.731745159E12, 17.0], [1.731745073E12, 31.0], [1.731745167E12, 16.0], [1.731745081E12, 1041.0], [1.731745122E12, 1041.0], [1.731745163E12, 26.0], [1.73174513E12, 1017.0], [1.731745171E12, 16.0], [1.731745085E12, 1041.0], [1.731745126E12, 1033.0], [1.731745093E12, 19.0], [1.731745134E12, 17.0], [1.731745175E12, 30.0], [1.731745089E12, 18.0], [1.731745183E12, 27.0], [1.731745097E12, 17.0], [1.731745138E12, 20.0], [1.731745179E12, 15.0], [1.731745146E12, 18.0], [1.731745187E12, 17.0], [1.731745101E12, 17.0], [1.731745142E12, 17.0], [1.731745109E12, 1038.0], [1.73174515E12, 21.0], [1.731745105E12, 1042.0], [1.73174507E12, 31.0], [1.731745156E12, 16.0], [1.731745111E12, 24.0], [1.731745119E12, 1021.0], [1.731745074E12, 19.0], [1.73174516E12, 22.0], [1.731745115E12, 18.0], [1.731745082E12, 1047.0], [1.731745168E12, 20.0], [1.731745123E12, 1043.0], [1.731745078E12, 19.0], [1.731745164E12, 16.0], [1.731745086E12, 1037.0], [1.731745172E12, 18.0], [1.731745127E12, 1046.0], [1.731745135E12, 23.0], [1.73174509E12, 20.0], [1.731745176E12, 24.0], [1.731745131E12, 1032.0], [1.731745098E12, 19.0], [1.731745184E12, 17.0], [1.731745139E12, 18.0], [1.731745094E12, 17.0], [1.73174518E12, 26.0], [1.731745102E12, 16.0], [1.731745143E12, 20.0], [1.731745151E12, 16.0], [1.731745106E12, 1036.0], [1.731745147E12, 16.0], [1.731745071E12, 16.0], [1.731745157E12, 16.0], [1.731745112E12, 16.0], [1.731745153E12, 21.0], [1.73174512E12, 1037.0], [1.731745075E12, 19.0], [1.731745161E12, 17.0], [1.731745116E12, 1033.0], [1.731745124E12, 1048.0], [1.731745079E12, 1035.0], [1.731745165E12, 26.0], [1.731745087E12, 1043.0], [1.731745173E12, 20.0], [1.731745128E12, 1034.0], [1.731745083E12, 1021.0], [1.731745169E12, 19.0], [1.731745136E12, 19.0], [1.731745091E12, 17.0], [1.731745177E12, 24.0], [1.731745132E12, 1050.0], [1.73174514E12, 20.0], [1.731745095E12, 19.0], [1.731745181E12, 30.0], [1.731745103E12, 1025.0], [1.731745144E12, 17.0], [1.731745099E12, 16.0], [1.731745185E12, 19.0], [1.731745152E12, 16.0], [1.731745107E12, 1029.0], [1.731745148E12, 19.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.731745072E12, 12.0], [1.731745113E12, 11.0], [1.731745154E12, 11.0], [1.731745068E12, 28.0], [1.731745162E12, 12.0], [1.731745076E12, 10.0], [1.731745117E12, 21.0], [1.731745158E12, 12.0], [1.731745125E12, 16.30000000000001], [1.731745166E12, 12.0], [1.73174508E12, 17.0], [1.731745121E12, 17.0], [1.731745088E12, 22.0], [1.731745129E12, 27.0], [1.73174517E12, 12.0], [1.731745084E12, 16.0], [1.731745178E12, 12.0], [1.731745092E12, 12.0], [1.731745133E12, 20.19999999999999], [1.731745174E12, 12.0], [1.731745141E12, 12.0], [1.731745182E12, 11.599999999999994], [1.731745096E12, 10.0], [1.731745137E12, 12.0], [1.731745104E12, 18.599999999999994], [1.731745145E12, 12.0], [1.731745186E12, 10.0], [1.7317451E12, 11.0], [1.731745108E12, 26.19999999999999], [1.731745149E12, 12.0], [1.731745114E12, 11.0], [1.731745155E12, 12.0], [1.731745069E12, 29.0], [1.73174511E12, 15.0], [1.731745077E12, 12.0], [1.731745118E12, 24.900000000000006], [1.731745159E12, 11.0], [1.731745073E12, 12.0], [1.731745167E12, 12.0], [1.731745081E12, 15.0], [1.731745122E12, 23.0], [1.731745163E12, 12.0], [1.73174513E12, 15.0], [1.731745171E12, 10.0], [1.731745085E12, 18.0], [1.731745126E12, 17.0], [1.731745093E12, 12.0], [1.731745134E12, 12.0], [1.731745175E12, 12.0], [1.731745089E12, 12.0], [1.731745183E12, 12.0], [1.731745097E12, 12.0], [1.731745138E12, 12.0], [1.731745179E12, 11.0], [1.731745146E12, 11.0], [1.731745187E12, 12.0], [1.731745101E12, 9.900000000000006], [1.731745142E12, 12.0], [1.731745109E12, 28.0], [1.73174515E12, 12.0], [1.731745105E12, 18.5], [1.73174507E12, 20.0], [1.731745156E12, 10.0], [1.731745111E12, 11.0], [1.731745119E12, 15.0], [1.731745074E12, 11.900000000000006], [1.73174516E12, 12.0], [1.731745115E12, 12.0], [1.731745082E12, 20.0], [1.731745168E12, 12.0], [1.731745123E12, 21.0], [1.731745078E12, 12.0], [1.731745164E12, 11.800000000000011], [1.731745086E12, 15.599999999999994], [1.731745172E12, 12.0], [1.731745127E12, 31.0], [1.731745135E12, 12.0], [1.73174509E12, 12.0], [1.731745176E12, 10.0], [1.731745131E12, 16.0], [1.731745098E12, 11.0], [1.731745184E12, 11.0], [1.731745139E12, 11.0], [1.731745094E12, 11.0], [1.73174518E12, 15.0], [1.731745102E12, 11.0], [1.731745143E12, 12.0], [1.731745151E12, 10.0], [1.731745106E12, 22.0], [1.731745147E12, 12.0], [1.731745071E12, 12.0], [1.731745157E12, 11.700000000000017], [1.731745112E12, 12.0], [1.731745153E12, 12.0], [1.73174512E12, 21.0], [1.731745075E12, 12.0], [1.731745161E12, 10.0], [1.731745116E12, 12.0], [1.731745124E12, 17.400000000000034], [1.731745079E12, 12.0], [1.731745165E12, 12.0], [1.731745087E12, 25.0], [1.731745173E12, 12.0], [1.731745128E12, 16.0], [1.731745083E12, 17.099999999999994], [1.731745169E12, 11.0], [1.731745136E12, 11.0], [1.731745091E12, 10.800000000000011], [1.731745177E12, 12.0], [1.731745132E12, 31.0], [1.73174514E12, 12.0], [1.731745095E12, 12.0], [1.731745181E12, 13.0], [1.731745103E12, 17.0], [1.731745144E12, 11.0], [1.731745099E12, 11.0], [1.731745185E12, 12.0], [1.731745152E12, 12.0], [1.731745107E12, 12.0], [1.731745148E12, 12.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.731745072E12, 16.0], [1.731745113E12, 19.0], [1.731745154E12, 16.0], [1.731745068E12, 54.15999999999991], [1.731745162E12, 16.0], [1.731745076E12, 15.0], [1.731745117E12, 1027.87], [1.731745158E12, 19.97999999999999], [1.731745125E12, 1038.3], [1.731745166E12, 17.899999999999977], [1.73174508E12, 101.92999999999319], [1.731745121E12, 1023.0], [1.731745088E12, 35.0], [1.731745129E12, 1027.6000000000001], [1.73174517E12, 25.0], [1.731745084E12, 1025.1200000000001], [1.731745178E12, 20.97], [1.731745092E12, 16.02000000000001], [1.731745133E12, 37.799999999999955], [1.731745174E12, 16.00999999999999], [1.731745141E12, 16.899999999999977], [1.731745182E12, 15.960000000000008], [1.731745096E12, 15.0], [1.731745137E12, 16.00999999999999], [1.731745104E12, 1024.56], [1.731745145E12, 22.14000000000007], [1.731745186E12, 14.0], [1.7317451E12, 18.97], [1.731745108E12, 1035.6], [1.731745149E12, 16.0], [1.731745114E12, 16.0], [1.731745155E12, 19.0], [1.731745069E12, 1038.61], [1.73174511E12, 22.870000000000005], [1.731745077E12, 15.990000000000009], [1.731745118E12, 831.2099999999921], [1.731745159E12, 17.0], [1.731745073E12, 19.0], [1.731745167E12, 16.0], [1.731745081E12, 1033.92], [1.731745122E12, 1039.1399999999999], [1.731745163E12, 21.0], [1.73174513E12, 105.27999999998423], [1.731745171E12, 16.0], [1.731745085E12, 1026.0], [1.731745126E12, 1019.0], [1.731745093E12, 19.0], [1.731745134E12, 16.0], [1.731745175E12, 19.1099999999999], [1.731745089E12, 16.019999999999982], [1.731745183E12, 23.950000000000045], [1.731745097E12, 16.00999999999999], [1.731745138E12, 19.0], [1.731745179E12, 15.0], [1.731745146E12, 15.960000000000008], [1.731745187E12, 16.25999999999999], [1.731745101E12, 15.990000000000009], [1.731745142E12, 16.00999999999999], [1.731745109E12, 1019.1500000000001], [1.73174515E12, 19.0], [1.731745105E12, 1025.5], [1.73174507E12, 28.72999999999999], [1.731745156E12, 16.0], [1.731745111E12, 16.0], [1.731745119E12, 1014.79], [1.731745074E12, 17.0], [1.73174516E12, 22.0], [1.731745115E12, 18.0], [1.731745082E12, 1033.8], [1.731745168E12, 20.0], [1.731745123E12, 1036.43], [1.731745078E12, 19.0], [1.731745164E12, 16.0], [1.731745086E12, 1032.3600000000001], [1.731745172E12, 17.95999999999998], [1.731745127E12, 1039.43], [1.731745135E12, 20.029999999999973], [1.73174509E12, 19.97], [1.731745176E12, 15.990000000000009], [1.731745131E12, 1026.2399999999998], [1.731745098E12, 18.960000000000008], [1.731745184E12, 17.0], [1.731745139E12, 16.97999999999999], [1.731745094E12, 16.0], [1.73174518E12, 20.360000000000014], [1.731745102E12, 15.400000000000006], [1.731745143E12, 19.0], [1.731745151E12, 16.0], [1.731745106E12, 1032.75], [1.731745147E12, 16.0], [1.731745071E12, 15.0], [1.731745157E12, 15.969999999999999], [1.731745112E12, 15.969999999999999], [1.731745153E12, 20.0], [1.73174512E12, 1022.45], [1.731745075E12, 19.0], [1.731745161E12, 15.0], [1.731745116E12, 1026.68], [1.731745124E12, 1038.6200000000001], [1.731745079E12, 210.41999999999769], [1.731745165E12, 21.19999999999996], [1.731745087E12, 1023.72], [1.731745173E12, 19.0], [1.731745128E12, 1024.54], [1.731745083E12, 1018.03], [1.731745169E12, 16.0], [1.731745136E12, 18.920000000000016], [1.731745091E12, 15.0], [1.731745177E12, 16.0], [1.731745132E12, 1039.1200000000001], [1.73174514E12, 19.03], [1.731745095E12, 19.0], [1.731745181E12, 23.75999999999999], [1.731745103E12, 1019.4000000000001], [1.731745144E12, 16.0], [1.731745099E12, 16.0], [1.731745185E12, 19.0], [1.731745152E12, 15.97999999999999], [1.731745107E12, 1025.2], [1.731745148E12, 18.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.731745072E12, 15.0], [1.731745113E12, 12.0], [1.731745154E12, 12.0], [1.731745068E12, 34.599999999999966], [1.731745162E12, 12.0], [1.731745076E12, 12.0], [1.731745117E12, 24.349999999999994], [1.731745158E12, 13.0], [1.731745125E12, 20.150000000000006], [1.731745166E12, 13.0], [1.73174508E12, 19.0], [1.731745121E12, 22.0], [1.731745088E12, 25.0], [1.731745129E12, 32.0], [1.73174517E12, 15.0], [1.731745084E12, 20.0], [1.731745178E12, 13.0], [1.731745092E12, 14.099999999999994], [1.731745133E12, 25.0], [1.731745174E12, 13.0], [1.731745141E12, 12.75], [1.731745182E12, 12.0], [1.731745096E12, 12.0], [1.731745137E12, 13.049999999999983], [1.731745104E12, 22.299999999999983], [1.731745145E12, 15.0], [1.731745186E12, 12.0], [1.7317451E12, 15.0], [1.731745108E12, 45.29999999999998], [1.731745149E12, 13.0], [1.731745114E12, 12.0], [1.731745155E12, 13.949999999999989], [1.731745069E12, 36.14999999999995], [1.73174511E12, 17.0], [1.731745077E12, 13.949999999999989], [1.731745118E12, 28.0], [1.731745159E12, 12.099999999999966], [1.731745073E12, 13.0], [1.731745167E12, 12.0], [1.731745081E12, 16.14999999999995], [1.731745122E12, 29.349999999999994], [1.731745163E12, 12.949999999999989], [1.73174513E12, 19.0], [1.731745171E12, 12.0], [1.731745085E12, 24.0], [1.731745126E12, 22.0], [1.731745093E12, 12.0], [1.731745134E12, 13.0], [1.731745175E12, 15.049999999999983], [1.731745089E12, 13.0], [1.731745183E12, 15.0], [1.731745097E12, 13.099999999999966], [1.731745138E12, 12.899999999999977], [1.731745179E12, 12.0], [1.731745146E12, 12.0], [1.731745187E12, 13.299999999999983], [1.731745101E12, 12.0], [1.731745142E12, 12.099999999999966], [1.731745109E12, 29.149999999999977], [1.73174515E12, 16.0], [1.731745105E12, 24.0], [1.73174507E12, 23.0], [1.731745156E12, 12.0], [1.731745111E12, 12.0], [1.731745119E12, 16.0], [1.731745074E12, 13.0], [1.73174516E12, 15.0], [1.731745115E12, 15.0], [1.731745082E12, 23.0], [1.731745168E12, 13.0], [1.731745123E12, 26.349999999999994], [1.731745078E12, 12.0], [1.731745164E12, 12.899999999999977], [1.731745086E12, 23.199999999999932], [1.731745172E12, 13.0], [1.731745127E12, 34.89999999999998], [1.731745135E12, 16.0], [1.73174509E12, 12.849999999999994], [1.731745176E12, 12.0], [1.731745131E12, 18.0], [1.731745098E12, 12.0], [1.731745184E12, 13.0], [1.731745139E12, 12.0], [1.731745094E12, 12.0], [1.73174518E12, 16.0], [1.731745102E12, 12.0], [1.731745143E12, 12.0], [1.731745151E12, 12.0], [1.731745106E12, 24.75], [1.731745147E12, 12.049999999999983], [1.731745071E12, 13.849999999999994], [1.731745157E12, 12.0], [1.731745112E12, 13.0], [1.731745153E12, 15.0], [1.73174512E12, 25.149999999999977], [1.731745075E12, 12.849999999999994], [1.731745161E12, 12.0], [1.731745116E12, 15.0], [1.731745124E12, 23.0], [1.731745079E12, 15.0], [1.731745165E12, 15.199999999999989], [1.731745087E12, 28.0], [1.731745173E12, 13.0], [1.731745128E12, 19.0], [1.731745083E12, 22.049999999999983], [1.731745169E12, 12.0], [1.731745136E12, 13.0], [1.731745091E12, 12.0], [1.731745177E12, 13.849999999999994], [1.731745132E12, 36.0], [1.73174514E12, 15.149999999999977], [1.731745095E12, 14.599999999999966], [1.731745181E12, 16.0], [1.731745103E12, 20.0], [1.731745144E12, 12.0], [1.731745099E12, 12.0], [1.731745185E12, 15.0], [1.731745152E12, 13.0], [1.731745107E12, 15.0], [1.731745148E12, 13.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.731745072E12, 6.0], [1.731745113E12, 8.0], [1.731745154E12, 8.0], [1.731745068E12, 8.0], [1.731745162E12, 8.0], [1.731745076E12, 8.0], [1.731745117E12, 8.0], [1.731745158E12, 5.0], [1.731745125E12, 6.0], [1.731745166E12, 8.0], [1.73174508E12, 5.0], [1.731745121E12, 8.0], [1.731745088E12, 8.0], [1.731745129E12, 8.0], [1.73174517E12, 5.0], [1.731745084E12, 8.0], [1.731745178E12, 5.0], [1.731745092E12, 5.0], [1.731745133E12, 7.0], [1.731745174E12, 8.0], [1.731745141E12, 8.0], [1.731745182E12, 8.0], [1.731745096E12, 8.0], [1.731745137E12, 4.0], [1.731745104E12, 8.0], [1.731745145E12, 5.0], [1.731745186E12, 8.0], [1.7317451E12, 5.0], [1.731745108E12, 5.0], [1.731745149E12, 8.0], [1.731745114E12, 8.0], [1.731745155E12, 5.0], [1.731745069E12, 8.0], [1.73174511E12, 5.0], [1.731745077E12, 5.0], [1.731745118E12, 4.0], [1.731745159E12, 8.0], [1.731745073E12, 8.0], [1.731745167E12, 8.0], [1.731745081E12, 8.0], [1.731745122E12, 8.0], [1.731745163E12, 7.0], [1.73174513E12, 5.0], [1.731745171E12, 8.0], [1.731745085E12, 8.0], [1.731745126E12, 8.0], [1.731745093E12, 8.0], [1.731745134E12, 8.0], [1.731745175E12, 5.0], [1.731745089E12, 8.0], [1.731745183E12, 5.0], [1.731745097E12, 5.0], [1.731745138E12, 8.0], [1.731745179E12, 8.0], [1.731745146E12, 8.0], [1.731745187E12, 8.0], [1.731745101E12, 8.0], [1.731745142E12, 8.0], [1.731745109E12, 8.0], [1.73174515E12, 5.0], [1.731745105E12, 7.0], [1.73174507E12, 6.0], [1.731745156E12, 8.0], [1.731745111E12, 8.0], [1.731745119E12, 8.0], [1.731745074E12, 8.0], [1.73174516E12, 5.0], [1.731745115E12, 4.0], [1.731745082E12, 8.0], [1.731745168E12, 5.0], [1.731745123E12, 7.0], [1.731745078E12, 8.0], [1.731745164E12, 8.0], [1.731745086E12, 8.0], [1.731745172E12, 8.0], [1.731745127E12, 8.0], [1.731745135E12, 5.0], [1.73174509E12, 5.0], [1.731745176E12, 8.0], [1.731745131E12, 8.0], [1.731745098E12, 8.0], [1.731745184E12, 8.0], [1.731745139E12, 8.0], [1.731745094E12, 8.0], [1.73174518E12, 5.0], [1.731745102E12, 8.0], [1.731745143E12, 4.0], [1.731745151E12, 8.0], [1.731745106E12, 8.0], [1.731745147E12, 8.0], [1.731745071E12, 8.0], [1.731745157E12, 8.0], [1.731745112E12, 4.0], [1.731745153E12, 5.0], [1.73174512E12, 5.0], [1.731745075E12, 5.0], [1.731745161E12, 8.0], [1.731745116E12, 8.0], [1.731745124E12, 8.0], [1.731745079E12, 8.0], [1.731745165E12, 5.0], [1.731745087E12, 8.0], [1.731745173E12, 5.0], [1.731745128E12, 4.0], [1.731745083E12, 8.0], [1.731745169E12, 8.0], [1.731745136E12, 8.0], [1.731745091E12, 8.0], [1.731745177E12, 8.0], [1.731745132E12, 8.0], [1.73174514E12, 5.0], [1.731745095E12, 5.0], [1.731745181E12, 8.0], [1.731745103E12, 5.0], [1.731745144E12, 8.0], [1.731745099E12, 8.0], [1.731745185E12, 5.0], [1.731745152E12, 8.0], [1.731745107E12, 8.0], [1.731745148E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.731745072E12, 9.0], [1.731745113E12, 8.0], [1.731745154E12, 8.0], [1.731745068E12, 14.0], [1.731745162E12, 8.0], [1.731745076E12, 8.0], [1.731745117E12, 13.5], [1.731745158E12, 9.0], [1.731745125E12, 9.0], [1.731745166E12, 9.0], [1.73174508E12, 9.0], [1.731745121E12, 9.0], [1.731745088E12, 12.0], [1.731745129E12, 16.0], [1.73174517E12, 9.0], [1.731745084E12, 9.0], [1.731745178E12, 9.0], [1.731745092E12, 9.0], [1.731745133E12, 9.0], [1.731745174E12, 9.0], [1.731745141E12, 9.0], [1.731745182E12, 8.0], [1.731745096E12, 8.0], [1.731745137E12, 9.0], [1.731745104E12, 12.0], [1.731745145E12, 9.0], [1.731745186E12, 8.0], [1.7317451E12, 8.0], [1.731745108E12, 15.0], [1.731745149E12, 9.0], [1.731745114E12, 8.0], [1.731745155E12, 8.0], [1.731745069E12, 16.0], [1.73174511E12, 8.0], [1.731745077E12, 9.0], [1.731745118E12, 15.0], [1.731745159E12, 8.0], [1.731745073E12, 9.0], [1.731745167E12, 9.0], [1.731745081E12, 9.0], [1.731745122E12, 14.0], [1.731745163E12, 9.0], [1.73174513E12, 9.0], [1.731745171E12, 9.0], [1.731745085E12, 9.0], [1.731745126E12, 10.0], [1.731745093E12, 9.0], [1.731745134E12, 9.0], [1.731745175E12, 9.0], [1.731745089E12, 9.0], [1.731745183E12, 9.0], [1.731745097E12, 9.0], [1.731745138E12, 8.0], [1.731745179E12, 8.0], [1.731745146E12, 9.0], [1.731745187E12, 8.0], [1.731745101E12, 8.0], [1.731745142E12, 9.0], [1.731745109E12, 15.0], [1.73174515E12, 9.0], [1.731745105E12, 9.0], [1.73174507E12, 12.0], [1.731745156E12, 8.0], [1.731745111E12, 8.0], [1.731745119E12, 9.0], [1.731745074E12, 8.0], [1.73174516E12, 9.0], [1.731745115E12, 8.0], [1.731745082E12, 13.0], [1.731745168E12, 9.0], [1.731745123E12, 9.0], [1.731745078E12, 9.0], [1.731745164E12, 9.0], [1.731745086E12, 9.0], [1.731745172E12, 9.0], [1.731745127E12, 18.0], [1.731745135E12, 9.0], [1.73174509E12, 9.0], [1.731745176E12, 9.0], [1.731745131E12, 9.0], [1.731745098E12, 8.0], [1.731745184E12, 8.0], [1.731745139E12, 8.0], [1.731745094E12, 8.0], [1.73174518E12, 9.0], [1.731745102E12, 8.0], [1.731745143E12, 8.0], [1.731745151E12, 9.0], [1.731745106E12, 13.0], [1.731745147E12, 9.0], [1.731745071E12, 9.0], [1.731745157E12, 8.0], [1.731745112E12, 8.0], [1.731745153E12, 9.0], [1.73174512E12, 12.0], [1.731745075E12, 8.0], [1.731745161E12, 8.0], [1.731745116E12, 8.0], [1.731745124E12, 9.0], [1.731745079E12, 9.0], [1.731745165E12, 9.0], [1.731745087E12, 13.0], [1.731745173E12, 9.0], [1.731745128E12, 9.0], [1.731745083E12, 9.0], [1.731745169E12, 8.0], [1.731745136E12, 9.0], [1.731745091E12, 9.0], [1.731745177E12, 9.0], [1.731745132E12, 19.0], [1.73174514E12, 8.5], [1.731745095E12, 8.0], [1.731745181E12, 9.0], [1.731745103E12, 8.0], [1.731745144E12, 8.0], [1.731745099E12, 8.0], [1.731745185E12, 8.0], [1.731745152E12, 9.0], [1.731745107E12, 8.0], [1.731745148E12, 8.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745187E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 137.0, "maxY": 19.0, "series": [{"data": [[137.0, 8.0], [158.0, 9.0], [159.0, 8.0], [163.0, 11.0], [164.0, 8.0], [169.0, 8.0], [174.0, 9.0], [168.0, 9.0], [172.0, 9.0], [173.0, 8.0], [180.0, 9.0], [178.0, 8.0], [176.0, 9.0], [191.0, 9.0], [185.0, 9.0], [199.0, 9.0], [192.0, 11.0], [198.0, 9.0], [197.0, 9.0], [196.0, 9.0], [195.0, 9.0], [193.0, 9.0], [202.0, 9.0], [200.0, 9.0], [203.0, 8.0], [201.0, 9.0], [204.0, 9.0], [205.0, 9.0], [212.0, 9.0], [223.0, 12.0], [220.0, 15.0], [222.0, 9.0], [226.0, 12.0], [231.0, 13.0], [229.0, 12.0], [224.0, 13.0], [238.0, 16.0], [233.0, 13.0], [244.0, 16.0], [247.0, 19.0], [250.0, 18.0], [256.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 256.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 137.0, "maxY": 19.0, "series": [{"data": [[137.0, 8.0], [158.0, 9.0], [159.0, 8.0], [163.0, 11.0], [164.0, 8.0], [169.0, 8.0], [174.0, 9.0], [168.0, 9.0], [172.0, 9.0], [173.0, 8.0], [180.0, 9.0], [178.0, 8.0], [176.0, 9.0], [191.0, 9.0], [185.0, 9.0], [199.0, 9.0], [192.0, 11.0], [198.0, 9.0], [197.0, 9.0], [196.0, 9.0], [195.0, 9.0], [193.0, 9.0], [202.0, 9.0], [200.0, 9.0], [203.0, 8.0], [201.0, 9.0], [204.0, 9.0], [205.0, 9.0], [212.0, 9.0], [223.0, 12.0], [220.0, 15.0], [222.0, 9.0], [226.0, 12.0], [231.0, 13.0], [229.0, 12.0], [224.0, 13.0], [238.0, 16.0], [233.0, 13.0], [244.0, 16.0], [247.0, 19.0], [250.0, 18.0], [256.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 256.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 142.0, "minX": 1.731745068E12, "maxY": 252.0, "series": [{"data": [[1.731745072E12, 200.0], [1.731745113E12, 201.0], [1.731745154E12, 200.0], [1.731745068E12, 168.0], [1.731745162E12, 201.0], [1.731745076E12, 199.0], [1.731745117E12, 213.0], [1.731745158E12, 200.0], [1.731745125E12, 176.0], [1.731745166E12, 203.0], [1.73174508E12, 192.0], [1.731745121E12, 199.0], [1.731745088E12, 225.0], [1.731745129E12, 241.0], [1.73174517E12, 198.0], [1.731745084E12, 197.0], [1.731745178E12, 201.0], [1.731745092E12, 197.0], [1.731745133E12, 219.0], [1.731745174E12, 199.0], [1.731745141E12, 204.0], [1.731745182E12, 202.0], [1.731745096E12, 200.0], [1.731745137E12, 198.0], [1.731745104E12, 230.0], [1.731745145E12, 197.0], [1.731745186E12, 199.0], [1.7317451E12, 202.0], [1.731745108E12, 232.0], [1.731745149E12, 198.0], [1.731745114E12, 200.0], [1.731745155E12, 200.0], [1.731745069E12, 237.0], [1.73174511E12, 209.0], [1.731745077E12, 200.0], [1.731745118E12, 217.0], [1.731745159E12, 199.0], [1.731745073E12, 200.0], [1.731745167E12, 200.0], [1.731745081E12, 161.0], [1.731745122E12, 193.0], [1.731745163E12, 200.0], [1.73174513E12, 191.0], [1.731745171E12, 200.0], [1.731745085E12, 199.0], [1.731745126E12, 201.0], [1.731745093E12, 201.0], [1.731745134E12, 199.0], [1.731745175E12, 198.0], [1.731745089E12, 198.0], [1.731745183E12, 201.0], [1.731745097E12, 198.0], [1.731745138E12, 201.0], [1.731745179E12, 200.0], [1.731745146E12, 203.0], [1.731745187E12, 171.0], [1.731745101E12, 199.0], [1.731745142E12, 198.0], [1.731745109E12, 252.0], [1.73174515E12, 202.0], [1.731745105E12, 176.0], [1.73174507E12, 224.0], [1.731745156E12, 199.0], [1.731745111E12, 200.0], [1.731745119E12, 171.0], [1.731745074E12, 200.0], [1.73174516E12, 198.0], [1.731745115E12, 166.0], [1.731745082E12, 222.0], [1.731745168E12, 200.0], [1.731745123E12, 173.0], [1.731745078E12, 191.0], [1.731745164E12, 201.0], [1.731745086E12, 202.0], [1.731745172E12, 201.0], [1.731745127E12, 247.0], [1.731745135E12, 199.0], [1.73174509E12, 202.0], [1.731745176E12, 200.0], [1.731745131E12, 166.0], [1.731745098E12, 202.0], [1.731745184E12, 198.0], [1.731745139E12, 201.0], [1.731745094E12, 199.0], [1.73174518E12, 194.0], [1.731745102E12, 161.0], [1.731745143E12, 201.0], [1.731745151E12, 199.0], [1.731745106E12, 222.0], [1.731745147E12, 198.0], [1.731745071E12, 202.0], [1.731745157E12, 202.0], [1.731745112E12, 201.0], [1.731745153E12, 199.0], [1.73174512E12, 196.0], [1.731745075E12, 202.0], [1.731745161E12, 201.0], [1.731745116E12, 179.0], [1.731745124E12, 222.0], [1.731745079E12, 182.0], [1.731745165E12, 196.0], [1.731745087E12, 232.0], [1.731745173E12, 201.0], [1.731745128E12, 185.0], [1.731745083E12, 198.0], [1.731745169E12, 200.0], [1.731745136E12, 202.0], [1.731745091E12, 201.0], [1.731745177E12, 202.0], [1.731745132E12, 246.0], [1.73174514E12, 196.0], [1.731745095E12, 202.0], [1.731745181E12, 204.0], [1.731745103E12, 173.0], [1.731745144E12, 201.0], [1.731745099E12, 199.0], [1.731745185E12, 199.0], [1.731745152E12, 201.0], [1.731745107E12, 142.0], [1.731745148E12, 202.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745187E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 137.0, "minX": 1.731745068E12, "maxY": 256.0, "series": [{"data": [[1.731745072E12, 200.0], [1.731745113E12, 201.0], [1.731745154E12, 200.0], [1.731745068E12, 163.0], [1.731745162E12, 200.0], [1.731745076E12, 199.0], [1.731745117E12, 212.0], [1.731745158E12, 201.0], [1.731745125E12, 176.0], [1.731745166E12, 204.0], [1.73174508E12, 192.0], [1.731745121E12, 199.0], [1.731745088E12, 229.0], [1.731745129E12, 244.0], [1.73174517E12, 198.0], [1.731745084E12, 197.0], [1.731745178E12, 202.0], [1.731745092E12, 197.0], [1.731745133E12, 223.0], [1.731745174E12, 198.0], [1.731745141E12, 204.0], [1.731745182E12, 203.0], [1.731745096E12, 199.0], [1.731745137E12, 198.0], [1.731745104E12, 233.0], [1.731745145E12, 197.0], [1.731745186E12, 199.0], [1.7317451E12, 202.0], [1.731745108E12, 233.0], [1.731745149E12, 198.0], [1.731745114E12, 199.0], [1.731745155E12, 200.0], [1.731745069E12, 238.0], [1.73174511E12, 212.0], [1.731745077E12, 200.0], [1.731745118E12, 220.0], [1.731745159E12, 198.0], [1.731745073E12, 200.0], [1.731745167E12, 201.0], [1.731745081E12, 158.0], [1.731745122E12, 192.0], [1.731745163E12, 200.0], [1.73174513E12, 191.0], [1.731745171E12, 200.0], [1.731745085E12, 199.0], [1.731745126E12, 199.0], [1.731745093E12, 201.0], [1.731745134E12, 199.0], [1.731745175E12, 198.0], [1.731745089E12, 198.0], [1.731745183E12, 200.0], [1.731745097E12, 198.0], [1.731745138E12, 201.0], [1.731745179E12, 199.0], [1.731745146E12, 203.0], [1.731745187E12, 173.0], [1.731745101E12, 200.0], [1.731745142E12, 198.0], [1.731745109E12, 256.0], [1.73174515E12, 202.0], [1.731745105E12, 174.0], [1.73174507E12, 226.0], [1.731745156E12, 199.0], [1.731745111E12, 199.0], [1.731745119E12, 168.0], [1.731745074E12, 200.0], [1.73174516E12, 198.0], [1.731745115E12, 164.0], [1.731745082E12, 223.0], [1.731745168E12, 199.0], [1.731745123E12, 172.0], [1.731745078E12, 191.0], [1.731745164E12, 201.0], [1.731745086E12, 203.0], [1.731745172E12, 201.0], [1.731745127E12, 250.0], [1.731745135E12, 198.0], [1.73174509E12, 202.0], [1.731745176E12, 200.0], [1.731745131E12, 163.0], [1.731745098E12, 203.0], [1.731745184E12, 198.0], [1.731745139E12, 201.0], [1.731745094E12, 199.0], [1.73174518E12, 193.0], [1.731745102E12, 159.0], [1.731745143E12, 202.0], [1.731745151E12, 199.0], [1.731745106E12, 224.0], [1.731745147E12, 198.0], [1.731745071E12, 202.0], [1.731745157E12, 202.0], [1.731745112E12, 202.0], [1.731745153E12, 199.0], [1.73174512E12, 196.0], [1.731745075E12, 202.0], [1.731745161E12, 202.0], [1.731745116E12, 178.0], [1.731745124E12, 222.0], [1.731745079E12, 180.0], [1.731745165E12, 195.0], [1.731745087E12, 231.0], [1.731745173E12, 202.0], [1.731745128E12, 185.0], [1.731745083E12, 198.0], [1.731745169E12, 200.0], [1.731745136E12, 203.0], [1.731745091E12, 201.0], [1.731745177E12, 202.0], [1.731745132E12, 247.0], [1.73174514E12, 196.0], [1.731745095E12, 203.0], [1.731745181E12, 205.0], [1.731745103E12, 169.0], [1.731745144E12, 200.0], [1.731745099E12, 198.0], [1.731745185E12, 199.0], [1.731745152E12, 201.0], [1.731745107E12, 137.0], [1.731745148E12, 202.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731745187E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 137.0, "minX": 1.731745068E12, "maxY": 256.0, "series": [{"data": [[1.731745072E12, 200.0], [1.731745113E12, 201.0], [1.731745154E12, 200.0], [1.731745068E12, 163.0], [1.731745162E12, 200.0], [1.731745076E12, 199.0], [1.731745117E12, 212.0], [1.731745158E12, 201.0], [1.731745125E12, 176.0], [1.731745166E12, 204.0], [1.73174508E12, 192.0], [1.731745121E12, 199.0], [1.731745088E12, 229.0], [1.731745129E12, 244.0], [1.73174517E12, 198.0], [1.731745084E12, 197.0], [1.731745178E12, 202.0], [1.731745092E12, 197.0], [1.731745133E12, 223.0], [1.731745174E12, 198.0], [1.731745141E12, 204.0], [1.731745182E12, 203.0], [1.731745096E12, 199.0], [1.731745137E12, 198.0], [1.731745104E12, 233.0], [1.731745145E12, 197.0], [1.731745186E12, 199.0], [1.7317451E12, 202.0], [1.731745108E12, 233.0], [1.731745149E12, 198.0], [1.731745114E12, 199.0], [1.731745155E12, 200.0], [1.731745069E12, 238.0], [1.73174511E12, 212.0], [1.731745077E12, 200.0], [1.731745118E12, 220.0], [1.731745159E12, 198.0], [1.731745073E12, 200.0], [1.731745167E12, 201.0], [1.731745081E12, 158.0], [1.731745122E12, 192.0], [1.731745163E12, 200.0], [1.73174513E12, 191.0], [1.731745171E12, 200.0], [1.731745085E12, 199.0], [1.731745126E12, 199.0], [1.731745093E12, 201.0], [1.731745134E12, 199.0], [1.731745175E12, 198.0], [1.731745089E12, 198.0], [1.731745183E12, 200.0], [1.731745097E12, 198.0], [1.731745138E12, 201.0], [1.731745179E12, 199.0], [1.731745146E12, 203.0], [1.731745187E12, 173.0], [1.731745101E12, 200.0], [1.731745142E12, 198.0], [1.731745109E12, 256.0], [1.73174515E12, 202.0], [1.731745105E12, 174.0], [1.73174507E12, 226.0], [1.731745156E12, 199.0], [1.731745111E12, 199.0], [1.731745119E12, 168.0], [1.731745074E12, 200.0], [1.73174516E12, 198.0], [1.731745115E12, 164.0], [1.731745082E12, 223.0], [1.731745168E12, 199.0], [1.731745123E12, 172.0], [1.731745078E12, 191.0], [1.731745164E12, 201.0], [1.731745086E12, 203.0], [1.731745172E12, 201.0], [1.731745127E12, 250.0], [1.731745135E12, 198.0], [1.73174509E12, 202.0], [1.731745176E12, 200.0], [1.731745131E12, 163.0], [1.731745098E12, 203.0], [1.731745184E12, 198.0], [1.731745139E12, 201.0], [1.731745094E12, 199.0], [1.73174518E12, 193.0], [1.731745102E12, 159.0], [1.731745143E12, 202.0], [1.731745151E12, 199.0], [1.731745106E12, 224.0], [1.731745147E12, 198.0], [1.731745071E12, 202.0], [1.731745157E12, 202.0], [1.731745112E12, 202.0], [1.731745153E12, 199.0], [1.73174512E12, 196.0], [1.731745075E12, 202.0], [1.731745161E12, 202.0], [1.731745116E12, 178.0], [1.731745124E12, 222.0], [1.731745079E12, 180.0], [1.731745165E12, 195.0], [1.731745087E12, 231.0], [1.731745173E12, 202.0], [1.731745128E12, 185.0], [1.731745083E12, 198.0], [1.731745169E12, 200.0], [1.731745136E12, 203.0], [1.731745091E12, 201.0], [1.731745177E12, 202.0], [1.731745132E12, 247.0], [1.73174514E12, 196.0], [1.731745095E12, 203.0], [1.731745181E12, 205.0], [1.731745103E12, 169.0], [1.731745144E12, 200.0], [1.731745099E12, 198.0], [1.731745185E12, 199.0], [1.731745152E12, 201.0], [1.731745107E12, 137.0], [1.731745148E12, 202.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745187E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 137.0, "minX": 1.731745068E12, "maxY": 256.0, "series": [{"data": [[1.731745072E12, 200.0], [1.731745113E12, 201.0], [1.731745154E12, 200.0], [1.731745068E12, 163.0], [1.731745162E12, 200.0], [1.731745076E12, 199.0], [1.731745117E12, 212.0], [1.731745158E12, 201.0], [1.731745125E12, 176.0], [1.731745166E12, 204.0], [1.73174508E12, 192.0], [1.731745121E12, 199.0], [1.731745088E12, 229.0], [1.731745129E12, 244.0], [1.73174517E12, 198.0], [1.731745084E12, 197.0], [1.731745178E12, 202.0], [1.731745092E12, 197.0], [1.731745133E12, 223.0], [1.731745174E12, 198.0], [1.731745141E12, 204.0], [1.731745182E12, 203.0], [1.731745096E12, 199.0], [1.731745137E12, 198.0], [1.731745104E12, 233.0], [1.731745145E12, 197.0], [1.731745186E12, 199.0], [1.7317451E12, 202.0], [1.731745108E12, 233.0], [1.731745149E12, 198.0], [1.731745114E12, 199.0], [1.731745155E12, 200.0], [1.731745069E12, 238.0], [1.73174511E12, 212.0], [1.731745077E12, 200.0], [1.731745118E12, 220.0], [1.731745159E12, 198.0], [1.731745073E12, 200.0], [1.731745167E12, 201.0], [1.731745081E12, 158.0], [1.731745122E12, 192.0], [1.731745163E12, 200.0], [1.73174513E12, 191.0], [1.731745171E12, 200.0], [1.731745085E12, 199.0], [1.731745126E12, 199.0], [1.731745093E12, 201.0], [1.731745134E12, 199.0], [1.731745175E12, 198.0], [1.731745089E12, 198.0], [1.731745183E12, 200.0], [1.731745097E12, 198.0], [1.731745138E12, 201.0], [1.731745179E12, 199.0], [1.731745146E12, 203.0], [1.731745187E12, 173.0], [1.731745101E12, 200.0], [1.731745142E12, 198.0], [1.731745109E12, 256.0], [1.73174515E12, 202.0], [1.731745105E12, 174.0], [1.73174507E12, 226.0], [1.731745156E12, 199.0], [1.731745111E12, 199.0], [1.731745119E12, 168.0], [1.731745074E12, 200.0], [1.73174516E12, 198.0], [1.731745115E12, 164.0], [1.731745082E12, 223.0], [1.731745168E12, 199.0], [1.731745123E12, 172.0], [1.731745078E12, 191.0], [1.731745164E12, 201.0], [1.731745086E12, 203.0], [1.731745172E12, 201.0], [1.731745127E12, 250.0], [1.731745135E12, 198.0], [1.73174509E12, 202.0], [1.731745176E12, 200.0], [1.731745131E12, 163.0], [1.731745098E12, 203.0], [1.731745184E12, 198.0], [1.731745139E12, 201.0], [1.731745094E12, 199.0], [1.73174518E12, 193.0], [1.731745102E12, 159.0], [1.731745143E12, 202.0], [1.731745151E12, 199.0], [1.731745106E12, 224.0], [1.731745147E12, 198.0], [1.731745071E12, 202.0], [1.731745157E12, 202.0], [1.731745112E12, 202.0], [1.731745153E12, 199.0], [1.73174512E12, 196.0], [1.731745075E12, 202.0], [1.731745161E12, 202.0], [1.731745116E12, 178.0], [1.731745124E12, 222.0], [1.731745079E12, 180.0], [1.731745165E12, 195.0], [1.731745087E12, 231.0], [1.731745173E12, 202.0], [1.731745128E12, 185.0], [1.731745083E12, 198.0], [1.731745169E12, 200.0], [1.731745136E12, 203.0], [1.731745091E12, 201.0], [1.731745177E12, 202.0], [1.731745132E12, 247.0], [1.73174514E12, 196.0], [1.731745095E12, 203.0], [1.731745181E12, 205.0], [1.731745103E12, 169.0], [1.731745144E12, 200.0], [1.731745099E12, 198.0], [1.731745185E12, 199.0], [1.731745152E12, 201.0], [1.731745107E12, 137.0], [1.731745148E12, 202.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731745187E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

